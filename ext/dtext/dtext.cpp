
#line 1 "ext/dtext/dtext.cpp.rl"
#include "dtext.h"
#include "url.h"

#include <algorithm>
#include <unordered_map>
#include <unordered_set>
#include <regex>

#ifdef DEBUG
#undef g_debug
#define STRINGIFY(x) XSTRINGIFY(x)
#define XSTRINGIFY(x) #x
#define g_debug(fmt, ...) fprintf(stderr, "\x1B[1;32mDEBUG\x1B[0m %-28.28s %-24.24s " fmt "\n", __FILE__ ":" STRINGIFY(__LINE__), __func__, ##__VA_ARGS__)
#else
#undef g_debug
#define g_debug(...)
#endif

static const size_t MAX_STACK_DEPTH = 512;

// Strip qualifier from tag: "Artoria Pendragon (Lancer) (Fate)" -> "Artoria Pendragon (Lancer)"
static const std::regex tag_qualifier_regex("[ _]\\([^)]+?\\)$");

// Permitted HTML attribute names.
static const std::unordered_map<std::string_view, const std::unordered_set<std::string_view>> permitted_attribute_names = {
  { "thead",    { "align" } },
  { "tbody",    { "align" } },
  { "tr",       { "align" } },
  { "td",       { "align", "colspan", "rowspan" } },
  { "th",       { "align", "colspan", "rowspan" } },
  { "col",      { "align", "span" } },
  { "colgroup", {} },
};

// Permitted HTML attribute values.
static const std::unordered_set<std::string_view> align_values = { "left", "center", "right", "justify" };
static const std::unordered_map<std::string_view, std::function<bool(std::string_view)>> permitted_attribute_values = {
  { "align",   [](auto value) { return align_values.find(value) != align_values.end(); } },
  { "span",    [](auto value) { return std::all_of(value.begin(), value.end(), isdigit); } },
  { "colspan", [](auto value) { return std::all_of(value.begin(), value.end(), isdigit); } },
  { "rowspan", [](auto value) { return std::all_of(value.begin(), value.end(), isdigit); } },
};


#line 738 "ext/dtext/dtext.cpp.rl"



#line 47 "ext/dtext/dtext.cpp"
static const unsigned char _dtext_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 10, 1, 11, 1, 
	12, 1, 13, 1, 14, 1, 15, 1, 
	16, 1, 17, 1, 18, 1, 19, 1, 
	20, 1, 21, 1, 22, 1, 23, 1, 
	24, 1, 25, 1, 34, 1, 35, 1, 
	36, 1, 38, 1, 39, 1, 40, 1, 
	41, 1, 42, 1, 43, 1, 44, 1, 
	45, 1, 46, 1, 47, 1, 48, 1, 
	49, 1, 50, 1, 51, 1, 52, 1, 
	53, 1, 54, 1, 55, 1, 56, 1, 
	57, 1, 58, 1, 59, 1, 60, 1, 
	61, 1, 62, 1, 63, 1, 64, 1, 
	65, 1, 86, 1, 87, 1, 88, 1, 
	90, 1, 91, 1, 92, 1, 93, 1, 
	94, 1, 95, 1, 96, 1, 97, 1, 
	98, 1, 99, 1, 100, 1, 101, 1, 
	102, 1, 103, 1, 104, 1, 105, 1, 
	106, 1, 107, 1, 108, 1, 109, 1, 
	110, 1, 111, 1, 112, 1, 113, 1, 
	114, 1, 115, 1, 116, 1, 117, 1, 
	118, 1, 119, 1, 120, 1, 121, 1, 
	122, 1, 123, 1, 124, 1, 125, 1, 
	126, 1, 127, 1, 128, 1, 129, 1, 
	130, 1, 131, 1, 132, 1, 133, 1, 
	134, 1, 135, 1, 136, 1, 137, 1, 
	138, 1, 139, 1, 140, 1, 141, 1, 
	142, 1, 143, 1, 144, 1, 145, 1, 
	146, 1, 147, 1, 148, 1, 149, 1, 
	150, 1, 151, 1, 152, 1, 153, 1, 
	154, 1, 156, 1, 157, 1, 158, 1, 
	159, 1, 160, 1, 161, 1, 162, 2, 
	0, 1, 2, 1, 36, 2, 1, 37, 
	2, 1, 58, 2, 1, 60, 2, 1, 
	66, 2, 1, 67, 2, 1, 68, 2, 
	1, 69, 2, 1, 70, 2, 1, 71, 
	2, 1, 72, 2, 1, 73, 2, 1, 
	74, 2, 1, 75, 2, 1, 76, 2, 
	1, 77, 2, 1, 78, 2, 2, 3, 
	2, 3, 4, 2, 3, 5, 2, 3, 
	6, 2, 3, 7, 2, 3, 10, 2, 
	3, 34, 2, 3, 35, 2, 3, 79, 
	2, 3, 80, 2, 3, 81, 2, 3, 
	89, 2, 3, 155, 2, 4, 5, 2, 
	5, 7, 2, 6, 7, 2, 7, 82, 
	2, 7, 83, 2, 9, 84, 2, 9, 
	85, 2, 10, 123, 2, 10, 125, 2, 
	10, 126, 2, 10, 128, 2, 10, 130, 
	2, 10, 131, 2, 10, 133, 2, 13, 
	0, 2, 13, 1, 2, 13, 3, 2, 
	13, 27, 2, 13, 29, 2, 13, 30, 
	2, 13, 31, 2, 13, 32, 2, 13, 
	33, 3, 0, 1, 60, 3, 1, 2, 
	3, 3, 3, 4, 5, 3, 3, 6, 
	7, 3, 3, 10, 123, 3, 3, 10, 
	125, 3, 3, 10, 126, 3, 3, 10, 
	128, 3, 3, 10, 130, 3, 3, 10, 
	131, 3, 3, 10, 133, 3, 6, 7, 
	82, 3, 6, 7, 83, 3, 8, 9, 
	84, 3, 8, 9, 85, 3, 13, 0, 
	32, 3, 13, 1, 28, 3, 13, 2, 
	3, 3, 13, 3, 26, 4, 13, 0, 
	1, 33, 4, 13, 2, 3, 26
};

static const short _dtext_cond_offsets[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 1, 
	1, 2, 2, 2, 2, 2, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 8, 14, 15, 35, 55, 
	76, 97, 120, 143, 165, 191, 215, 240, 
	261, 288, 309, 330, 353, 376, 398, 424, 
	448, 473, 500, 521, 545, 546, 549, 551, 
	553, 556, 560, 563, 567, 568, 581, 581, 
	581, 581, 581, 581, 581, 581, 581, 581, 
	581, 581, 581, 581, 581, 581, 581, 581, 
	581, 581, 581, 581, 581, 581, 581, 581, 
	581, 581, 581, 581, 581, 581, 581, 581, 
	581, 581, 581, 581, 581, 581, 581, 581, 
	581, 581, 581, 581, 581, 581, 581, 581, 
	581, 581, 581, 581, 581, 581, 581, 581, 
	581, 581, 581, 581, 581, 581, 581, 581, 
	581, 581, 581, 581, 581, 581, 581, 581, 
	581, 581, 581, 581, 581, 581, 581, 581, 
	581, 581, 581, 581, 581, 581, 581, 581, 
	581, 581, 581, 581, 581, 581, 581, 581, 
	581, 581, 581, 581, 581, 581, 581, 581, 
	581, 581, 581, 581, 581, 581, 581, 581, 
	581, 581, 581, 581, 581, 581, 581, 581, 
	581, 581, 581, 581, 581, 581, 581, 581, 
	581, 581, 581, 581, 581, 581, 581, 581, 
	581, 581, 581, 581, 581, 581, 581, 581, 
	581, 581, 581, 581, 581, 581, 581, 581, 
	581, 581, 581, 581, 581, 581, 581, 581, 
	581, 581, 581, 581, 581, 581, 581, 581, 
	581, 581, 581, 581, 581, 581, 581, 581, 
	581, 581, 581, 581, 581, 581, 581, 581, 
	581, 581, 581, 581, 581, 581, 581, 581, 
	581, 581, 581, 581, 581, 581, 581, 581, 
	581, 581, 581, 581, 581, 581, 581, 581, 
	581, 581, 581, 581, 581, 581, 581, 581, 
	581, 581, 581, 581, 581, 581, 581, 581, 
	581, 581, 581, 581, 581, 581, 581, 581, 
	581, 581, 581, 581, 581, 581, 581, 581, 
	581, 581, 581, 581, 581, 581, 581, 581, 
	581, 581, 581, 581, 581, 581, 581, 581, 
	581, 581, 581, 581, 581, 581, 581, 581, 
	581, 581, 581, 581, 581, 581, 581, 581, 
	581, 581, 581, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 584, 599, 619, 
	639, 639, 639, 639, 639, 639, 639, 639, 
	639, 639, 639
};

static const char _dtext_cond_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 4, 6, 1, 20, 20, 21, 
	21, 23, 23, 22, 26, 24, 25, 21, 
	27, 21, 21, 23, 23, 22, 26, 24, 
	25, 27, 21, 24, 1, 3, 2, 2, 
	3, 4, 3, 4, 1, 13, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 2, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 15, 20, 20, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
};

static const short _dtext_cond_keys[] = {
	93, 93, 62, 62, 62, 62, 93, 93, 
	-128, -1, 1, 8, 14, 31, 33, 127, 
	-128, -1, 1, 9, 11, 12, 14, 61, 
	62, 62, 63, 127, -128, -65, -128, -63, 
	-62, -33, -32, -31, -30, -30, -29, -29, 
	-28, -18, -17, -17, -16, -12, -11, -1, 
	1, 8, 14, 31, 33, 33, 39, 39, 
	43, 43, 45, 47, 48, 57, 65, 90, 
	95, 95, 97, 122, 127, 127, -128, -63, 
	-62, -33, -32, -31, -30, -30, -29, -29, 
	-28, -18, -17, -17, -16, -12, -11, -1, 
	1, 8, 14, 31, 33, 33, 39, 39, 
	43, 43, 45, 47, 48, 57, 65, 90, 
	95, 95, 97, 122, 127, 127, -128, -65, 
	-64, -63, -62, -33, -32, -31, -30, -30, 
	-29, -29, -28, -18, -17, -17, -16, -12, 
	-11, -1, 1, 8, 14, 31, 33, 33, 
	39, 39, 43, 43, 45, 47, 48, 57, 
	65, 90, 95, 95, 97, 122, 127, 127, 
	-128, -65, -64, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -100, -99, -99, -98, -65, 
	-64, -63, -62, -33, -32, -31, -30, -30, 
	-29, -29, -28, -18, -17, -17, -16, -12, 
	-11, -1, 1, 8, 14, 31, 33, 33, 
	39, 39, 43, 43, 45, 47, 48, 57, 
	65, 90, 95, 95, 97, 122, 127, 127, 
	-128, -84, -83, -83, -82, -65, -64, -63, 
	-62, -33, -32, -31, -30, -30, -29, -29, 
	-28, -18, -17, -17, -16, -12, -11, -1, 
	1, 8, 14, 31, 33, 33, 39, 39, 
	43, 43, 45, 47, 48, 57, 65, 90, 
	95, 95, 97, 122, 127, 127, -128, -128, 
	-127, -65, -64, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -126, -125, -121, -120, -111, 
	-110, -109, -108, -100, -99, -65, -64, -63, 
	-62, -33, -32, -31, -30, -30, -29, -29, 
	-28, -18, -17, -17, -16, -12, -11, -1, 
	1, 8, 14, 31, 33, 33, 39, 39, 
	43, 43, 45, 47, 48, 57, 65, 90, 
	95, 95, 97, 122, 127, 127, -128, -69, 
	-68, -68, -67, -67, -66, -65, -64, -63, 
	-62, -33, -32, -31, -30, -30, -29, -29, 
	-28, -18, -17, -17, -16, -12, -11, -1, 
	1, 8, 14, 31, 33, 33, 39, 39, 
	43, 43, 45, 47, 48, 57, 65, 90, 
	95, 95, 97, 122, 127, 127, -128, -120, 
	-119, -119, -118, -68, -67, -67, -66, -65, 
	-64, -63, -62, -33, -32, -31, -30, -30, 
	-29, -29, -28, -18, -17, -17, -16, -12, 
	-11, -1, 1, 8, 14, 31, 33, 33, 
	39, 39, 43, 43, 45, 47, 48, 57, 
	65, 90, 95, 95, 97, 122, 127, 127, 
	-128, -65, -64, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -100, -99, -99, -98, -97, 
	-96, -96, -95, -94, -93, -93, -92, -65, 
	-64, -63, -62, -33, -32, -31, -30, -30, 
	-29, -29, -28, -18, -17, -17, -16, -12, 
	-11, -1, 1, 8, 14, 31, 33, 33, 
	39, 39, 43, 43, 45, 47, 48, 57, 
	65, 90, 95, 95, 97, 122, 127, 127, 
	-128, -65, -64, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -100, -99, -99, 
	-98, -65, -64, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -84, -83, -83, -82, -65, 
	-64, -63, -62, -33, -32, -31, -30, -30, 
	-29, -29, -28, -18, -17, -17, -16, -12, 
	-11, -1, 1, 8, 14, 31, 33, 33, 
	39, 39, 43, 43, 45, 47, 48, 57, 
	65, 90, 95, 95, 97, 122, 127, 127, 
	-128, -128, -127, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -126, -125, -121, 
	-120, -111, -110, -109, -108, -100, -99, -65, 
	-64, -63, -62, -33, -32, -31, -30, -30, 
	-29, -29, -28, -18, -17, -17, -16, -12, 
	-11, -1, 1, 8, 14, 31, 33, 33, 
	39, 39, 43, 43, 45, 47, 48, 57, 
	65, 90, 95, 95, 97, 122, 127, 127, 
	-128, -69, -68, -68, -67, -67, -66, -65, 
	-64, -63, -62, -33, -32, -31, -30, -30, 
	-29, -29, -28, -18, -17, -17, -16, -12, 
	-11, -1, 1, 8, 14, 31, 33, 33, 
	39, 39, 43, 43, 45, 47, 48, 57, 
	65, 90, 95, 95, 97, 122, 127, 127, 
	-128, -120, -119, -119, -118, -68, -67, -67, 
	-66, -65, -64, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -100, -99, -99, -98, -97, 
	-96, -96, -95, -94, -93, -93, -92, -65, 
	-64, -63, -62, -33, -32, -31, -30, -30, 
	-29, -29, -28, -18, -17, -17, -16, -12, 
	-11, -1, 1, 8, 14, 31, 33, 33, 
	39, 39, 43, 43, 45, 47, 48, 57, 
	65, 90, 95, 95, 97, 122, 127, 127, 
	-128, -65, -64, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 99, 
	100, 100, 101, 114, 115, 115, 116, 122, 
	127, 127, -128, -65, -128, -100, -99, -99, 
	-98, -65, -128, -84, -82, -65, -128, -128, 
	-127, -65, -125, -121, -110, -109, -99, -65, 
	-128, -69, -68, -68, -67, -67, -66, -65, 
	-128, -120, -118, -68, -66, -65, -128, -100, 
	-98, -97, -95, -94, -92, -65, -128, -65, 
	-62, -33, -32, -31, -30, -30, -29, -29, 
	-28, -18, -17, -17, -16, -12, 1, 8, 
	14, 31, 48, 57, 65, 90, 97, 122, 
	127, 127, 60, 60, 64, 64, 64, 64, 
	-62, -33, -32, -31, -30, -30, -29, -29, 
	-28, -18, -17, -17, -16, -12, 1, 8, 
	14, 31, 46, 46, 48, 57, 65, 90, 
	95, 95, 97, 122, 127, 127, -128, -63, 
	-62, -33, -32, -31, -30, -30, -29, -29, 
	-28, -18, -17, -17, -16, -12, -11, -1, 
	1, 8, 14, 31, 33, 33, 39, 39, 
	43, 43, 45, 47, 48, 57, 65, 90, 
	95, 95, 97, 122, 127, 127, -128, -63, 
	-62, -33, -32, -31, -30, -30, -29, -29, 
	-28, -18, -17, -17, -16, -12, -11, -1, 
	1, 8, 14, 31, 33, 33, 39, 39, 
	43, 43, 45, 47, 48, 57, 65, 90, 
	95, 95, 97, 122, 127, 127, 0
};

static const char _dtext_cond_spaces[] = {
	2, 3, 2, 3, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 4, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 0
};

static const short _dtext_key_offsets[] = {
	0, 0, 4, 10, 14, 16, 17, 21, 
	23, 25, 27, 29, 30, 34, 36, 37, 
	39, 41, 43, 45, 46, 51, 54, 56, 
	58, 60, 62, 64, 66, 68, 70, 72, 
	73, 77, 79, 81, 83, 85, 86, 88, 
	90, 94, 97, 105, 112, 116, 120, 122, 
	124, 126, 128, 130, 134, 141, 145, 151, 
	153, 155, 157, 159, 161, 163, 164, 168, 
	170, 172, 174, 176, 178, 180, 183, 184, 
	188, 189, 191, 202, 213, 217, 219, 221, 
	223, 225, 226, 228, 230, 234, 237, 245, 
	252, 254, 256, 258, 260, 262, 266, 273, 
	277, 283, 285, 287, 289, 291, 293, 295, 
	296, 298, 300, 302, 304, 305, 307, 309, 
	311, 313, 315, 317, 320, 321, 325, 326, 
	327, 337, 339, 341, 344, 347, 350, 354, 
	364, 368, 378, 379, 381, 382, 385, 387, 
	389, 391, 393, 394, 395, 397, 398, 401, 
	403, 405, 407, 409, 410, 418, 419, 420, 
	421, 422, 423, 424, 425, 426, 428, 430, 
	432, 436, 440, 446, 452, 454, 455, 459, 
	461, 463, 465, 467, 469, 471, 474, 478, 
	479, 481, 483, 485, 487, 488, 494, 496, 
	497, 499, 501, 503, 505, 507, 509, 512, 
	513, 515, 517, 519, 521, 522, 523, 527, 
	529, 531, 533, 535, 537, 538, 544, 545, 
	546, 547, 548, 552, 554, 556, 558, 560, 
	562, 563, 569, 570, 571, 572, 575, 580, 
	591, 603, 605, 607, 609, 611, 613, 615, 
	617, 619, 621, 622, 624, 626, 628, 630, 
	632, 633, 635, 637, 639, 641, 642, 644, 
	646, 648, 650, 652, 654, 657, 658, 660, 
	662, 664, 668, 671, 679, 686, 688, 690, 
	692, 694, 696, 698, 699, 701, 703, 714, 
	725, 736, 746, 748, 750, 752, 754, 756, 
	757, 759, 761, 763, 765, 767, 769, 772, 
	773, 775, 777, 779, 783, 786, 794, 801, 
	803, 805, 807, 809, 811, 813, 814, 815, 
	816, 826, 828, 830, 833, 836, 839, 843, 
	853, 857, 858, 859, 864, 866, 868, 871, 
	875, 878, 884, 888, 894, 902, 904, 932, 
	934, 936, 939, 943, 946, 952, 956, 962, 
	970, 972, 1000, 1024, 1026, 1028, 1031, 1035, 
	1038, 1044, 1048, 1054, 1062, 1064, 1066, 1068, 
	1070, 1073, 1074, 1075, 1089, 1091, 1106, 1108, 
	1110, 1127, 1129, 1131, 1134, 1137, 1158, 1161, 
	1173, 1177, 1181, 1186, 1188, 1190, 1191, 1195, 
	1200, 1202, 1204, 1206, 1209, 1210, 1211, 1215, 
	1216, 1217, 1227, 1234, 1241, 1246, 1255, 1267, 
	1271, 1272, 1278, 1284, 1290, 1291, 1303, 1312, 
	1319, 1326, 1333, 1341, 1355, 1361, 1362, 1376, 
	1390, 1404, 1411, 1418, 1425, 1432, 1438, 1439, 
	1443, 1447, 1449, 1460, 1463, 1474, 1483, 1491, 
	1498, 1505, 1512, 1519, 1525, 1526, 1535, 1540, 
	1545, 1547, 1548, 1553, 1554, 1555, 1556, 1570, 
	1578, 1592, 1604, 1612, 1616, 1624, 1632, 1640, 
	1647, 1648, 1649, 1658, 1674, 1684, 1700, 1714, 
	1724, 1733, 1734, 1738, 1748, 1757, 1766, 1775, 
	1784, 1793, 1804, 1814, 1823, 1833, 1842, 1851, 
	1868, 1877, 1886, 1895, 1904, 1908, 1916, 1925, 
	1933, 1941, 1950, 1951, 1955, 1956, 1957, 1958, 
	1960, 1961, 1963, 1964, 1966, 1967, 1969, 1977, 
	1978, 1980, 1981, 1982, 1996, 1998, 2013, 2015, 
	2017, 2034, 2036, 2038, 2041, 2044, 2065, 2068, 
	2080, 2084, 2088, 2093, 2095, 2097, 2099, 2102, 
	2106, 2109, 2115, 2119, 2125, 2133, 2135, 2163, 
	2165, 2167, 2170, 2174, 2177, 2183, 2187, 2193, 
	2201, 2203, 2231, 2255, 2257, 2259, 2262, 2266, 
	2269, 2275, 2279, 2285, 2293, 2295, 2297, 2298, 
	2300, 2302, 2304, 2306, 2308, 2310, 2312, 2313, 
	2314, 2316, 2317, 2319, 2322, 2324, 2326, 2327, 
	2329, 2330, 2332, 2333, 2335, 2336, 2338, 2340, 
	2342, 2343, 2345, 2346, 2348, 2364, 2365, 2366, 
	2369, 2370, 2373, 2374, 2378, 2380, 2382, 2384, 
	2386, 2387, 2389, 2391, 2395, 2398, 2406, 2413, 
	2417, 2421, 2423, 2425, 2427, 2429, 2431, 2435, 
	2442, 2446, 2452, 2454, 2456, 2458, 2461, 2462, 
	2463, 2467, 2472, 2478, 2481, 2485, 2486, 2487, 
	2489, 2491, 2493, 2495, 2497, 2499, 2500, 2504, 
	2506, 2508, 2510, 2512, 2513, 2516, 2518, 2520, 
	2522, 2524, 2526, 2529, 2530, 2532, 2533, 2536, 
	2538, 2542, 2545, 2553, 2557, 2562, 2565, 2570, 
	2576, 2579, 2580, 2582, 2584, 2586, 2587, 2593, 
	2595, 2597, 2599, 2602, 2603, 2604, 2608, 2609, 
	2615, 2619, 2624, 2626, 2628, 2630, 2633, 2634, 
	2635, 2639, 2640, 2642, 2644, 2646, 2649, 2650, 
	2651, 2655, 2656, 2662, 2668, 2671, 2672, 2674, 
	2676, 2678, 2679, 2686, 2694, 2702, 2710, 2717, 
	2719, 2721, 2723, 2726, 2727, 2728, 2732, 2733, 
	2749, 2752, 2756, 2757, 2762, 2764, 2766, 2768, 
	2770, 2771, 2772, 2774, 2778, 2780, 2782, 2784, 
	2785, 2786, 2790, 2795, 2801, 2804, 2808, 2813, 
	2819, 2824, 2826, 2828, 2830, 2833, 2834, 2835, 
	2839, 2840, 2845, 2847, 2849, 2851, 2853, 2855, 
	2857, 2859, 2861, 2862, 2863, 2867, 2869, 2871, 
	2873, 2875, 2876, 2878, 2880, 2884, 2887, 2895, 
	2902, 2906, 2907, 2909, 2911, 2913, 2915, 2919, 
	2926, 2930, 2936, 2938, 2940, 2942, 2945, 2946, 
	2947, 2951, 2956, 2957, 2959, 2961, 2963, 2965, 
	2967, 2969, 2970, 2975, 2977, 2979, 2981, 2983, 
	2985, 2988, 2989, 2991, 2993, 2995, 2997, 2998, 
	3000, 3001, 3002, 3010, 3019, 3021, 3051, 3081, 
	3113, 3145, 3178, 3211, 3244, 3286, 3320, 3354, 
	3386, 3421, 3453, 3485, 3518, 3551, 3584, 3626, 
	3660, 3694, 3729, 3761, 3793, 3795, 3798, 3802, 
	3805, 3811, 3815, 3821, 3829, 3831, 3851, 3852, 
	3854, 3856, 3858, 3860, 3861, 3862, 3864, 3866, 
	3868, 3870, 3871, 3872, 3874, 3876, 3878, 3880, 
	3882, 3884, 3886, 3887, 3888, 3890, 3892, 3894, 
	3896, 3898, 3900, 3902, 3903, 3907, 3909, 3911, 
	3913, 3915, 3917, 3919, 3921, 3922, 3930, 3932, 
	3934, 3936, 3937, 3939, 3941, 3943, 3944, 3946, 
	3948, 3950, 3951, 3952, 3954, 3956, 3961, 3969, 
	3978, 3981, 3991, 3994, 3998, 4001, 4004, 4008, 
	4017, 4019, 4021, 4023, 4025, 4028, 4036, 4045, 
	4048, 4058, 4061, 4065, 4068, 4071, 4075, 4084, 
	4092, 4094, 4096, 4098, 4101, 4109, 4118, 4121, 
	4131, 4134, 4138, 4141, 4144, 4148, 4157, 4160, 
	4168, 4177, 4180, 4190, 4193, 4197, 4200, 4203, 
	4207, 4216, 4221, 4229, 4238, 4241, 4251, 4254, 
	4258, 4261, 4264, 4268, 4277, 4279, 4281, 4284, 
	4292, 4301, 4304, 4314, 4317, 4321, 4324, 4327, 
	4331, 4340, 4343, 4351, 4360, 4363, 4373, 4376, 
	4380, 4383, 4386, 4390, 4399, 4403, 4405, 4407, 
	4409, 4411, 4413, 4415, 4417, 4418, 4426, 4428, 
	4430, 4432, 4433, 4435, 4437, 4439, 4440, 4442, 
	4444, 4446, 4447, 4448, 4450, 4452, 4457, 4465, 
	4474, 4477, 4487, 4490, 4494, 4497, 4500, 4504, 
	4513, 4515, 4517, 4519, 4521, 4524, 4532, 4541, 
	4544, 4554, 4557, 4561, 4564, 4567, 4571, 4580, 
	4588, 4590, 4592, 4594, 4597, 4605, 4614, 4617, 
	4627, 4630, 4634, 4637, 4640, 4644, 4653, 4656, 
	4664, 4673, 4676, 4686, 4689, 4693, 4696, 4699, 
	4703, 4712, 4717, 4725, 4734, 4737, 4747, 4750, 
	4754, 4757, 4760, 4764, 4773, 4775, 4777, 4780, 
	4788, 4797, 4800, 4810, 4813, 4817, 4820, 4823, 
	4827, 4836, 4839, 4847, 4856, 4859, 4869, 4872, 
	4876, 4879, 4882, 4886, 4895, 4905, 4909, 4915, 
	4917, 4920, 4923, 4928, 4944, 4947, 4951, 4955, 
	4958, 4961, 4965, 4968, 4970, 4972, 4986, 4987, 
	4990, 5001, 5010, 5072, 5074, 5080, 5082, 5084, 
	5088, 5092, 5102, 5104, 5110, 5113, 5118, 5120, 
	5122, 5124, 5125, 5153, 5181, 5205, 5226, 5231, 
	5239, 5245, 5251, 5257, 5263, 5269, 5275, 5281, 
	5287, 5293, 5299, 5305, 5311, 5318, 5325, 5337, 
	5347, 5357, 5367, 5376, 5378, 5388, 5398, 5408, 
	5418, 5427, 5429, 5439, 5449, 5459, 5469, 5479, 
	5489, 5498, 5500, 5510, 5520, 5530, 5540, 5549, 
	5552, 5560, 5570, 5580, 5590, 5600, 5609, 5611, 
	5621, 5631, 5641, 5652, 5673, 5701, 5729, 5753, 
	5758, 5767, 5777, 5787, 5797, 5807, 5817, 5827, 
	5837, 5847, 5857, 5867, 5876, 5878, 5888, 5898, 
	5907, 5909, 5921, 5931, 5941, 5951, 5960, 5962, 
	5974, 5984, 5993, 5995, 6005, 6014, 6016, 6026, 
	6036, 6046, 6056, 6066, 6075, 6077, 6087, 6097, 
	6107, 6117, 6126, 6129, 6131, 6141, 6151, 6161, 
	6170, 6172, 6182, 6192, 6202, 6211, 6213, 6235, 
	6239, 6243, 6247, 6248, 6271, 6295, 6317, 6347, 
	6377, 6381, 6383, 6384, 6385, 6389, 6391, 6392, 
	6393, 6395, 6400
};

static const short _dtext_trans_keys[] = {
	0, 9, 10, 32, 0, 9, 10, 32, 
	60, 91, 72, 84, 104, 116, 82, 114, 
	62, 0, 9, 10, 32, 65, 97, 66, 
	98, 76, 108, 69, 101, 62, 72, 84, 
	104, 116, 82, 114, 93, 65, 97, 66, 
	98, 76, 108, 69, 101, 93, 0, 9, 
	10, 13, 32, 9, 32, 42, 76, 108, 
	79, 111, 67, 99, 75, 107, 81, 113, 
	85, 117, 79, 111, 84, 116, 69, 101, 
	62, 69, 79, 101, 111, 78, 110, 84, 
	116, 69, 101, 82, 114, 62, 68, 100, 
	69, 101, 9, 32, 61, 62, 9, 32, 
	61, 9, 32, 48, 57, 65, 90, 97, 
	122, 62, 48, 57, 65, 90, 97, 122, 
	0, 9, 10, 32, 0, 9, 10, 32, 
	88, 120, 80, 112, 65, 97, 78, 110, 
	68, 100, 9, 32, 61, 62, 0, 9, 
	10, 13, 32, 61, 62, 0, 10, 13, 
	62, 0, 9, 10, 13, 32, 62, 79, 
	111, 68, 100, 84, 116, 69, 101, 88, 
	120, 84, 116, 62, 0, 9, 10, 32, 
	80, 112, 79, 111, 73, 105, 76, 108, 
	69, 101, 82, 114, 62, 83, 115, 62, 
	65, 78, 97, 110, 62, 35, 46, 33, 
	35, 38, 45, 95, 47, 58, 65, 90, 
	97, 122, 33, 35, 38, 46, 95, 45, 
	58, 65, 90, 97, 122, 69, 79, 101, 
	111, 78, 110, 84, 116, 69, 101, 82, 
	114, 93, 68, 100, 69, 101, 9, 32, 
	61, 93, 9, 32, 61, 9, 32, 48, 
	57, 65, 90, 97, 122, 93, 48, 57, 
	65, 90, 97, 122, 88, 120, 80, 112, 
	65, 97, 78, 110, 68, 100, 9, 32, 
	61, 93, 0, 9, 10, 13, 32, 61, 
	93, 0, 10, 13, 93, 0, 9, 10, 
	13, 32, 93, 79, 111, 68, 100, 84, 
	116, 69, 101, 88, 120, 84, 116, 93, 
	85, 117, 79, 111, 84, 116, 69, 101, 
	93, 80, 112, 79, 111, 73, 105, 76, 
	108, 69, 101, 82, 114, 83, 93, 115, 
	93, 65, 78, 97, 110, 93, 96, 0, 
	9, 10, 32, 48, 57, 65, 90, 97, 
	122, 0, 10, 0, 10, 0, 10, 96, 
	0, 10, 96, 0, 10, 96, 0, 9, 
	10, 32, 0, 9, 10, 32, 48, 57, 
	65, 90, 97, 122, 0, 9, 10, 32, 
	66, 69, 73, 83, 85, 98, 101, 105, 
	115, 117, 62, 77, 109, 62, 62, 84, 
	116, 82, 114, 79, 111, 78, 110, 71, 
	103, 62, 62, 77, 109, 62, 62, 84, 
	116, 82, 114, 79, 111, 78, 110, 71, 
	103, 62, 66, 73, 83, 85, 98, 105, 
	115, 117, 93, 93, 93, 93, 93, 93, 
	93, 93, -128, -65, -128, -65, -128, -65, 
	0, 9, 10, 32, 0, 9, 10, 32, 
	0, 9, 10, 32, 60, 91, 72, 83, 
	84, 104, 115, 116, 82, 114, 62, 0, 
	9, 10, 32, 80, 112, 79, 111, 73, 
	105, 76, 108, 69, 101, 82, 114, 62, 
	83, 115, 0, 9, 10, 32, 62, 65, 
	97, 66, 98, 76, 108, 69, 101, 62, 
	72, 83, 84, 104, 115, 116, 82, 114, 
	93, 80, 112, 79, 111, 73, 105, 76, 
	108, 69, 101, 82, 114, 83, 93, 115, 
	93, 65, 97, 66, 98, 76, 108, 69, 
	101, 93, 47, 67, 84, 99, 116, 69, 
	101, 78, 110, 84, 116, 69, 101, 82, 
	114, 62, 68, 72, 78, 100, 104, 110, 
	62, 62, 62, 47, 67, 84, 99, 116, 
	69, 101, 78, 110, 84, 116, 69, 101, 
	82, 114, 93, 68, 72, 78, 100, 104, 
	110, 93, 93, 93, 9, 32, 42, 0, 
	9, 10, 13, 32, 47, 67, 72, 78, 
	83, 84, 99, 104, 110, 115, 116, 66, 
	67, 69, 81, 83, 84, 98, 99, 101, 
	113, 115, 116, 76, 108, 79, 111, 67, 
	99, 75, 107, 81, 113, 85, 117, 79, 
	111, 84, 116, 69, 101, 2653, 88, 120, 
	80, 112, 65, 97, 78, 110, 68, 100, 
	3134, 85, 117, 79, 111, 84, 116, 69, 
	101, 2622, 80, 112, 79, 111, 73, 105, 
	76, 108, 69, 101, 82, 114, 62, 83, 
	115, 62, 79, 111, 68, 100, 69, 101, 
	9, 32, 61, 62, 9, 32, 61, 9, 
	32, 48, 57, 65, 90, 97, 122, 62, 
	48, 57, 65, 90, 97, 122, 79, 111, 
	68, 100, 84, 116, 69, 101, 88, 120, 
	84, 116, 62, 49, 54, 35, 46, 33, 
	35, 38, 45, 95, 47, 58, 65, 90, 
	97, 122, 33, 35, 38, 46, 95, 45, 
	58, 65, 90, 97, 122, 47, 67, 72, 
	78, 83, 84, 99, 104, 110, 115, 116, 
	67, 69, 81, 83, 84, 99, 101, 113, 
	115, 116, 88, 120, 80, 112, 65, 97, 
	78, 110, 68, 100, 3165, 80, 112, 79, 
	111, 73, 105, 76, 108, 69, 101, 82, 
	114, 83, 93, 115, 93, 79, 111, 68, 
	100, 69, 101, 9, 32, 61, 93, 9, 
	32, 61, 9, 32, 48, 57, 65, 90, 
	97, 122, 93, 48, 57, 65, 90, 97, 
	122, 79, 111, 68, 100, 84, 116, 69, 
	101, 88, 120, 84, 116, 93, 96, 96, 
	0, 9, 10, 32, 48, 57, 65, 90, 
	97, 122, 0, 10, 0, 10, 0, 10, 
	96, 0, 10, 96, 0, 10, 96, 0, 
	9, 10, 32, 0, 9, 10, 32, 48, 
	57, 65, 90, 97, 122, 0, 9, 10, 
	32, 34, 58, 35, 47, 72, 91, 104, 
	-128, -65, -128, -65, -99, -128, -65, -128, 
	-84, -82, -65, -128, -127, -65, -125, -121, 
	-110, -109, -99, -65, -68, -67, -128, -65, 
	-128, -120, -118, -68, -66, -65, -128, -100, 
	-98, -97, -95, -94, -92, -65, -128, -65, 
	-30, -29, -17, 32, 34, 35, 39, 44, 
	46, 60, 62, 63, 91, 93, -128, -63, 
	-62, -33, -32, -18, -16, -12, -11, 0, 
	9, 13, 58, 59, -128, -65, -128, -65, 
	-99, -128, -65, -128, -84, -82, -65, -128, 
	-127, -65, -125, -121, -110, -109, -99, -65, 
	-68, -67, -128, -65, -128, -120, -118, -68, 
	-66, -65, -128, -100, -98, -97, -95, -94, 
	-92, -65, -128, -65, -30, -29, -17, 32, 
	34, 35, 39, 44, 46, 60, 62, 63, 
	91, 93, -128, -63, -62, -33, -32, -18, 
	-16, -12, -11, 0, 9, 13, 58, 59, 
	-30, -29, -17, 32, 34, 35, 39, 44, 
	46, 63, -128, -63, -62, -33, -32, -18, 
	-16, -12, -11, 0, 9, 13, 58, 59, 
	-128, -65, -128, -65, -99, -128, -65, -128, 
	-84, -82, -65, -128, -127, -65, -125, -121, 
	-110, -109, -99, -65, -68, -67, -128, -65, 
	-128, -120, -118, -68, -66, -65, -128, -100, 
	-98, -97, -95, -94, -92, -65, -128, -65, 
	84, 116, 84, 116, 80, 112, 58, 83, 
	115, 47, 47, 45, 95, -62, -33, -32, 
	-17, -16, -12, 48, 57, 65, 90, 97, 
	122, -128, -65, 45, 46, 95, -62, -33, 
	-32, -17, -16, -12, 48, 57, 65, 90, 
	97, 122, -128, -65, -128, -65, -30, -29, 
	-17, 45, 95, -62, -33, -32, -18, -16, 
	-12, 48, 57, 65, 90, 97, 122, -128, 
	-65, -128, -65, -99, -128, -65, -83, -128, 
	-65, -30, -29, -17, 35, 46, 47, 58, 
	63, 95, -62, -33, -32, -18, -16, -12, 
	45, 57, 65, 90, 97, 122, -128, -127, 
	-65, -128, -126, -125, -121, -120, -111, -110, 
	-109, -108, -100, -99, -65, -68, -67, -128, 
	-65, -119, -67, -128, -65, -99, -96, -93, 
	-128, -65, -128, -65, 48, 57, 58, 35, 
	47, 72, 104, 0, 32, 93, 9, 13, 
	84, 116, 84, 116, 80, 112, 58, 83, 
	115, 47, 47, 0, 32, 9, 13, 58, 
	91, 9, 32, 58, 60, 62, 92, 93, 
	124, 10, 13, 9, 32, 35, 93, 124, 
	10, 13, 9, 32, 35, 93, 124, 10, 
	13, 32, 93, 124, 9, 13, 9, 32, 
	35, 93, 124, 10, 13, 65, 90, 9, 
	32, 45, 93, 95, 124, 48, 57, 65, 
	90, 97, 122, 9, 32, 93, 124, 93, 
	9, 32, 93, 124, 10, 13, 9, 32, 
	93, 124, 10, 13, 9, 32, 93, 124, 
	10, 13, 93, 9, 32, 45, 93, 95, 
	124, 48, 57, 65, 90, 97, 122, 32, 
	45, 95, 48, 57, 65, 90, 97, 122, 
	9, 32, 35, 93, 124, 10, 13, 9, 
	32, 35, 93, 124, 10, 13, 9, 32, 
	35, 93, 124, 10, 13, 9, 32, 93, 
	124, 10, 13, 65, 90, 9, 32, 45, 
	93, 95, 124, 10, 13, 48, 57, 65, 
	90, 97, 122, 9, 32, 93, 124, 10, 
	13, 93, 9, 32, 45, 93, 95, 124, 
	10, 13, 48, 57, 65, 90, 97, 122, 
	9, 32, 45, 93, 95, 124, 10, 13, 
	48, 57, 65, 90, 97, 122, 9, 32, 
	45, 93, 95, 124, 10, 13, 48, 57, 
	65, 90, 97, 122, 9, 32, 35, 93, 
	124, 10, 13, 9, 32, 62, 93, 124, 
	10, 13, 9, 32, 93, 95, 124, 10, 
	13, 9, 32, 60, 93, 124, 10, 13, 
	9, 32, 93, 124, 10, 13, 62, 9, 
	32, 35, 93, 9, 32, 35, 93, 65, 
	90, 9, 32, 45, 93, 95, 48, 57, 
	65, 90, 97, 122, 9, 32, 93, 9, 
	32, 45, 93, 95, 48, 57, 65, 90, 
	97, 122, 32, 45, 95, 48, 57, 65, 
	90, 97, 122, 9, 32, 35, 58, 93, 
	124, 10, 13, 9, 32, 51, 93, 124, 
	10, 13, 9, 32, 35, 93, 124, 10, 
	13, 9, 32, 35, 93, 124, 10, 13, 
	9, 32, 35, 93, 124, 10, 13, 9, 
	32, 93, 124, 10, 13, 47, 95, 119, 
	124, 48, 57, 65, 90, 97, 122, 9, 
	32, 35, 93, 124, 9, 32, 35, 93, 
	124, 65, 90, 124, 9, 32, 35, 93, 
	124, 95, 124, 123, 0, 9, 32, 45, 
	58, 60, 62, 92, 124, 126, 10, 13, 
	123, 125, 0, 9, 32, 123, 124, 125, 
	10, 13, 0, 9, 32, 45, 58, 60, 
	62, 92, 123, 124, 125, 126, 10, 13, 
	0, 9, 32, 58, 60, 62, 92, 123, 
	124, 125, 10, 13, 0, 9, 32, 123, 
	124, 125, 10, 13, 9, 32, 124, 125, 
	0, 9, 10, 13, 32, 125, 11, 12, 
	0, 9, 10, 13, 32, 125, 11, 12, 
	0, 9, 10, 13, 32, 125, 11, 12, 
	0, 10, 13, 32, 125, 9, 12, 125, 
	125, 0, 9, 10, 13, 32, 124, 125, 
	11, 12, 0, 9, 10, 13, 32, 45, 
	58, 60, 62, 92, 123, 124, 125, 126, 
	11, 12, 0, 9, 10, 13, 32, 123, 
	124, 125, 11, 12, 0, 9, 10, 13, 
	32, 45, 58, 60, 62, 92, 123, 124, 
	125, 126, 11, 12, 0, 9, 10, 13, 
	32, 58, 60, 62, 92, 123, 124, 125, 
	11, 12, 0, 9, 10, 13, 32, 123, 
	124, 125, 11, 12, 0, 9, 10, 13, 
	32, 124, 125, 11, 12, 125, 9, 32, 
	124, 125, 0, 9, 10, 13, 32, 123, 
	124, 125, 11, 12, 0, 9, 10, 13, 
	32, 62, 125, 11, 12, 0, 9, 10, 
	13, 32, 95, 125, 11, 12, 0, 9, 
	10, 13, 32, 60, 125, 11, 12, 0, 
	9, 10, 13, 32, 124, 125, 11, 12, 
	0, 9, 10, 13, 32, 62, 125, 11, 
	12, 0, 9, 10, 13, 32, 58, 123, 
	124, 125, 11, 12, 0, 9, 10, 13, 
	32, 123, 124, 125, 11, 12, 0, 9, 
	10, 13, 32, 51, 125, 11, 12, 0, 
	9, 10, 13, 32, 123, 124, 125, 11, 
	12, 0, 9, 10, 13, 32, 124, 125, 
	11, 12, 0, 9, 10, 13, 32, 47, 
	125, 11, 12, 0, 9, 10, 13, 32, 
	95, 119, 124, 125, 11, 12, 48, 57, 
	65, 90, 97, 122, 0, 9, 10, 13, 
	32, 124, 125, 11, 12, 0, 9, 10, 
	13, 32, 124, 125, 11, 12, 0, 9, 
	10, 13, 32, 95, 125, 11, 12, 0, 
	9, 10, 13, 32, 124, 125, 11, 12, 
	9, 32, 124, 125, 0, 9, 32, 123, 
	124, 125, 10, 13, 0, 9, 32, 58, 
	123, 124, 125, 10, 13, 0, 9, 32, 
	123, 124, 125, 10, 13, 0, 9, 32, 
	123, 124, 125, 10, 13, 95, 119, 124, 
	48, 57, 65, 90, 97, 122, 124, 9, 
	32, 124, 125, 95, 124, 35, 48, 57, 
	35, 48, 57, 35, 48, 57, 35, 48, 
	57, 45, 61, 48, 57, 65, 90, 97, 
	122, 35, 48, 57, 47, 47, 45, 95, 
	-62, -33, -32, -17, -16, -12, 48, 57, 
	65, 90, 97, 122, -128, -65, 45, 46, 
	95, -62, -33, -32, -17, -16, -12, 48, 
	57, 65, 90, 97, 122, -128, -65, -128, 
	-65, -30, -29, -17, 45, 95, -62, -33, 
	-32, -18, -16, -12, 48, 57, 65, 90, 
	97, 122, -128, -65, -128, -65, -99, -128, 
	-65, -83, -128, -65, -30, -29, -17, 35, 
	46, 47, 58, 63, 95, -62, -33, -32, 
	-18, -16, -12, 45, 57, 65, 90, 97, 
	122, -128, -127, -65, -128, -126, -125, -121, 
	-120, -111, -110, -109, -108, -100, -99, -65, 
	-68, -67, -128, -65, -119, -67, -128, -65, 
	-99, -96, -93, -128, -65, -128, -65, -128, 
	-65, -128, -65, -99, -128, -65, -128, -84, 
	-82, -65, -128, -127, -65, -125, -121, -110, 
	-109, -99, -65, -68, -67, -128, -65, -128, 
	-120, -118, -68, -66, -65, -128, -100, -98, 
	-97, -95, -94, -92, -65, -128, -65, -30, 
	-29, -17, 32, 34, 35, 39, 44, 46, 
	60, 62, 63, 91, 93, -128, -63, -62, 
	-33, -32, -18, -16, -12, -11, 0, 9, 
	13, 58, 59, -128, -65, -128, -65, -99, 
	-128, -65, -128, -84, -82, -65, -128, -127, 
	-65, -125, -121, -110, -109, -99, -65, -68, 
	-67, -128, -65, -128, -120, -118, -68, -66, 
	-65, -128, -100, -98, -97, -95, -94, -92, 
	-65, -128, -65, -30, -29, -17, 32, 34, 
	35, 39, 44, 46, 60, 62, 63, 91, 
	93, -128, -63, -62, -33, -32, -18, -16, 
	-12, -11, 0, 9, 13, 58, 59, -30, 
	-29, -17, 32, 34, 35, 39, 44, 46, 
	63, -128, -63, -62, -33, -32, -18, -16, 
	-12, -11, 0, 9, 13, 58, 59, -128, 
	-65, -128, -65, -99, -128, -65, -128, -84, 
	-82, -65, -128, -127, -65, -125, -121, -110, 
	-109, -99, -65, -68, -67, -128, -65, -128, 
	-120, -118, -68, -66, -65, -128, -100, -98, 
	-97, -95, -94, -92, -65, -128, -65, 48, 
	57, 35, 48, 57, 65, 97, 67, 99, 
	84, 116, 73, 105, 79, 111, 78, 110, 
	32, 35, 48, 57, 35, 48, 57, 47, 
	48, 57, 80, 112, 48, 57, 35, 48, 
	57, 35, 48, 57, 35, 48, 57, 35, 
	48, 57, 80, 112, 48, 57, 35, 48, 
	57, 35, 48, 57, 66, 67, 69, 73, 
	81, 83, 84, 85, 98, 99, 101, 105, 
	113, 115, 116, 117, 93, 93, 80, 93, 
	112, 93, 82, 93, 114, 93, 69, 79, 
	101, 111, 78, 110, 84, 116, 69, 101, 
	82, 114, 93, 68, 100, 69, 101, 9, 
	32, 61, 93, 9, 32, 61, 9, 32, 
	48, 57, 65, 90, 97, 122, 93, 48, 
	57, 65, 90, 97, 122, 0, 9, 10, 
	32, 0, 9, 10, 32, 88, 120, 80, 
	112, 65, 97, 78, 110, 68, 100, 9, 
	32, 61, 93, 0, 9, 10, 13, 32, 
	61, 93, 0, 10, 13, 93, 0, 9, 
	10, 13, 32, 93, 84, 116, 84, 116, 
	80, 112, 58, 83, 115, 47, 47, 0, 
	32, 9, 13, 0, 32, 93, 9, 13, 
	0, 32, 40, 93, 9, 13, 0, 10, 
	13, 0, 10, 13, 41, 58, 93, 79, 
	111, 68, 100, 84, 116, 69, 101, 88, 
	120, 84, 116, 93, 0, 9, 10, 32, 
	85, 117, 79, 111, 84, 116, 69, 101, 
	93, 80, 93, 112, 79, 111, 73, 105, 
	76, 108, 69, 101, 82, 114, 83, 93, 
	115, 93, 78, 110, 93, 82, 93, 114, 
	76, 108, 9, 32, 61, 93, 9, 32, 
	61, 9, 32, 34, 35, 39, 47, 72, 
	104, 35, 47, 72, 104, 0, 32, 34, 
	9, 13, 9, 32, 93, 0, 9, 10, 
	13, 32, 0, 9, 10, 13, 32, 91, 
	9, 32, 91, 47, 85, 117, 82, 114, 
	76, 108, 93, 0, 9, 10, 13, 32, 
	91, 84, 116, 84, 116, 80, 112, 58, 
	83, 115, 47, 47, 0, 32, 9, 13, 
	58, 0, 9, 32, 93, 10, 13, 35, 
	47, 72, 104, 0, 32, 39, 9, 13, 
	84, 116, 84, 116, 80, 112, 58, 83, 
	115, 47, 47, 0, 32, 9, 13, 58, 
	84, 116, 84, 116, 80, 112, 58, 83, 
	115, 47, 47, 0, 32, 9, 13, 58, 
	9, 32, 35, 47, 72, 104, 0, 9, 
	32, 91, 10, 13, 9, 32, 91, 47, 
	85, 117, 82, 114, 76, 108, 93, 0, 
	9, 32, 47, 91, 10, 13, 0, 9, 
	32, 85, 91, 117, 10, 13, 0, 9, 
	32, 82, 91, 114, 10, 13, 0, 9, 
	32, 76, 91, 108, 10, 13, 0, 9, 
	32, 91, 93, 10, 13, 84, 116, 84, 
	116, 80, 112, 58, 83, 115, 47, 47, 
	0, 32, 9, 13, 58, 66, 67, 69, 
	73, 81, 83, 84, 85, 98, 99, 101, 
	105, 113, 115, 116, 117, 62, 76, 108, 
	77, 88, 109, 120, 62, 62, 80, 84, 
	112, 116, 82, 114, 79, 111, 78, 110, 
	71, 103, 62, 62, 9, 32, 9, 32, 
	72, 104, 82, 114, 69, 101, 70, 102, 
	61, 34, 35, 47, 72, 104, 0, 32, 
	34, 9, 13, 0, 32, 34, 62, 9, 
	13, 0, 10, 13, 0, 10, 13, 60, 
	0, 10, 13, 47, 60, 0, 10, 13, 
	60, 65, 97, 0, 10, 13, 60, 62, 
	84, 116, 84, 116, 80, 112, 58, 83, 
	115, 47, 47, 0, 32, 9, 13, 58, 
	62, 76, 82, 108, 114, 79, 111, 67, 
	99, 75, 107, 81, 113, 85, 117, 79, 
	111, 84, 116, 69, 101, 62, 62, 69, 
	79, 101, 111, 78, 110, 84, 116, 69, 
	101, 82, 114, 62, 68, 100, 69, 101, 
	9, 32, 61, 62, 9, 32, 61, 9, 
	32, 48, 57, 65, 90, 97, 122, 62, 
	48, 57, 65, 90, 97, 122, 77, 88, 
	109, 120, 62, 80, 112, 65, 97, 78, 
	110, 68, 100, 9, 32, 61, 62, 0, 
	9, 10, 13, 32, 61, 62, 0, 10, 
	13, 62, 0, 9, 10, 13, 32, 62, 
	84, 116, 84, 116, 80, 112, 58, 83, 
	115, 47, 47, 0, 32, 9, 13, 0, 
	32, 62, 9, 13, 58, 79, 111, 68, 
	100, 84, 116, 69, 101, 88, 120, 84, 
	116, 62, 62, 80, 84, 112, 116, 79, 
	111, 73, 105, 76, 108, 69, 101, 82, 
	114, 62, 83, 115, 62, 82, 114, 79, 
	111, 78, 110, 71, 103, 62, 78, 110, 
	62, 62, 896, 1023, 1025, 1032, 1038, 1055, 
	1057, 1151, 1086, 896, 1023, 1025, 1033, 1035, 
	1036, 1038, 1151, 896, 959, 994, 995, 1007, 
	1057, 1063, 1067, 1119, 1151, 896, 961, 962, 
	991, 992, 1006, 1008, 1012, 1013, 1023, 1025, 
	1032, 1038, 1055, 1069, 1071, 1072, 1081, 1089, 
	1114, 1121, 1146, 994, 995, 1007, 1057, 1063, 
	1067, 1119, 1151, 896, 961, 962, 991, 992, 
	1006, 1008, 1012, 1013, 1023, 1025, 1032, 1038, 
	1055, 1069, 1071, 1072, 1081, 1089, 1114, 1121, 
	1146, 994, 995, 1007, 1057, 1063, 1067, 1119, 
	1151, 896, 959, 960, 961, 962, 991, 992, 
	1006, 1008, 1012, 1013, 1023, 1025, 1032, 1038, 
	1055, 1069, 1071, 1072, 1081, 1089, 1114, 1121, 
	1146, 994, 995, 1007, 1057, 1063, 1067, 1119, 
	1151, 896, 959, 960, 961, 962, 991, 992, 
	1006, 1008, 1012, 1013, 1023, 1025, 1032, 1038, 
	1055, 1069, 1071, 1072, 1081, 1089, 1114, 1121, 
	1146, 925, 994, 995, 1007, 1057, 1063, 1067, 
	1119, 1151, 896, 959, 960, 961, 962, 991, 
	992, 1006, 1008, 1012, 1013, 1023, 1025, 1032, 
	1038, 1055, 1069, 1071, 1072, 1081, 1089, 1114, 
	1121, 1146, 941, 994, 995, 1007, 1057, 1063, 
	1067, 1119, 1151, 896, 959, 960, 961, 962, 
	991, 992, 1006, 1008, 1012, 1013, 1023, 1025, 
	1032, 1038, 1055, 1069, 1071, 1072, 1081, 1089, 
	1114, 1121, 1146, 896, 994, 995, 1007, 1057, 
	1063, 1067, 1119, 1151, 897, 959, 960, 961, 
	962, 991, 992, 1006, 1008, 1012, 1013, 1023, 
	1025, 1032, 1038, 1055, 1069, 1071, 1072, 1081, 
	1089, 1114, 1121, 1146, 994, 995, 1007, 1057, 
	1063, 1067, 1119, 1151, 896, 898, 899, 903, 
	904, 913, 914, 915, 916, 924, 925, 959, 
	960, 961, 962, 991, 992, 1006, 1008, 1012, 
	1013, 1023, 1025, 1032, 1038, 1055, 1069, 1071, 
	1072, 1081, 1089, 1114, 1121, 1146, 956, 957, 
	994, 995, 1007, 1057, 1063, 1067, 1119, 1151, 
	896, 959, 960, 961, 962, 991, 992, 1006, 
	1008, 1012, 1013, 1023, 1025, 1032, 1038, 1055, 
	1069, 1071, 1072, 1081, 1089, 1114, 1121, 1146, 
	905, 957, 994, 995, 1007, 1057, 1063, 1067, 
	1119, 1151, 896, 959, 960, 961, 962, 991, 
	992, 1006, 1008, 1012, 1013, 1023, 1025, 1032, 
	1038, 1055, 1069, 1071, 1072, 1081, 1089, 1114, 
	1121, 1146, 994, 995, 1007, 1057, 1063, 1067, 
	1119, 1151, 896, 959, 960, 961, 962, 991, 
	992, 1006, 1008, 1012, 1013, 1023, 1025, 1032, 
	1038, 1055, 1069, 1071, 1072, 1081, 1089, 1114, 
	1121, 1146, 925, 928, 931, 994, 995, 1007, 
	1057, 1063, 1067, 1119, 1151, 896, 959, 960, 
	961, 962, 991, 992, 1006, 1008, 1012, 1013, 
	1023, 1025, 1032, 1038, 1055, 1069, 1071, 1072, 
	1081, 1089, 1114, 1121, 1146, 994, 995, 1007, 
	1057, 1063, 1067, 1119, 1151, 896, 959, 960, 
	961, 962, 991, 992, 1006, 1008, 1012, 1013, 
	1023, 1025, 1032, 1038, 1055, 1069, 1071, 1072, 
	1081, 1089, 1114, 1121, 1146, 994, 995, 1007, 
	1057, 1063, 1067, 1119, 1151, 896, 959, 960, 
	961, 962, 991, 992, 1006, 1008, 1012, 1013, 
	1023, 1025, 1032, 1038, 1055, 1069, 1071, 1072, 
	1081, 1089, 1114, 1121, 1146, 925, 994, 995, 
	1007, 1057, 1063, 1067, 1119, 1151, 896, 959, 
	960, 961, 962, 991, 992, 1006, 1008, 1012, 
	1013, 1023, 1025, 1032, 1038, 1055, 1069, 1071, 
	1072, 1081, 1089, 1114, 1121, 1146, 941, 994, 
	995, 1007, 1057, 1063, 1067, 1119, 1151, 896, 
	959, 960, 961, 962, 991, 992, 1006, 1008, 
	1012, 1013, 1023, 1025, 1032, 1038, 1055, 1069, 
	1071, 1072, 1081, 1089, 1114, 1121, 1146, 896, 
	994, 995, 1007, 1057, 1063, 1067, 1119, 1151, 
	897, 959, 960, 961, 962, 991, 992, 1006, 
	1008, 1012, 1013, 1023, 1025, 1032, 1038, 1055, 
	1069, 1071, 1072, 1081, 1089, 1114, 1121, 1146, 
	994, 995, 1007, 1057, 1063, 1067, 1119, 1151, 
	896, 898, 899, 903, 904, 913, 914, 915, 
	916, 924, 925, 959, 960, 961, 962, 991, 
	992, 1006, 1008, 1012, 1013, 1023, 1025, 1032, 
	1038, 1055, 1069, 1071, 1072, 1081, 1089, 1114, 
	1121, 1146, 956, 957, 994, 995, 1007, 1057, 
	1063, 1067, 1119, 1151, 896, 959, 960, 961, 
	962, 991, 992, 1006, 1008, 1012, 1013, 1023, 
	1025, 1032, 1038, 1055, 1069, 1071, 1072, 1081, 
	1089, 1114, 1121, 1146, 905, 957, 994, 995, 
	1007, 1057, 1063, 1067, 1119, 1151, 896, 959, 
	960, 961, 962, 991, 992, 1006, 1008, 1012, 
	1013, 1023, 1025, 1032, 1038, 1055, 1069, 1071, 
	1072, 1081, 1089, 1114, 1121, 1146, 925, 928, 
	931, 994, 995, 1007, 1057, 1063, 1067, 1119, 
	1151, 896, 959, 960, 961, 962, 991, 992, 
	1006, 1008, 1012, 1013, 1023, 1025, 1032, 1038, 
	1055, 1069, 1071, 1072, 1081, 1089, 1114, 1121, 
	1146, 994, 995, 1007, 1057, 1063, 1067, 1119, 
	1151, 896, 959, 960, 961, 962, 991, 992, 
	1006, 1008, 1012, 1013, 1023, 1025, 1032, 1038, 
	1055, 1069, 1071, 1072, 1081, 1089, 1114, 1121, 
	1146, 994, 995, 1007, 1057, 1063, 1067, 1119, 
	1124, 1139, 1151, 896, 961, 962, 991, 992, 
	1006, 1008, 1012, 1013, 1023, 1025, 1032, 1038, 
	1055, 1069, 1071, 1072, 1081, 1089, 1114, 1121, 
	1146, 896, 959, 925, 896, 959, 896, 940, 
	942, 959, 896, 897, 959, 899, 903, 914, 
	915, 925, 959, 956, 957, 896, 959, 896, 
	904, 906, 956, 958, 959, 896, 924, 926, 
	927, 929, 930, 932, 959, 896, 959, 994, 
	995, 1007, 1151, 962, 991, 992, 1006, 1008, 
	1012, 1025, 1032, 1038, 1055, 1072, 1081, 1089, 
	1114, 1121, 1146, 47, 67, 99, 79, 111, 
	68, 100, 69, 101, 62, 47, 67, 99, 
	79, 111, 68, 100, 69, 101, 93, 47, 
	78, 110, 79, 111, 68, 100, 84, 116, 
	69, 101, 88, 120, 84, 116, 62, 47, 
	78, 110, 79, 111, 68, 100, 84, 116, 
	69, 101, 88, 120, 84, 116, 93, 67, 
	84, 99, 116, 79, 111, 76, 108, 71, 
	103, 82, 114, 79, 111, 85, 117, 80, 
	112, 62, 65, 66, 72, 82, 97, 98, 
	104, 114, 66, 98, 76, 108, 69, 101, 
	62, 79, 111, 68, 100, 89, 121, 62, 
	69, 101, 65, 97, 68, 100, 62, 62, 
	79, 111, 76, 108, 9, 32, 62, 71, 
	103, 9, 32, 48, 57, 65, 90, 97, 
	122, 9, 32, 61, 48, 57, 65, 90, 
	97, 122, 9, 32, 61, 9, 32, 34, 
	39, 48, 57, 65, 90, 97, 122, 0, 
	10, 13, 0, 10, 13, 34, 9, 32, 
	62, 0, 10, 13, 0, 10, 13, 39, 
	9, 32, 62, 48, 57, 65, 90, 97, 
	122, 82, 114, 79, 111, 85, 117, 80, 
	112, 9, 32, 62, 9, 32, 48, 57, 
	65, 90, 97, 122, 9, 32, 61, 48, 
	57, 65, 90, 97, 122, 9, 32, 61, 
	9, 32, 34, 39, 48, 57, 65, 90, 
	97, 122, 0, 10, 13, 0, 10, 13, 
	34, 9, 32, 62, 0, 10, 13, 0, 
	10, 13, 39, 9, 32, 62, 48, 57, 
	65, 90, 97, 122, 66, 68, 72, 82, 
	98, 100, 104, 114, 79, 111, 68, 100, 
	89, 121, 9, 32, 62, 9, 32, 48, 
	57, 65, 90, 97, 122, 9, 32, 61, 
	48, 57, 65, 90, 97, 122, 9, 32, 
	61, 9, 32, 34, 39, 48, 57, 65, 
	90, 97, 122, 0, 10, 13, 0, 10, 
	13, 34, 9, 32, 62, 0, 10, 13, 
	0, 10, 13, 39, 9, 32, 62, 48, 
	57, 65, 90, 97, 122, 9, 32, 62, 
	9, 32, 48, 57, 65, 90, 97, 122, 
	9, 32, 61, 48, 57, 65, 90, 97, 
	122, 9, 32, 61, 9, 32, 34, 39, 
	48, 57, 65, 90, 97, 122, 0, 10, 
	13, 0, 10, 13, 34, 9, 32, 62, 
	0, 10, 13, 0, 10, 13, 39, 9, 
	32, 62, 48, 57, 65, 90, 97, 122, 
	9, 32, 62, 69, 101, 9, 32, 48, 
	57, 65, 90, 97, 122, 9, 32, 61, 
	48, 57, 65, 90, 97, 122, 9, 32, 
	61, 9, 32, 34, 39, 48, 57, 65, 
	90, 97, 122, 0, 10, 13, 0, 10, 
	13, 34, 9, 32, 62, 0, 10, 13, 
	0, 10, 13, 39, 9, 32, 62, 48, 
	57, 65, 90, 97, 122, 65, 97, 68, 
	100, 9, 32, 62, 9, 32, 48, 57, 
	65, 90, 97, 122, 9, 32, 61, 48, 
	57, 65, 90, 97, 122, 9, 32, 61, 
	9, 32, 34, 39, 48, 57, 65, 90, 
	97, 122, 0, 10, 13, 0, 10, 13, 
	34, 9, 32, 62, 0, 10, 13, 0, 
	10, 13, 39, 9, 32, 62, 48, 57, 
	65, 90, 97, 122, 9, 32, 62, 9, 
	32, 48, 57, 65, 90, 97, 122, 9, 
	32, 61, 48, 57, 65, 90, 97, 122, 
	9, 32, 61, 9, 32, 34, 39, 48, 
	57, 65, 90, 97, 122, 0, 10, 13, 
	0, 10, 13, 34, 9, 32, 62, 0, 
	10, 13, 0, 10, 13, 39, 9, 32, 
	62, 48, 57, 65, 90, 97, 122, 67, 
	84, 99, 116, 79, 111, 76, 108, 71, 
	103, 82, 114, 79, 111, 85, 117, 80, 
	112, 93, 65, 66, 72, 82, 97, 98, 
	104, 114, 66, 98, 76, 108, 69, 101, 
	93, 79, 111, 68, 100, 89, 121, 93, 
	69, 101, 65, 97, 68, 100, 93, 93, 
	79, 111, 76, 108, 9, 32, 71, 93, 
	103, 9, 32, 48, 57, 65, 90, 97, 
	122, 9, 32, 61, 48, 57, 65, 90, 
	97, 122, 9, 32, 61, 9, 32, 34, 
	39, 48, 57, 65, 90, 97, 122, 0, 
	10, 13, 0, 10, 13, 34, 9, 32, 
	93, 0, 10, 13, 0, 10, 13, 39, 
	9, 32, 93, 48, 57, 65, 90, 97, 
	122, 82, 114, 79, 111, 85, 117, 80, 
	112, 9, 32, 93, 9, 32, 48, 57, 
	65, 90, 97, 122, 9, 32, 61, 48, 
	57, 65, 90, 97, 122, 9, 32, 61, 
	9, 32, 34, 39, 48, 57, 65, 90, 
	97, 122, 0, 10, 13, 0, 10, 13, 
	34, 9, 32, 93, 0, 10, 13, 0, 
	10, 13, 39, 9, 32, 93, 48, 57, 
	65, 90, 97, 122, 66, 68, 72, 82, 
	98, 100, 104, 114, 79, 111, 68, 100, 
	89, 121, 9, 32, 93, 9, 32, 48, 
	57, 65, 90, 97, 122, 9, 32, 61, 
	48, 57, 65, 90, 97, 122, 9, 32, 
	61, 9, 32, 34, 39, 48, 57, 65, 
	90, 97, 122, 0, 10, 13, 0, 10, 
	13, 34, 9, 32, 93, 0, 10, 13, 
	0, 10, 13, 39, 9, 32, 93, 48, 
	57, 65, 90, 97, 122, 9, 32, 93, 
	9, 32, 48, 57, 65, 90, 97, 122, 
	9, 32, 61, 48, 57, 65, 90, 97, 
	122, 9, 32, 61, 9, 32, 34, 39, 
	48, 57, 65, 90, 97, 122, 0, 10, 
	13, 0, 10, 13, 34, 9, 32, 93, 
	0, 10, 13, 0, 10, 13, 39, 9, 
	32, 93, 48, 57, 65, 90, 97, 122, 
	9, 32, 69, 93, 101, 9, 32, 48, 
	57, 65, 90, 97, 122, 9, 32, 61, 
	48, 57, 65, 90, 97, 122, 9, 32, 
	61, 9, 32, 34, 39, 48, 57, 65, 
	90, 97, 122, 0, 10, 13, 0, 10, 
	13, 34, 9, 32, 93, 0, 10, 13, 
	0, 10, 13, 39, 9, 32, 93, 48, 
	57, 65, 90, 97, 122, 65, 97, 68, 
	100, 9, 32, 93, 9, 32, 48, 57, 
	65, 90, 97, 122, 9, 32, 61, 48, 
	57, 65, 90, 97, 122, 9, 32, 61, 
	9, 32, 34, 39, 48, 57, 65, 90, 
	97, 122, 0, 10, 13, 0, 10, 13, 
	34, 9, 32, 93, 0, 10, 13, 0, 
	10, 13, 39, 9, 32, 93, 48, 57, 
	65, 90, 97, 122, 9, 32, 93, 9, 
	32, 48, 57, 65, 90, 97, 122, 9, 
	32, 61, 48, 57, 65, 90, 97, 122, 
	9, 32, 61, 9, 32, 34, 39, 48, 
	57, 65, 90, 97, 122, 0, 10, 13, 
	0, 10, 13, 34, 9, 32, 93, 0, 
	10, 13, 0, 10, 13, 39, 9, 32, 
	93, 48, 57, 65, 90, 97, 122, 0, 
	9, 10, 32, 42, 60, 72, 91, 96, 
	104, 0, 9, 10, 32, 0, 9, 10, 
	32, 60, 91, 0, 10, 9, 32, 42, 
	0, 10, 13, 0, 9, 10, 13, 32, 
	66, 67, 69, 72, 78, 81, 83, 84, 
	98, 99, 101, 104, 110, 113, 115, 116, 
	32, 9, 13, 0, 9, 10, 32, 0, 
	9, 10, 32, 32, 9, 13, 32, 9, 
	13, 0, 9, 10, 32, 32, 9, 13, 
	49, 54, 9, 32, 67, 69, 72, 78, 
	81, 83, 84, 99, 101, 104, 110, 113, 
	115, 116, 96, 0, 60, 91, 47, 66, 
	69, 73, 83, 85, 98, 101, 105, 115, 
	117, 47, 66, 73, 83, 85, 98, 105, 
	115, 117, 0, 9, 10, 13, 32, 34, 
	65, 67, 68, 70, 72, 73, 77, 80, 
	82, 84, 85, 87, 91, 97, 99, 100, 
	102, 104, 105, 109, 112, 114, 116, 117, 
	119, 123, 828, 1084, 1344, 1600, 1856, 2112, 
	-128, -63, -62, -33, -32, -17, -16, -12, 
	-11, 47, 48, 57, 58, 59, 61, 63, 
	66, 90, 92, 96, 98, 122, 124, 127, 
	-128, -65, -62, -33, -32, -17, -16, -12, 
	-128, -65, -128, -65, 0, 9, 10, 32, 
	0, 9, 10, 32, 0, 9, 10, 32, 
	42, 60, 72, 91, 96, 104, 0, 10, 
	0, 9, 10, 32, 60, 91, 0, 10, 
	13, 0, 9, 10, 13, 32, 9, 32, 
	9, 32, 9, 32, 34, -30, -29, -17, 
	32, 34, 35, 39, 44, 46, 60, 62, 
	63, 91, 93, -128, -63, -62, -33, -32, 
	-18, -16, -12, -11, 0, 9, 13, 58, 
	59, -30, -29, -17, 32, 34, 35, 39, 
	44, 46, 60, 62, 63, 91, 93, -128, 
	-63, -62, -33, -32, -18, -16, -12, -11, 
	0, 9, 13, 58, 59, -30, -29, -17, 
	32, 34, 35, 39, 44, 46, 63, -128, 
	-63, -62, -33, -32, -18, -16, -12, -11, 
	0, 9, 13, 58, 59, -30, -29, -17, 
	35, 46, 47, 58, 63, 95, -62, -33, 
	-32, -18, -16, -12, 45, 57, 65, 90, 
	97, 122, 35, 47, 63, 48, 57, 91, 
	123, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 125, 
	48, 57, 65, 90, 97, 122, 125, 48, 
	57, 65, 90, 97, 122, 76, 82, 91, 
	108, 114, 123, 48, 57, 65, 90, 97, 
	122, 73, 91, 105, 123, 48, 57, 65, 
	90, 97, 122, 65, 91, 97, 123, 48, 
	57, 66, 90, 98, 122, 83, 91, 115, 
	123, 48, 57, 65, 90, 97, 122, 32, 
	91, 123, 48, 57, 65, 90, 97, 122, 
	48, 57, 84, 91, 116, 123, 48, 57, 
	65, 90, 97, 122, 73, 91, 105, 123, 
	48, 57, 65, 90, 97, 122, 83, 91, 
	115, 123, 48, 57, 65, 90, 97, 122, 
	84, 91, 116, 123, 48, 57, 65, 90, 
	97, 122, 32, 91, 123, 48, 57, 65, 
	90, 97, 122, 48, 57, 79, 91, 111, 
	123, 48, 57, 65, 90, 97, 122, 77, 
	91, 109, 123, 48, 57, 65, 90, 97, 
	122, 77, 91, 109, 123, 48, 57, 65, 
	90, 97, 122, 69, 91, 101, 123, 48, 
	57, 65, 90, 97, 122, 78, 91, 110, 
	123, 48, 57, 65, 90, 97, 122, 84, 
	91, 116, 123, 48, 57, 65, 90, 97, 
	122, 32, 91, 123, 48, 57, 65, 90, 
	97, 122, 48, 57, 77, 91, 109, 123, 
	48, 57, 65, 90, 97, 122, 65, 91, 
	97, 123, 48, 57, 66, 90, 98, 122, 
	73, 91, 105, 123, 48, 57, 65, 90, 
	97, 122, 76, 91, 108, 123, 48, 57, 
	65, 90, 97, 122, 32, 91, 123, 48, 
	57, 65, 90, 97, 122, 47, 48, 57, 
	45, 61, 48, 57, 65, 90, 97, 122, 
	79, 91, 111, 123, 48, 57, 65, 90, 
	97, 122, 82, 91, 114, 123, 48, 57, 
	65, 90, 97, 122, 85, 91, 117, 123, 
	48, 57, 65, 90, 97, 122, 77, 91, 
	109, 123, 48, 57, 65, 90, 97, 122, 
	32, 91, 123, 48, 57, 65, 90, 97, 
	122, 48, 57, 84, 91, 116, 123, 48, 
	57, 65, 90, 97, 122, 84, 91, 116, 
	123, 48, 57, 65, 90, 97, 122, 80, 
	91, 112, 123, 48, 57, 65, 90, 97, 
	122, 58, 83, 91, 115, 123, 48, 57, 
	65, 90, 97, 122, -30, -29, -17, 35, 
	46, 47, 58, 63, 95, -62, -33, -32, 
	-18, -16, -12, 45, 57, 65, 90, 97, 
	122, -30, -29, -17, 32, 34, 35, 39, 
	44, 46, 60, 62, 63, 91, 93, -128, 
	-63, -62, -33, -32, -18, -16, -12, -11, 
	0, 9, 13, 58, 59, -30, -29, -17, 
	32, 34, 35, 39, 44, 46, 60, 62, 
	63, 91, 93, -128, -63, -62, -33, -32, 
	-18, -16, -12, -11, 0, 9, 13, 58, 
	59, -30, -29, -17, 32, 34, 35, 39, 
	44, 46, 63, -128, -63, -62, -33, -32, 
	-18, -16, -12, -11, 0, 9, 13, 58, 
	59, 35, 47, 63, 48, 57, 58, 91, 
	123, 48, 57, 65, 90, 97, 122, 77, 
	91, 109, 123, 48, 57, 65, 90, 97, 
	122, 80, 91, 112, 123, 48, 57, 65, 
	90, 97, 122, 76, 91, 108, 123, 48, 
	57, 65, 90, 97, 122, 73, 91, 105, 
	123, 48, 57, 65, 90, 97, 122, 67, 
	91, 99, 123, 48, 57, 65, 90, 97, 
	122, 65, 91, 97, 123, 48, 57, 66, 
	90, 98, 122, 84, 91, 116, 123, 48, 
	57, 65, 90, 97, 122, 73, 91, 105, 
	123, 48, 57, 65, 90, 97, 122, 79, 
	91, 111, 123, 48, 57, 65, 90, 97, 
	122, 78, 91, 110, 123, 48, 57, 65, 
	90, 97, 122, 32, 91, 123, 48, 57, 
	65, 90, 97, 122, 48, 57, 79, 91, 
	111, 123, 48, 57, 65, 90, 97, 122, 
	68, 91, 100, 123, 48, 57, 65, 90, 
	97, 122, 32, 91, 123, 48, 57, 65, 
	90, 97, 122, 48, 57, 73, 79, 91, 
	105, 111, 123, 48, 57, 65, 90, 97, 
	122, 88, 91, 120, 123, 48, 57, 65, 
	90, 97, 122, 73, 91, 105, 123, 48, 
	57, 65, 90, 97, 122, 86, 91, 118, 
	123, 48, 57, 65, 90, 97, 122, 32, 
	91, 123, 48, 57, 65, 90, 97, 122, 
	48, 57, 79, 83, 91, 111, 115, 123, 
	48, 57, 65, 90, 97, 122, 76, 91, 
	108, 123, 48, 57, 65, 90, 97, 122, 
	32, 91, 123, 48, 57, 65, 90, 97, 
	122, 48, 57, 84, 91, 116, 123, 48, 
	57, 65, 90, 97, 122, 32, 91, 123, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	69, 91, 101, 123, 48, 57, 65, 90, 
	97, 122, 67, 91, 99, 123, 48, 57, 
	65, 90, 97, 122, 79, 91, 111, 123, 
	48, 57, 65, 90, 97, 122, 82, 91, 
	114, 123, 48, 57, 65, 90, 97, 122, 
	68, 91, 100, 123, 48, 57, 65, 90, 
	97, 122, 32, 91, 123, 48, 57, 65, 
	90, 97, 122, 48, 57, 79, 91, 111, 
	123, 48, 57, 65, 90, 97, 122, 80, 
	91, 112, 123, 48, 57, 65, 90, 97, 
	122, 73, 91, 105, 123, 48, 57, 65, 
	90, 97, 122, 67, 91, 99, 123, 48, 
	57, 65, 90, 97, 122, 32, 91, 123, 
	48, 57, 65, 90, 97, 122, 47, 48, 
	57, 48, 57, 83, 91, 115, 123, 48, 
	57, 65, 90, 97, 122, 69, 91, 101, 
	123, 48, 57, 65, 90, 97, 122, 82, 
	91, 114, 123, 48, 57, 65, 90, 97, 
	122, 32, 91, 123, 48, 57, 65, 90, 
	97, 122, 48, 57, 73, 91, 105, 123, 
	48, 57, 65, 90, 97, 122, 75, 91, 
	107, 123, 48, 57, 65, 90, 97, 122, 
	73, 91, 105, 123, 48, 57, 65, 90, 
	97, 122, 32, 91, 123, 48, 57, 65, 
	90, 97, 122, 48, 57, 47, 66, 67, 
	69, 72, 73, 78, 81, 83, 84, 85, 
	91, 98, 99, 101, 104, 105, 110, 113, 
	115, 116, 117, 0, 9, 10, 32, 0, 
	9, 10, 32, 0, 9, 10, 32, 123, 
	47, 65, 66, 67, 69, 72, 73, 78, 
	81, 83, 84, 85, 97, 98, 99, 101, 
	104, 105, 110, 113, 115, 116, 117, 47, 
	65, 66, 67, 69, 72, 73, 78, 81, 
	83, 84, 85, 97, 98, 99, 101, 104, 
	105, 110, 113, 115, 116, 117, 1088, 994, 
	995, 1007, 1070, 1119, 1151, 962, 991, 992, 
	1006, 1008, 1012, 1025, 1032, 1038, 1055, 1072, 
	1081, 1089, 1114, 1121, 1146, 994, 995, 1007, 
	1057, 1063, 1067, 1119, 1151, 896, 961, 962, 
	991, 992, 1006, 1008, 1012, 1013, 1023, 1025, 
	1032, 1038, 1055, 1069, 1071, 1072, 1081, 1089, 
	1114, 1121, 1146, 994, 995, 1007, 1057, 1063, 
	1067, 1119, 1151, 896, 961, 962, 991, 992, 
	1006, 1008, 1012, 1013, 1023, 1025, 1032, 1038, 
	1055, 1069, 1071, 1072, 1081, 1089, 1114, 1121, 
	1146, 0, 10, 60, 91, 60, 91, 47, 
	47, 0, 10, 60, 91, 60, 91, 47, 
	47, 60, 91, 47, 67, 84, 99, 116, 
	47, 67, 84, 99, 116, 0
};

static const char _dtext_single_lengths[] = {
	0, 4, 6, 4, 2, 1, 4, 2, 
	2, 2, 2, 1, 4, 2, 1, 2, 
	2, 2, 2, 1, 5, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	4, 2, 2, 2, 2, 1, 2, 2, 
	4, 3, 2, 1, 4, 4, 2, 2, 
	2, 2, 2, 4, 7, 4, 6, 2, 
	2, 2, 2, 2, 2, 1, 4, 2, 
	2, 2, 2, 2, 2, 3, 1, 4, 
	1, 2, 5, 5, 4, 2, 2, 2, 
	2, 1, 2, 2, 4, 3, 2, 1, 
	2, 2, 2, 2, 2, 4, 7, 4, 
	6, 2, 2, 2, 2, 2, 2, 1, 
	2, 2, 2, 2, 1, 2, 2, 2, 
	2, 2, 2, 3, 1, 4, 1, 1, 
	4, 2, 2, 3, 3, 3, 4, 4, 
	4, 10, 1, 2, 1, 3, 2, 2, 
	2, 2, 1, 1, 2, 1, 3, 2, 
	2, 2, 2, 1, 8, 1, 1, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	4, 4, 6, 6, 2, 1, 4, 2, 
	2, 2, 2, 2, 2, 3, 4, 1, 
	2, 2, 2, 2, 1, 6, 2, 1, 
	2, 2, 2, 2, 2, 2, 3, 1, 
	2, 2, 2, 2, 1, 1, 4, 2, 
	2, 2, 2, 2, 1, 6, 1, 1, 
	1, 1, 4, 2, 2, 2, 2, 2, 
	1, 6, 1, 1, 1, 3, 5, 11, 
	12, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 2, 2, 2, 2, 2, 
	1, 2, 2, 2, 2, 1, 2, 2, 
	2, 2, 2, 2, 3, 1, 2, 2, 
	2, 4, 3, 2, 1, 2, 2, 2, 
	2, 2, 2, 1, 0, 2, 5, 5, 
	11, 10, 2, 2, 2, 2, 2, 1, 
	2, 2, 2, 2, 2, 2, 3, 1, 
	2, 2, 2, 4, 3, 2, 1, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	4, 2, 2, 3, 3, 3, 4, 4, 
	4, 1, 1, 5, 0, 0, 1, 0, 
	1, 0, 2, 0, 0, 0, 14, 0, 
	0, 1, 0, 1, 0, 2, 0, 0, 
	0, 14, 10, 0, 0, 1, 0, 1, 
	0, 2, 0, 0, 0, 2, 2, 2, 
	3, 1, 1, 2, 0, 3, 0, 0, 
	5, 0, 0, 1, 1, 9, 1, 0, 
	2, 2, 3, 0, 0, 1, 4, 3, 
	2, 2, 2, 3, 1, 1, 2, 1, 
	1, 8, 5, 5, 3, 5, 6, 4, 
	1, 4, 4, 4, 1, 6, 3, 5, 
	5, 5, 4, 6, 4, 1, 6, 6, 
	6, 5, 5, 5, 5, 4, 1, 4, 
	4, 0, 5, 3, 5, 3, 6, 5, 
	5, 5, 5, 4, 1, 3, 5, 5, 
	0, 1, 5, 1, 1, 1, 10, 6, 
	12, 10, 6, 4, 6, 6, 6, 5, 
	1, 1, 7, 14, 8, 14, 12, 8, 
	7, 1, 4, 8, 7, 7, 7, 7, 
	7, 9, 8, 7, 8, 7, 7, 9, 
	7, 7, 7, 7, 4, 6, 7, 6, 
	6, 3, 1, 4, 1, 1, 1, 0, 
	1, 0, 1, 0, 1, 0, 2, 1, 
	0, 1, 1, 2, 0, 3, 0, 0, 
	5, 0, 0, 1, 1, 9, 1, 0, 
	2, 2, 3, 0, 0, 0, 1, 0, 
	1, 0, 2, 0, 0, 0, 14, 0, 
	0, 1, 0, 1, 0, 2, 0, 0, 
	0, 14, 10, 0, 0, 1, 0, 1, 
	0, 2, 0, 0, 0, 0, 1, 0, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	0, 1, 0, 1, 2, 0, 1, 0, 
	1, 0, 1, 0, 1, 0, 2, 0, 
	1, 0, 1, 0, 16, 1, 1, 3, 
	1, 3, 1, 4, 2, 2, 2, 2, 
	1, 2, 2, 4, 3, 2, 1, 4, 
	4, 2, 2, 2, 2, 2, 4, 7, 
	4, 6, 2, 2, 2, 3, 1, 1, 
	2, 3, 4, 3, 4, 1, 1, 2, 
	2, 2, 2, 2, 2, 1, 4, 2, 
	2, 2, 2, 1, 3, 2, 2, 2, 
	2, 2, 3, 1, 2, 1, 3, 2, 
	4, 3, 8, 4, 3, 3, 5, 6, 
	3, 1, 2, 2, 2, 1, 6, 2, 
	2, 2, 3, 1, 1, 2, 1, 4, 
	4, 3, 2, 2, 2, 3, 1, 1, 
	2, 1, 2, 2, 2, 3, 1, 1, 
	2, 1, 6, 4, 3, 1, 2, 2, 
	2, 1, 5, 6, 6, 6, 5, 2, 
	2, 2, 3, 1, 1, 2, 1, 16, 
	3, 4, 1, 5, 2, 2, 2, 2, 
	1, 1, 2, 4, 2, 2, 2, 1, 
	1, 4, 3, 4, 3, 4, 5, 6, 
	5, 2, 2, 2, 3, 1, 1, 2, 
	1, 5, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 4, 2, 2, 2, 
	2, 1, 2, 2, 4, 3, 2, 1, 
	4, 1, 2, 2, 2, 2, 4, 7, 
	4, 6, 2, 2, 2, 3, 1, 1, 
	2, 3, 1, 2, 2, 2, 2, 2, 
	2, 1, 5, 2, 2, 2, 2, 2, 
	3, 1, 2, 2, 2, 2, 1, 2, 
	1, 1, 0, 1, 0, 8, 8, 8, 
	8, 9, 9, 9, 8, 10, 10, 8, 
	11, 8, 8, 9, 9, 9, 8, 10, 
	10, 11, 8, 10, 0, 1, 0, 1, 
	0, 2, 0, 0, 0, 4, 1, 2, 
	2, 2, 2, 1, 1, 2, 2, 2, 
	2, 1, 1, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 2, 2, 2, 2, 
	2, 2, 2, 1, 4, 2, 2, 2, 
	2, 2, 2, 2, 1, 8, 2, 2, 
	2, 1, 2, 2, 2, 1, 2, 2, 
	2, 1, 1, 2, 2, 5, 2, 3, 
	3, 4, 3, 4, 3, 3, 4, 3, 
	2, 2, 2, 2, 3, 2, 3, 3, 
	4, 3, 4, 3, 3, 4, 3, 8, 
	2, 2, 2, 3, 2, 3, 3, 4, 
	3, 4, 3, 3, 4, 3, 3, 2, 
	3, 3, 4, 3, 4, 3, 3, 4, 
	3, 5, 2, 3, 3, 4, 3, 4, 
	3, 3, 4, 3, 2, 2, 3, 2, 
	3, 3, 4, 3, 4, 3, 3, 4, 
	3, 3, 2, 3, 3, 4, 3, 4, 
	3, 3, 4, 3, 4, 2, 2, 2, 
	2, 2, 2, 2, 1, 8, 2, 2, 
	2, 1, 2, 2, 2, 1, 2, 2, 
	2, 1, 1, 2, 2, 5, 2, 3, 
	3, 4, 3, 4, 3, 3, 4, 3, 
	2, 2, 2, 2, 3, 2, 3, 3, 
	4, 3, 4, 3, 3, 4, 3, 8, 
	2, 2, 2, 3, 2, 3, 3, 4, 
	3, 4, 3, 3, 4, 3, 3, 2, 
	3, 3, 4, 3, 4, 3, 3, 4, 
	3, 5, 2, 3, 3, 4, 3, 4, 
	3, 3, 4, 3, 2, 2, 3, 2, 
	3, 3, 4, 3, 4, 3, 3, 4, 
	3, 3, 2, 3, 3, 4, 3, 4, 
	3, 3, 4, 3, 10, 4, 6, 2, 
	3, 3, 5, 16, 1, 4, 4, 1, 
	1, 4, 1, 0, 2, 14, 1, 3, 
	11, 9, 38, 0, 0, 0, 0, 4, 
	4, 10, 2, 6, 3, 5, 2, 2, 
	2, 1, 14, 14, 10, 9, 3, 2, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 6, 4, 
	4, 4, 3, 0, 4, 4, 4, 4, 
	3, 0, 4, 4, 4, 4, 4, 4, 
	3, 0, 4, 4, 4, 4, 3, 1, 
	2, 4, 4, 4, 4, 3, 0, 4, 
	4, 4, 5, 9, 14, 14, 10, 3, 
	3, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 3, 0, 4, 4, 3, 
	0, 6, 4, 4, 4, 3, 0, 6, 
	4, 3, 0, 4, 3, 0, 4, 4, 
	4, 4, 4, 3, 0, 4, 4, 4, 
	4, 3, 1, 0, 4, 4, 4, 3, 
	0, 4, 4, 4, 3, 0, 22, 4, 
	4, 4, 1, 23, 24, 6, 8, 8, 
	4, 2, 1, 1, 4, 2, 1, 1, 
	2, 5, 5
};

static const char _dtext_range_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 3, 3, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 3, 3, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 3, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	3, 0, 0, 0, 0, 0, 0, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 3, 3, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 3, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 3, 3, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	3, 0, 0, 0, 0, 0, 0, 3, 
	0, 0, 0, 0, 1, 1, 1, 2, 
	1, 3, 1, 3, 4, 1, 7, 1, 
	1, 1, 2, 1, 3, 1, 3, 4, 
	1, 7, 7, 1, 1, 1, 2, 1, 
	3, 1, 3, 4, 1, 0, 0, 0, 
	0, 0, 0, 6, 1, 6, 1, 1, 
	6, 1, 1, 1, 1, 6, 1, 6, 
	1, 1, 1, 1, 1, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 1, 1, 1, 1, 2, 3, 0, 
	0, 1, 1, 1, 0, 3, 3, 1, 
	1, 1, 2, 4, 1, 0, 4, 4, 
	4, 1, 1, 1, 1, 1, 0, 0, 
	0, 1, 3, 0, 3, 3, 1, 1, 
	1, 1, 1, 1, 0, 3, 0, 0, 
	1, 0, 0, 0, 0, 0, 2, 1, 
	1, 1, 1, 0, 1, 1, 1, 1, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 4, 
	1, 1, 1, 1, 0, 1, 1, 1, 
	1, 3, 0, 0, 0, 0, 0, 1, 
	0, 1, 0, 1, 0, 1, 3, 0, 
	1, 0, 0, 6, 1, 6, 1, 1, 
	6, 1, 1, 1, 1, 6, 1, 6, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	1, 3, 1, 3, 4, 1, 7, 1, 
	1, 1, 2, 1, 3, 1, 3, 4, 
	1, 7, 7, 1, 1, 1, 2, 1, 
	3, 1, 3, 4, 1, 1, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 1, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 1, 0, 1, 
	0, 1, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 3, 3, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 1, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 3, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 4, 4, 1, 11, 11, 12, 
	12, 12, 12, 12, 17, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 17, 12, 
	12, 12, 12, 11, 1, 1, 2, 1, 
	3, 1, 3, 4, 1, 8, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 3, 3, 
	0, 3, 0, 0, 0, 0, 0, 3, 
	0, 0, 0, 0, 0, 3, 3, 0, 
	3, 0, 0, 0, 0, 0, 3, 0, 
	0, 0, 0, 0, 3, 3, 0, 3, 
	0, 0, 0, 0, 0, 3, 0, 3, 
	3, 0, 3, 0, 0, 0, 0, 0, 
	3, 0, 3, 3, 0, 3, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 3, 
	3, 0, 3, 0, 0, 0, 0, 0, 
	3, 0, 3, 3, 0, 3, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 3, 3, 
	0, 3, 0, 0, 0, 0, 0, 3, 
	0, 0, 0, 0, 0, 3, 3, 0, 
	3, 0, 0, 0, 0, 0, 3, 0, 
	0, 0, 0, 0, 3, 3, 0, 3, 
	0, 0, 0, 0, 0, 3, 0, 3, 
	3, 0, 3, 0, 0, 0, 0, 0, 
	3, 0, 3, 3, 0, 3, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 3, 
	3, 0, 3, 0, 0, 0, 0, 0, 
	3, 0, 3, 3, 0, 3, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 1, 
	1, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 12, 1, 3, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 7, 7, 7, 6, 1, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 1, 3, 3, 3, 3, 
	3, 1, 3, 3, 3, 3, 3, 3, 
	3, 1, 3, 3, 3, 3, 3, 1, 
	3, 3, 3, 3, 3, 3, 1, 3, 
	3, 3, 3, 6, 7, 7, 7, 1, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 1, 3, 3, 3, 
	1, 3, 3, 3, 3, 3, 1, 3, 
	3, 3, 1, 3, 3, 1, 3, 3, 
	3, 3, 3, 3, 1, 3, 3, 3, 
	3, 3, 1, 1, 3, 3, 3, 3, 
	1, 3, 3, 3, 3, 1, 0, 0, 
	0, 0, 0, 0, 0, 8, 11, 11, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
};

static const short _dtext_index_offsets[] = {
	0, 0, 5, 12, 17, 20, 22, 27, 
	30, 33, 36, 39, 41, 46, 49, 51, 
	54, 57, 60, 63, 65, 71, 75, 78, 
	81, 84, 87, 90, 93, 96, 99, 102, 
	104, 109, 112, 115, 118, 121, 123, 126, 
	129, 134, 138, 144, 149, 154, 159, 162, 
	165, 168, 171, 174, 179, 187, 192, 199, 
	202, 205, 208, 211, 214, 217, 219, 224, 
	227, 230, 233, 236, 239, 242, 246, 248, 
	253, 255, 258, 267, 276, 281, 284, 287, 
	290, 293, 295, 298, 301, 306, 310, 316, 
	321, 324, 327, 330, 333, 336, 341, 349, 
	354, 361, 364, 367, 370, 373, 376, 379, 
	381, 384, 387, 390, 393, 395, 398, 401, 
	404, 407, 410, 413, 417, 419, 424, 426, 
	428, 436, 439, 442, 446, 450, 454, 459, 
	467, 472, 483, 485, 488, 490, 494, 497, 
	500, 503, 506, 508, 510, 513, 515, 519, 
	522, 525, 528, 531, 533, 542, 544, 546, 
	548, 550, 552, 554, 556, 558, 560, 562, 
	564, 569, 574, 581, 588, 591, 593, 598, 
	601, 604, 607, 610, 613, 616, 620, 625, 
	627, 630, 633, 636, 639, 641, 648, 651, 
	653, 656, 659, 662, 665, 668, 671, 675, 
	677, 680, 683, 686, 689, 691, 693, 698, 
	701, 704, 707, 710, 713, 715, 722, 724, 
	726, 728, 730, 735, 738, 741, 744, 747, 
	750, 752, 759, 761, 763, 765, 769, 775, 
	787, 800, 803, 806, 809, 812, 815, 818, 
	821, 824, 827, 829, 832, 835, 838, 841, 
	844, 846, 849, 852, 855, 858, 860, 863, 
	866, 869, 872, 875, 878, 882, 884, 887, 
	890, 893, 898, 902, 908, 913, 916, 919, 
	922, 925, 928, 931, 933, 935, 938, 947, 
	956, 968, 979, 982, 985, 988, 991, 994, 
	996, 999, 1002, 1005, 1008, 1011, 1014, 1018, 
	1020, 1023, 1026, 1029, 1034, 1038, 1044, 1049, 
	1052, 1055, 1058, 1061, 1064, 1067, 1069, 1071, 
	1073, 1081, 1084, 1087, 1091, 1095, 1099, 1104, 
	1112, 1117, 1119, 1121, 1127, 1129, 1131, 1134, 
	1137, 1140, 1144, 1148, 1152, 1157, 1159, 1181, 
	1183, 1185, 1188, 1191, 1194, 1198, 1202, 1206, 
	1211, 1213, 1235, 1253, 1255, 1257, 1260, 1263, 
	1266, 1270, 1274, 1278, 1283, 1285, 1288, 1291, 
	1294, 1298, 1300, 1302, 1311, 1313, 1323, 1325, 
	1327, 1339, 1341, 1343, 1346, 1349, 1365, 1368, 
	1375, 1379, 1383, 1388, 1390, 1392, 1394, 1399, 
	1404, 1407, 1410, 1413, 1417, 1419, 1421, 1425, 
	1427, 1429, 1439, 1446, 1453, 1458, 1466, 1476, 
	1481, 1483, 1489, 1495, 1501, 1503, 1513, 1520, 
	1527, 1534, 1541, 1548, 1559, 1565, 1567, 1578, 
	1589, 1600, 1607, 1614, 1621, 1628, 1634, 1636, 
	1641, 1646, 1648, 1657, 1661, 1670, 1677, 1685, 
	1692, 1699, 1706, 1713, 1719, 1721, 1728, 1734, 
	1740, 1742, 1744, 1750, 1752, 1754, 1756, 1769, 
	1777, 1791, 1803, 1811, 1816, 1824, 1832, 1840, 
	1847, 1849, 1851, 1860, 1876, 1886, 1902, 1916, 
	1926, 1935, 1937, 1942, 1952, 1961, 1970, 1979, 
	1988, 1997, 2008, 2018, 2027, 2037, 2046, 2055, 
	2069, 2078, 2087, 2096, 2105, 2110, 2118, 2127, 
	2135, 2143, 2150, 2152, 2157, 2159, 2161, 2163, 
	2165, 2167, 2169, 2171, 2173, 2175, 2177, 2183, 
	2185, 2187, 2189, 2191, 2200, 2202, 2212, 2214, 
	2216, 2228, 2230, 2232, 2235, 2238, 2254, 2257, 
	2264, 2268, 2272, 2277, 2279, 2281, 2283, 2286, 
	2289, 2292, 2296, 2300, 2304, 2309, 2311, 2333, 
	2335, 2337, 2340, 2343, 2346, 2350, 2354, 2358, 
	2363, 2365, 2387, 2405, 2407, 2409, 2412, 2415, 
	2418, 2422, 2426, 2430, 2435, 2437, 2439, 2441, 
	2443, 2446, 2449, 2452, 2455, 2458, 2461, 2463, 
	2465, 2467, 2469, 2471, 2474, 2477, 2479, 2481, 
	2483, 2485, 2487, 2489, 2491, 2493, 2495, 2498, 
	2500, 2502, 2504, 2506, 2508, 2525, 2527, 2529, 
	2533, 2535, 2539, 2541, 2546, 2549, 2552, 2555, 
	2558, 2560, 2563, 2566, 2571, 2575, 2581, 2586, 
	2591, 2596, 2599, 2602, 2605, 2608, 2611, 2616, 
	2624, 2629, 2636, 2639, 2642, 2645, 2649, 2651, 
	2653, 2657, 2662, 2668, 2672, 2677, 2679, 2681, 
	2684, 2687, 2690, 2693, 2696, 2699, 2701, 2706, 
	2709, 2712, 2715, 2718, 2720, 2724, 2727, 2730, 
	2733, 2736, 2739, 2743, 2745, 2748, 2750, 2754, 
	2757, 2762, 2766, 2775, 2780, 2785, 2789, 2795, 
	2802, 2806, 2808, 2811, 2814, 2817, 2819, 2826, 
	2829, 2832, 2835, 2839, 2841, 2843, 2847, 2849, 
	2855, 2860, 2865, 2868, 2871, 2874, 2878, 2880, 
	2882, 2886, 2888, 2891, 2894, 2897, 2901, 2903, 
	2905, 2909, 2911, 2918, 2924, 2928, 2930, 2933, 
	2936, 2939, 2941, 2948, 2956, 2964, 2972, 2979, 
	2982, 2985, 2988, 2992, 2994, 2996, 3000, 3002, 
	3019, 3023, 3028, 3030, 3036, 3039, 3042, 3045, 
	3048, 3050, 3052, 3055, 3060, 3063, 3066, 3069, 
	3071, 3073, 3078, 3083, 3089, 3093, 3098, 3104, 
	3111, 3117, 3120, 3123, 3126, 3130, 3132, 3134, 
	3138, 3140, 3146, 3149, 3152, 3155, 3158, 3161, 
	3164, 3167, 3170, 3172, 3174, 3179, 3182, 3185, 
	3188, 3191, 3193, 3196, 3199, 3204, 3208, 3214, 
	3219, 3224, 3226, 3229, 3232, 3235, 3238, 3243, 
	3251, 3256, 3263, 3266, 3269, 3272, 3276, 3278, 
	3280, 3284, 3289, 3291, 3294, 3297, 3300, 3303, 
	3306, 3309, 3311, 3317, 3320, 3323, 3326, 3329, 
	3332, 3336, 3338, 3341, 3344, 3347, 3350, 3352, 
	3355, 3357, 3359, 3364, 3370, 3372, 3392, 3412, 
	3433, 3454, 3476, 3498, 3520, 3546, 3569, 3592, 
	3613, 3637, 3658, 3679, 3701, 3723, 3745, 3771, 
	3794, 3817, 3841, 3862, 3884, 3886, 3889, 3892, 
	3895, 3899, 3903, 3907, 3912, 3914, 3927, 3929, 
	3932, 3935, 3938, 3941, 3943, 3945, 3948, 3951, 
	3954, 3957, 3959, 3961, 3964, 3967, 3970, 3973, 
	3976, 3979, 3982, 3984, 3986, 3989, 3992, 3995, 
	3998, 4001, 4004, 4007, 4009, 4014, 4017, 4020, 
	4023, 4026, 4029, 4032, 4035, 4037, 4046, 4049, 
	4052, 4055, 4057, 4060, 4063, 4066, 4068, 4071, 
	4074, 4077, 4079, 4081, 4084, 4087, 4093, 4099, 
	4106, 4110, 4118, 4122, 4127, 4131, 4135, 4140, 
	4147, 4150, 4153, 4156, 4159, 4163, 4169, 4176, 
	4180, 4188, 4192, 4197, 4201, 4205, 4210, 4217, 
	4226, 4229, 4232, 4235, 4239, 4245, 4252, 4256, 
	4264, 4268, 4273, 4277, 4281, 4286, 4293, 4297, 
	4303, 4310, 4314, 4322, 4326, 4331, 4335, 4339, 
	4344, 4351, 4357, 4363, 4370, 4374, 4382, 4386, 
	4391, 4395, 4399, 4404, 4411, 4414, 4417, 4421, 
	4427, 4434, 4438, 4446, 4450, 4455, 4459, 4463, 
	4468, 4475, 4479, 4485, 4492, 4496, 4504, 4508, 
	4513, 4517, 4521, 4526, 4533, 4538, 4541, 4544, 
	4547, 4550, 4553, 4556, 4559, 4561, 4570, 4573, 
	4576, 4579, 4581, 4584, 4587, 4590, 4592, 4595, 
	4598, 4601, 4603, 4605, 4608, 4611, 4617, 4623, 
	4630, 4634, 4642, 4646, 4651, 4655, 4659, 4664, 
	4671, 4674, 4677, 4680, 4683, 4687, 4693, 4700, 
	4704, 4712, 4716, 4721, 4725, 4729, 4734, 4741, 
	4750, 4753, 4756, 4759, 4763, 4769, 4776, 4780, 
	4788, 4792, 4797, 4801, 4805, 4810, 4817, 4821, 
	4827, 4834, 4838, 4846, 4850, 4855, 4859, 4863, 
	4868, 4875, 4881, 4887, 4894, 4898, 4906, 4910, 
	4915, 4919, 4923, 4928, 4935, 4938, 4941, 4945, 
	4951, 4958, 4962, 4970, 4974, 4979, 4983, 4987, 
	4992, 4999, 5003, 5009, 5016, 5020, 5028, 5032, 
	5037, 5041, 5045, 5050, 5057, 5068, 5073, 5080, 
	5083, 5087, 5091, 5097, 5114, 5117, 5122, 5127, 
	5130, 5133, 5138, 5141, 5143, 5146, 5161, 5163, 
	5167, 5179, 5189, 5240, 5242, 5246, 5248, 5250, 
	5255, 5260, 5271, 5274, 5281, 5285, 5291, 5294, 
	5297, 5300, 5302, 5324, 5346, 5364, 5380, 5385, 
	5391, 5395, 5399, 5403, 5407, 5411, 5415, 5419, 
	5423, 5427, 5431, 5435, 5439, 5444, 5449, 5459, 
	5467, 5475, 5483, 5490, 5492, 5500, 5508, 5516, 
	5524, 5531, 5533, 5541, 5549, 5557, 5565, 5573, 
	5581, 5588, 5590, 5598, 5606, 5614, 5622, 5629, 
	5632, 5638, 5646, 5654, 5662, 5670, 5677, 5679, 
	5687, 5695, 5703, 5712, 5728, 5750, 5772, 5790, 
	5795, 5802, 5810, 5818, 5826, 5834, 5842, 5850, 
	5858, 5866, 5874, 5882, 5889, 5891, 5899, 5907, 
	5914, 5916, 5926, 5934, 5942, 5950, 5957, 5959, 
	5969, 5977, 5984, 5986, 5994, 6001, 6003, 6011, 
	6019, 6027, 6035, 6043, 6050, 6052, 6060, 6068, 
	6076, 6084, 6091, 6094, 6096, 6104, 6112, 6120, 
	6127, 6129, 6137, 6145, 6153, 6160, 6162, 6185, 
	6190, 6195, 6200, 6202, 6226, 6251, 6266, 6286, 
	6306, 6311, 6314, 6316, 6318, 6323, 6326, 6328, 
	6330, 6333, 6339
};

static const short _dtext_indicies[] = {
	1, 2, 1, 2, 0, 1, 4, 1, 
	4, 5, 6, 3, 7, 8, 7, 8, 
	3, 9, 9, 3, 10, 3, 11, 10, 
	11, 10, 3, 12, 12, 3, 13, 13, 
	3, 14, 14, 3, 15, 15, 3, 16, 
	3, 17, 18, 17, 18, 3, 19, 19, 
	3, 10, 3, 20, 20, 3, 21, 21, 
	3, 22, 22, 3, 23, 23, 3, 16, 
	3, 3, 25, 3, 3, 25, 24, 26, 
	26, 27, 3, 28, 28, 3, 29, 29, 
	3, 30, 30, 3, 31, 31, 3, 32, 
	32, 3, 33, 33, 3, 34, 34, 3, 
	35, 35, 3, 36, 36, 3, 37, 3, 
	38, 39, 38, 39, 3, 40, 40, 3, 
	41, 41, 3, 42, 42, 3, 43, 43, 
	3, 44, 3, 45, 45, 3, 46, 46, 
	3, 47, 47, 48, 49, 3, 47, 47, 
	48, 3, 48, 48, 50, 50, 50, 3, 
	52, 51, 51, 51, 3, 54, 55, 54, 
	55, 53, 57, 58, 57, 58, 56, 59, 
	59, 3, 60, 60, 3, 61, 61, 3, 
	62, 62, 3, 63, 63, 3, 64, 64, 
	65, 66, 3, 3, 68, 3, 3, 68, 
	69, 70, 67, 3, 3, 3, 72, 71, 
	3, 69, 3, 3, 69, 70, 67, 73, 
	73, 3, 74, 74, 3, 75, 75, 3, 
	76, 76, 3, 77, 77, 3, 78, 78, 
	3, 79, 3, 81, 82, 81, 82, 80, 
	83, 83, 3, 84, 84, 3, 85, 85, 
	3, 86, 86, 3, 87, 87, 3, 88, 
	88, 3, 89, 90, 90, 3, 89, 3, 
	12, 91, 12, 91, 3, 92, 3, 93, 
	94, 3, 95, 95, 95, 95, 95, 95, 
	95, 95, 3, 96, 96, 96, 97, 96, 
	96, 96, 96, 3, 98, 99, 98, 99, 
	3, 100, 100, 3, 101, 101, 3, 102, 
	102, 3, 103, 103, 3, 44, 3, 104, 
	104, 3, 105, 105, 3, 106, 106, 107, 
	49, 3, 106, 106, 107, 3, 107, 107, 
	108, 108, 108, 3, 52, 109, 109, 109, 
	3, 110, 110, 3, 111, 111, 3, 112, 
	112, 3, 113, 113, 3, 114, 114, 3, 
	115, 115, 116, 66, 3, 3, 118, 3, 
	3, 118, 119, 70, 117, 3, 3, 3, 
	72, 120, 3, 119, 3, 3, 119, 70, 
	117, 121, 121, 3, 122, 122, 3, 123, 
	123, 3, 124, 124, 3, 125, 125, 3, 
	126, 126, 3, 79, 3, 127, 127, 3, 
	128, 128, 3, 129, 129, 3, 130, 130, 
	3, 37, 3, 131, 131, 3, 132, 132, 
	3, 133, 133, 3, 134, 134, 3, 135, 
	135, 3, 136, 136, 3, 137, 89, 137, 
	3, 89, 3, 20, 138, 20, 138, 3, 
	92, 3, 139, 3, 140, 141, 140, 141, 
	142, 142, 142, 3, 144, 144, 143, 146, 
	146, 145, 146, 146, 147, 145, 146, 146, 
	148, 145, 146, 146, 149, 145, 150, 149, 
	150, 149, 145, 151, 152, 151, 152, 153, 
	153, 153, 3, 154, 155, 154, 155, 3, 
	157, 158, 159, 160, 161, 157, 158, 159, 
	160, 161, 156, 162, 156, 159, 159, 156, 
	163, 156, 164, 165, 165, 156, 166, 166, 
	156, 167, 167, 156, 168, 168, 156, 157, 
	157, 156, 169, 156, 170, 156, 171, 171, 
	156, 172, 156, 173, 174, 174, 156, 175, 
	175, 156, 176, 176, 156, 177, 177, 156, 
	178, 178, 156, 179, 156, 180, 181, 182, 
	183, 180, 181, 182, 183, 156, 162, 156, 
	163, 156, 164, 156, 169, 156, 170, 156, 
	172, 156, 173, 156, 179, 156, 185, 184, 
	186, 184, 188, 187, 189, 190, 189, 190, 
	184, 190, 192, 190, 192, 191, 189, 194, 
	189, 194, 195, 196, 193, 197, 198, 199, 
	197, 198, 199, 193, 200, 200, 193, 201, 
	193, 202, 201, 202, 201, 193, 203, 203, 
	193, 204, 204, 193, 205, 205, 193, 206, 
	206, 193, 207, 207, 193, 208, 208, 193, 
	209, 210, 210, 193, 211, 209, 211, 209, 
	193, 209, 193, 212, 212, 193, 213, 213, 
	193, 214, 214, 193, 215, 215, 193, 216, 
	193, 217, 218, 219, 217, 218, 219, 193, 
	220, 220, 193, 201, 193, 221, 221, 193, 
	222, 222, 193, 223, 223, 193, 224, 224, 
	193, 225, 225, 193, 226, 226, 193, 227, 
	209, 227, 193, 209, 193, 228, 228, 193, 
	229, 229, 193, 230, 230, 193, 231, 231, 
	193, 216, 193, 233, 232, 234, 235, 234, 
	235, 232, 236, 236, 184, 237, 237, 184, 
	238, 238, 184, 239, 239, 184, 240, 240, 
	184, 241, 184, 242, 243, 244, 242, 243, 
	244, 184, 245, 184, 246, 184, 247, 184, 
	248, 232, 249, 250, 249, 250, 232, 251, 
	251, 184, 252, 252, 184, 253, 253, 184, 
	254, 254, 184, 255, 255, 184, 241, 184, 
	256, 257, 258, 256, 257, 258, 184, 245, 
	184, 246, 184, 247, 184, 259, 259, 260, 
	193, 193, 262, 193, 193, 262, 261, 263, 
	264, 197, 265, 198, 199, 264, 197, 265, 
	198, 199, 193, 266, 234, 267, 268, 269, 
	235, 266, 234, 267, 268, 269, 235, 193, 
	270, 270, 193, 271, 271, 184, 272, 272, 
	184, 273, 273, 184, 274, 274, 184, 275, 
	275, 184, 276, 276, 184, 277, 277, 184, 
	278, 278, 184, 279, 184, 280, 280, 193, 
	281, 281, 184, 282, 282, 184, 283, 283, 
	184, 284, 284, 184, 285, 184, 286, 286, 
	184, 287, 287, 184, 288, 288, 184, 289, 
	289, 184, 279, 184, 290, 290, 193, 291, 
	291, 184, 292, 292, 184, 293, 293, 184, 
	294, 294, 184, 295, 295, 184, 296, 297, 
	297, 184, 296, 184, 298, 298, 193, 299, 
	299, 193, 300, 300, 193, 301, 301, 302, 
	303, 193, 301, 301, 302, 193, 302, 302, 
	304, 304, 304, 193, 306, 305, 305, 305, 
	193, 307, 307, 193, 308, 308, 193, 309, 
	309, 193, 310, 310, 193, 311, 311, 193, 
	312, 312, 193, 303, 193, 313, 193, 314, 
	315, 193, 316, 316, 316, 316, 316, 316, 
	316, 316, 193, 317, 317, 317, 318, 317, 
	317, 317, 317, 193, 319, 320, 217, 321, 
	218, 219, 320, 217, 321, 218, 219, 193, 
	249, 322, 274, 323, 250, 249, 322, 274, 
	323, 250, 193, 324, 324, 184, 325, 325, 
	184, 326, 326, 184, 327, 327, 184, 328, 
	328, 184, 285, 184, 329, 329, 193, 330, 
	330, 184, 331, 331, 184, 332, 332, 184, 
	333, 333, 184, 334, 334, 184, 335, 296, 
	335, 184, 296, 184, 336, 336, 193, 337, 
	337, 193, 338, 338, 193, 339, 339, 340, 
	303, 193, 339, 339, 340, 193, 340, 340, 
	341, 341, 341, 193, 306, 342, 342, 342, 
	193, 343, 343, 193, 344, 344, 193, 345, 
	345, 193, 346, 346, 193, 347, 347, 193, 
	348, 348, 193, 303, 193, 349, 193, 350, 
	193, 351, 352, 351, 352, 353, 353, 353, 
	193, 355, 355, 354, 357, 357, 356, 357, 
	357, 358, 356, 357, 357, 359, 356, 357, 
	357, 360, 356, 361, 360, 361, 360, 356, 
	362, 363, 362, 363, 364, 364, 364, 193, 
	365, 366, 365, 366, 193, 368, 367, 369, 
	191, 370, 371, 372, 373, 372, 191, 375, 
	374, 376, 374, 377, 376, 374, 375, 375, 
	374, 378, 376, 374, 375, 375, 375, 374, 
	379, 380, 376, 374, 375, 375, 375, 374, 
	375, 375, 375, 375, 374, 381, 374, 382, 
	383, 384, 374, 386, 374, 386, 386, 386, 
	374, 374, 386, 374, 374, 374, 376, 381, 
	385, 374, 374, 386, 375, 387, 374, 388, 
	374, 389, 388, 374, 387, 387, 374, 390, 
	388, 374, 387, 387, 387, 374, 391, 392, 
	388, 374, 387, 387, 387, 374, 387, 387, 
	387, 387, 374, 393, 374, 394, 395, 396, 
	374, 398, 375, 398, 398, 398, 374, 374, 
	399, 374, 374, 374, 388, 393, 397, 374, 
	374, 398, 387, 402, 403, 404, 184, 399, 
	375, 399, 399, 399, 399, 184, 400, 401, 
	405, 184, 184, 399, 406, 406, 184, 400, 
	184, 407, 400, 184, 406, 406, 184, 408, 
	400, 184, 406, 406, 406, 184, 409, 410, 
	400, 184, 406, 406, 406, 184, 406, 406, 
	406, 406, 184, 401, 184, 411, 411, 191, 
	412, 412, 191, 413, 413, 191, 414, 415, 
	415, 191, 416, 191, 417, 191, 421, 421, 
	418, 419, 420, 421, 421, 421, 191, 421, 
	191, 421, 422, 421, 418, 419, 420, 421, 
	421, 421, 191, 418, 191, 419, 191, 425, 
	426, 427, 429, 429, 423, 424, 428, 429, 
	429, 429, 184, 429, 184, 423, 184, 430, 
	423, 184, 431, 429, 184, 425, 426, 427, 
	375, 422, 387, 432, 399, 429, 423, 424, 
	428, 429, 429, 429, 184, 433, 423, 184, 
	431, 429, 431, 429, 431, 429, 184, 434, 
	435, 423, 184, 431, 431, 429, 184, 431, 
	431, 431, 429, 184, 424, 184, 436, 184, 
	414, 191, 437, 437, 438, 438, 191, 191, 
	191, 440, 191, 439, 441, 441, 191, 442, 
	442, 191, 443, 443, 191, 444, 445, 445, 
	191, 446, 191, 447, 191, 191, 191, 191, 
	439, 444, 191, 448, 187, 450, 450, 452, 
	453, 454, 455, 184, 456, 451, 449, 458, 
	458, 460, 461, 462, 459, 457, 463, 463, 
	464, 465, 466, 459, 457, 459, 184, 184, 
	459, 457, 458, 458, 460, 461, 462, 459, 
	467, 457, 468, 469, 470, 472, 470, 473, 
	471, 471, 471, 184, 474, 474, 465, 466, 
	184, 475, 184, 477, 477, 478, 184, 184, 
	476, 480, 480, 481, 184, 184, 479, 482, 
	482, 483, 184, 184, 479, 484, 184, 474, 
	485, 470, 465, 470, 466, 471, 471, 471, 
	184, 470, 470, 470, 471, 471, 471, 184, 
	458, 458, 460, 461, 486, 459, 457, 487, 
	487, 488, 489, 184, 184, 476, 490, 490, 
	491, 492, 184, 184, 476, 480, 480, 481, 
	184, 184, 493, 479, 494, 495, 496, 498, 
	496, 184, 184, 497, 497, 497, 479, 499, 
	499, 500, 184, 184, 479, 501, 184, 499, 
	502, 496, 500, 496, 184, 184, 497, 497, 
	497, 479, 480, 503, 496, 481, 496, 184, 
	184, 497, 497, 497, 479, 482, 504, 496, 
	483, 496, 184, 184, 497, 497, 497, 479, 
	458, 458, 460, 461, 505, 459, 457, 477, 
	477, 506, 478, 184, 184, 476, 480, 480, 
	481, 507, 184, 184, 479, 480, 480, 508, 
	481, 184, 184, 479, 480, 480, 481, 509, 
	184, 479, 510, 184, 511, 511, 512, 461, 
	184, 513, 513, 514, 465, 184, 515, 184, 
	516, 517, 518, 472, 518, 519, 519, 519, 
	184, 520, 520, 465, 184, 520, 521, 518, 
	465, 518, 519, 519, 519, 184, 518, 518, 
	518, 519, 519, 519, 184, 458, 458, 460, 
	522, 461, 523, 459, 457, 477, 477, 524, 
	478, 184, 184, 476, 525, 525, 526, 527, 
	184, 184, 479, 528, 528, 529, 500, 184, 
	184, 479, 458, 458, 460, 461, 530, 459, 
	457, 477, 477, 478, 531, 184, 476, 510, 
	184, 533, 534, 535, 532, 532, 532, 184, 
	536, 536, 537, 461, 462, 184, 538, 538, 
	539, 465, 466, 184, 467, 184, 532, 184, 
	536, 536, 537, 461, 486, 184, 540, 184, 
	533, 184, 541, 187, 184, 541, 541, 543, 
	544, 545, 546, 547, 548, 543, 184, 184, 
	542, 184, 550, 550, 184, 551, 552, 184, 
	549, 184, 553, 553, 554, 555, 556, 557, 
	558, 184, 559, 560, 554, 184, 549, 184, 
	550, 550, 555, 556, 557, 558, 184, 561, 
	552, 184, 549, 184, 550, 550, 562, 563, 
	564, 184, 549, 550, 550, 551, 552, 184, 
	184, 566, 184, 184, 566, 568, 567, 565, 
	184, 570, 184, 184, 570, 572, 571, 569, 
	184, 573, 184, 184, 573, 574, 571, 569, 
	184, 184, 184, 571, 184, 571, 569, 575, 
	184, 576, 184, 184, 577, 184, 184, 577, 
	578, 579, 567, 565, 184, 581, 184, 184, 
	581, 582, 583, 584, 585, 586, 565, 587, 
	588, 582, 567, 580, 184, 590, 184, 184, 
	590, 569, 551, 591, 571, 589, 184, 592, 
	184, 184, 592, 593, 594, 595, 596, 597, 
	569, 559, 598, 593, 571, 589, 184, 590, 
	184, 184, 590, 594, 595, 596, 597, 569, 
	561, 591, 571, 589, 184, 590, 184, 184, 
	590, 599, 563, 600, 571, 589, 184, 590, 
	184, 184, 590, 551, 591, 571, 569, 601, 
	184, 550, 550, 551, 602, 184, 184, 590, 
	184, 184, 590, 569, 603, 591, 571, 589, 
	184, 566, 184, 184, 566, 604, 568, 567, 
	565, 184, 570, 184, 184, 570, 605, 572, 
	571, 569, 184, 570, 184, 184, 570, 606, 
	572, 571, 569, 184, 570, 184, 184, 570, 
	607, 572, 571, 569, 184, 570, 184, 184, 
	570, 599, 572, 571, 569, 184, 590, 184, 
	184, 590, 608, 569, 609, 591, 571, 589, 
	184, 590, 184, 184, 590, 569, 563, 591, 
	571, 589, 184, 566, 184, 184, 566, 610, 
	568, 567, 565, 184, 590, 184, 184, 590, 
	569, 611, 591, 571, 589, 184, 566, 184, 
	184, 566, 612, 568, 567, 565, 184, 570, 
	184, 184, 570, 599, 572, 571, 569, 184, 
	566, 184, 184, 566, 613, 614, 615, 568, 
	567, 610, 610, 610, 565, 184, 570, 184, 
	184, 570, 599, 572, 571, 569, 184, 590, 
	184, 184, 590, 563, 591, 571, 569, 184, 
	570, 184, 184, 570, 616, 572, 571, 569, 
	184, 570, 184, 184, 570, 617, 572, 571, 
	569, 550, 550, 551, 618, 184, 184, 550, 
	550, 184, 603, 552, 184, 549, 184, 550, 
	550, 619, 184, 609, 552, 184, 549, 184, 
	550, 550, 184, 563, 552, 184, 549, 184, 
	550, 550, 184, 611, 552, 184, 549, 620, 
	621, 622, 562, 562, 562, 184, 562, 184, 
	550, 550, 563, 552, 184, 623, 184, 620, 
	184, 624, 187, 625, 187, 626, 187, 627, 
	187, 628, 187, 629, 187, 630, 187, 631, 
	187, 633, 633, 633, 633, 633, 632, 634, 
	187, 635, 187, 636, 187, 637, 187, 641, 
	641, 638, 639, 640, 641, 641, 641, 187, 
	641, 187, 641, 642, 641, 638, 639, 640, 
	641, 641, 641, 187, 638, 187, 639, 187, 
	645, 646, 647, 649, 649, 643, 644, 648, 
	649, 649, 649, 184, 649, 184, 643, 184, 
	650, 643, 184, 651, 649, 184, 645, 646, 
	647, 652, 642, 653, 654, 655, 649, 643, 
	644, 648, 649, 649, 649, 184, 656, 643, 
	184, 651, 649, 651, 649, 651, 649, 184, 
	657, 658, 643, 184, 651, 651, 649, 184, 
	651, 651, 651, 649, 184, 644, 184, 652, 
	659, 660, 659, 661, 660, 659, 652, 652, 
	659, 662, 660, 659, 652, 652, 652, 659, 
	663, 664, 660, 659, 652, 652, 652, 659, 
	652, 652, 652, 652, 659, 665, 659, 666, 
	667, 668, 659, 670, 659, 670, 670, 670, 
	659, 659, 670, 659, 659, 659, 660, 665, 
	669, 659, 659, 670, 652, 653, 659, 671, 
	659, 672, 671, 659, 653, 653, 659, 673, 
	671, 659, 653, 653, 653, 659, 674, 675, 
	671, 659, 653, 653, 653, 659, 653, 653, 
	653, 653, 659, 676, 659, 677, 678, 679, 
	659, 681, 652, 681, 681, 681, 659, 659, 
	655, 659, 659, 659, 671, 676, 680, 659, 
	659, 681, 653, 684, 685, 686, 184, 655, 
	652, 655, 655, 655, 655, 184, 682, 683, 
	687, 184, 184, 655, 688, 688, 184, 682, 
	184, 689, 682, 184, 688, 688, 184, 690, 
	682, 184, 688, 688, 688, 184, 691, 692, 
	682, 184, 688, 688, 688, 184, 688, 688, 
	688, 688, 184, 683, 184, 693, 184, 694, 
	187, 695, 187, 696, 696, 187, 697, 697, 
	187, 698, 698, 187, 699, 699, 187, 700, 
	700, 187, 701, 701, 187, 702, 187, 703, 
	187, 704, 187, 705, 187, 706, 187, 707, 
	708, 187, 709, 709, 187, 710, 187, 711, 
	187, 712, 187, 713, 187, 714, 187, 715, 
	187, 716, 187, 717, 187, 718, 187, 720, 
	720, 719, 721, 719, 722, 187, 723, 187, 
	724, 187, 725, 187, 726, 249, 322, 727, 
	274, 728, 250, 729, 726, 249, 322, 727, 
	274, 728, 250, 729, 191, 730, 191, 731, 
	191, 329, 732, 329, 191, 733, 191, 734, 
	735, 734, 191, 736, 191, 737, 738, 737, 
	738, 191, 739, 739, 191, 740, 740, 191, 
	741, 741, 191, 742, 742, 191, 743, 191, 
	744, 744, 191, 745, 745, 191, 746, 746, 
	747, 748, 191, 746, 746, 747, 191, 747, 
	747, 749, 749, 749, 191, 751, 750, 750, 
	750, 191, 753, 754, 753, 754, 752, 756, 
	757, 756, 757, 755, 758, 758, 191, 759, 
	759, 191, 760, 760, 191, 761, 761, 191, 
	762, 762, 191, 763, 763, 764, 765, 191, 
	191, 767, 191, 191, 767, 768, 769, 766, 
	191, 191, 191, 771, 770, 191, 768, 191, 
	191, 768, 769, 766, 772, 772, 191, 773, 
	773, 191, 774, 774, 191, 775, 776, 776, 
	191, 777, 191, 778, 191, 191, 191, 191, 
	779, 191, 191, 780, 191, 779, 191, 191, 
	781, 780, 191, 779, 191, 191, 191, 782, 
	191, 191, 191, 784, 783, 775, 191, 785, 
	191, 786, 786, 191, 787, 787, 191, 788, 
	788, 191, 789, 789, 191, 790, 790, 191, 
	791, 791, 191, 792, 191, 794, 795, 794, 
	795, 793, 796, 796, 191, 797, 797, 191, 
	798, 798, 191, 799, 799, 191, 800, 191, 
	801, 802, 801, 191, 803, 803, 191, 804, 
	804, 191, 805, 805, 191, 806, 806, 191, 
	807, 807, 191, 808, 809, 808, 191, 809, 
	191, 810, 810, 191, 811, 191, 812, 813, 
	812, 191, 814, 814, 191, 815, 815, 816, 
	817, 191, 815, 815, 816, 191, 816, 816, 
	818, 819, 820, 819, 821, 821, 191, 822, 
	822, 823, 823, 191, 191, 191, 825, 191, 
	824, 826, 826, 827, 191, 191, 829, 191, 
	191, 829, 828, 191, 831, 191, 191, 831, 
	832, 830, 833, 833, 834, 191, 835, 191, 
	836, 836, 191, 837, 837, 191, 838, 838, 
	191, 839, 191, 191, 831, 191, 191, 831, 
	832, 828, 840, 840, 191, 841, 841, 191, 
	842, 842, 191, 843, 844, 844, 191, 845, 
	191, 846, 191, 191, 191, 191, 824, 843, 
	191, 191, 825, 825, 848, 191, 847, 849, 
	849, 850, 850, 191, 191, 191, 825, 191, 
	851, 852, 852, 191, 853, 853, 191, 854, 
	854, 191, 855, 856, 856, 191, 857, 191, 
	858, 191, 191, 191, 191, 851, 855, 191, 
	859, 859, 191, 860, 860, 191, 861, 861, 
	191, 862, 863, 863, 191, 864, 191, 865, 
	191, 191, 191, 191, 847, 862, 191, 817, 
	817, 866, 866, 867, 867, 191, 191, 869, 
	869, 870, 191, 868, 871, 871, 872, 191, 
	873, 191, 874, 874, 191, 875, 875, 191, 
	876, 876, 191, 877, 191, 191, 869, 869, 
	878, 870, 191, 868, 191, 869, 869, 879, 
	870, 879, 191, 868, 191, 869, 869, 880, 
	870, 880, 191, 868, 191, 869, 869, 881, 
	870, 881, 191, 868, 191, 869, 869, 870, 
	877, 191, 868, 882, 882, 191, 883, 883, 
	191, 884, 884, 191, 885, 886, 886, 191, 
	887, 191, 888, 191, 191, 191, 191, 868, 
	885, 191, 889, 234, 890, 891, 268, 892, 
	235, 893, 889, 234, 890, 891, 268, 892, 
	235, 893, 191, 730, 270, 270, 191, 891, 
	280, 891, 280, 191, 731, 191, 732, 290, 
	894, 290, 894, 191, 895, 895, 191, 896, 
	896, 191, 897, 897, 191, 898, 898, 191, 
	730, 191, 733, 191, 899, 899, 191, 899, 
	899, 900, 900, 191, 901, 901, 191, 902, 
	902, 191, 903, 903, 191, 904, 191, 905, 
	191, 906, 906, 907, 907, 191, 191, 191, 
	909, 191, 908, 191, 191, 909, 910, 191, 
	908, 191, 191, 191, 911, 191, 191, 191, 
	913, 912, 191, 191, 191, 914, 913, 912, 
	191, 191, 191, 913, 915, 915, 912, 191, 
	191, 191, 913, 916, 912, 917, 917, 191, 
	918, 918, 191, 919, 919, 191, 920, 921, 
	921, 191, 922, 191, 923, 191, 191, 191, 
	191, 908, 920, 191, 735, 924, 925, 924, 
	925, 191, 926, 926, 191, 927, 927, 191, 
	928, 928, 191, 929, 929, 191, 930, 930, 
	191, 931, 931, 191, 932, 932, 191, 933, 
	933, 191, 800, 191, 736, 191, 934, 935, 
	934, 935, 191, 936, 936, 191, 937, 937, 
	191, 938, 938, 191, 939, 939, 191, 743, 
	191, 940, 940, 191, 941, 941, 191, 942, 
	942, 943, 748, 191, 942, 942, 943, 191, 
	943, 943, 944, 944, 944, 191, 751, 945, 
	945, 945, 191, 946, 947, 946, 947, 191, 
	785, 191, 948, 948, 191, 949, 949, 191, 
	950, 950, 191, 951, 951, 191, 952, 952, 
	953, 765, 191, 191, 955, 191, 191, 955, 
	956, 769, 954, 191, 191, 191, 771, 957, 
	191, 956, 191, 191, 956, 769, 954, 958, 
	958, 191, 959, 959, 191, 960, 960, 191, 
	961, 962, 962, 191, 963, 191, 964, 191, 
	191, 191, 191, 965, 191, 191, 966, 191, 
	965, 961, 191, 967, 967, 191, 968, 968, 
	191, 969, 969, 191, 970, 970, 191, 971, 
	971, 191, 972, 972, 191, 792, 191, 802, 
	973, 974, 973, 974, 191, 975, 975, 191, 
	976, 976, 191, 977, 977, 191, 978, 978, 
	191, 979, 979, 191, 809, 980, 980, 191, 
	809, 191, 981, 981, 191, 982, 982, 191, 
	983, 983, 191, 984, 984, 191, 735, 191, 
	985, 985, 191, 811, 191, 813, 191, 986, 
	986, 986, 986, 191, 988, 987, 987, 987, 
	987, 191, 989, 191, 993, 994, 995, 989, 
	998, 989, 989, 997, 990, 991, 992, 996, 
	990, 997, 997, 989, 997, 997, 997, 184, 
	1001, 1002, 1003, 990, 990, 990, 990, 1005, 
	990, 999, 1000, 1004, 990, 1005, 1005, 990, 
	1005, 1005, 1005, 184, 1001, 1002, 1003, 990, 
	990, 990, 990, 1005, 1005, 990, 999, 1000, 
	1004, 990, 1005, 1005, 990, 1005, 1005, 1005, 
	184, 1001, 1002, 1003, 990, 990, 990, 990, 
	1005, 999, 990, 999, 1000, 1004, 990, 1005, 
	1005, 990, 1005, 1005, 1005, 184, 1006, 1001, 
	1002, 1003, 990, 990, 990, 990, 1005, 999, 
	990, 999, 1000, 1004, 990, 1005, 1005, 990, 
	1005, 1005, 1005, 184, 990, 1001, 1002, 1003, 
	990, 990, 990, 990, 1005, 1005, 990, 999, 
	1000, 1004, 990, 1005, 1005, 990, 1005, 1005, 
	1005, 184, 1007, 1001, 1002, 1003, 990, 990, 
	990, 990, 1005, 999, 990, 999, 1000, 1004, 
	990, 1005, 1005, 990, 1005, 1005, 1005, 184, 
	1001, 1002, 1003, 990, 990, 990, 990, 1005, 
	990, 1005, 990, 1005, 990, 1005, 990, 999, 
	1000, 1004, 990, 1005, 1005, 990, 1005, 1005, 
	1005, 184, 1008, 1009, 1001, 1002, 1003, 990, 
	990, 990, 990, 1005, 999, 990, 999, 1000, 
	1004, 990, 1005, 1005, 990, 1005, 1005, 1005, 
	184, 990, 990, 1001, 1002, 1003, 990, 990, 
	990, 990, 1005, 1005, 990, 999, 1000, 1004, 
	990, 1005, 1005, 990, 1005, 1005, 1005, 184, 
	1001, 1002, 1003, 990, 990, 990, 990, 1005, 
	1000, 990, 999, 1000, 1004, 990, 1005, 1005, 
	990, 1005, 1005, 1005, 184, 990, 990, 990, 
	1001, 1002, 1003, 990, 990, 990, 990, 1005, 
	1005, 990, 999, 1000, 1004, 990, 1005, 1005, 
	990, 1005, 1005, 1005, 184, 1001, 1002, 1003, 
	990, 990, 990, 990, 1005, 997, 990, 999, 
	1000, 1004, 990, 1005, 1005, 990, 1005, 1005, 
	1005, 184, 1001, 1002, 1003, 990, 990, 990, 
	990, 1005, 991, 990, 999, 1000, 1004, 990, 
	1005, 1005, 990, 1005, 1005, 1005, 184, 1010, 
	1001, 1002, 1003, 990, 990, 990, 990, 1005, 
	991, 990, 999, 1000, 1004, 990, 1005, 1005, 
	990, 1005, 1005, 1005, 184, 989, 1001, 1002, 
	1003, 990, 990, 990, 990, 1005, 997, 990, 
	999, 1000, 1004, 990, 1005, 1005, 990, 1005, 
	1005, 1005, 184, 1011, 1001, 1002, 1003, 990, 
	990, 990, 990, 1005, 991, 990, 999, 1000, 
	1004, 990, 1005, 1005, 990, 1005, 1005, 1005, 
	184, 1001, 1002, 1003, 990, 990, 990, 990, 
	1005, 989, 997, 989, 997, 989, 997, 990, 
	999, 1000, 1004, 990, 1005, 1005, 990, 1005, 
	1005, 1005, 184, 1012, 1013, 1001, 1002, 1003, 
	990, 990, 990, 990, 1005, 991, 990, 999, 
	1000, 1004, 990, 1005, 1005, 990, 1005, 1005, 
	1005, 184, 989, 989, 1001, 1002, 1003, 990, 
	990, 990, 990, 1005, 997, 990, 999, 1000, 
	1004, 990, 1005, 1005, 990, 1005, 1005, 1005, 
	184, 989, 989, 989, 1001, 1002, 1003, 990, 
	990, 990, 990, 1005, 997, 990, 999, 1000, 
	1004, 990, 1005, 1005, 990, 1005, 1005, 1005, 
	184, 1001, 1002, 1003, 990, 990, 990, 990, 
	1005, 992, 990, 999, 1000, 1004, 990, 1005, 
	1005, 990, 1005, 1005, 1005, 184, 993, 994, 
	995, 989, 998, 989, 989, 989, 989, 997, 
	990, 991, 992, 996, 990, 997, 997, 989, 
	997, 997, 997, 184, 1014, 191, 1015, 1014, 
	191, 989, 989, 191, 1016, 1014, 191, 989, 
	989, 989, 191, 1017, 1018, 1014, 191, 989, 
	989, 989, 191, 989, 989, 989, 989, 191, 
	1019, 191, 1020, 1021, 1022, 989, 1014, 1019, 
	1023, 989, 989, 989, 989, 989, 191, 1025, 
	1024, 1026, 1026, 1024, 1027, 1027, 1024, 1028, 
	1028, 1024, 1029, 1029, 1024, 1030, 1024, 1031, 
	1024, 1032, 1032, 1024, 1033, 1033, 1024, 1034, 
	1034, 1024, 1035, 1035, 1024, 1030, 1024, 1037, 
	1036, 1038, 1038, 1036, 1039, 1039, 1036, 1040, 
	1040, 1036, 1041, 1041, 1036, 1042, 1042, 1036, 
	1043, 1043, 1036, 1044, 1044, 1036, 1045, 1036, 
	1046, 1036, 1047, 1047, 1036, 1048, 1048, 1036, 
	1049, 1049, 1036, 1050, 1050, 1036, 1051, 1051, 
	1036, 1052, 1052, 1036, 1053, 1053, 1036, 1045, 
	1036, 1055, 1056, 1055, 1056, 1054, 1057, 1057, 
	1054, 1058, 1058, 1054, 1059, 1059, 1054, 1060, 
	1060, 1054, 1061, 1061, 1054, 1062, 1062, 1054, 
	1063, 1063, 1054, 1064, 1054, 1065, 1066, 1067, 
	1068, 1065, 1066, 1067, 1068, 1054, 1069, 1069, 
	1054, 1070, 1070, 1054, 1071, 1071, 1054, 1072, 
	1054, 1073, 1073, 1054, 1074, 1074, 1054, 1075, 
	1075, 1054, 1076, 1054, 1077, 1077, 1054, 1078, 
	1078, 1054, 1079, 1079, 1054, 1080, 1054, 1081, 
	1054, 1082, 1082, 1054, 1083, 1083, 1054, 1084, 
	1084, 1085, 1086, 1086, 1054, 1084, 1084, 1087, 
	1087, 1087, 1054, 1088, 1088, 1090, 1089, 1089, 
	1089, 1054, 1091, 1091, 1092, 1054, 1092, 1092, 
	1093, 1094, 1095, 1095, 1095, 1054, 1054, 1054, 
	1054, 1096, 1054, 1054, 1054, 1098, 1097, 1099, 
	1099, 1100, 1054, 1054, 1054, 1054, 1101, 1054, 
	1054, 1054, 1098, 1102, 1103, 1103, 1105, 1104, 
	1104, 1104, 1054, 1106, 1106, 1054, 1107, 1107, 
	1054, 1108, 1108, 1054, 1109, 1109, 1054, 1110, 
	1110, 1111, 1054, 1110, 1110, 1112, 1112, 1112, 
	1054, 1113, 1113, 1115, 1114, 1114, 1114, 1054, 
	1116, 1116, 1117, 1054, 1117, 1117, 1118, 1119, 
	1120, 1120, 1120, 1054, 1054, 1054, 1054, 1121, 
	1054, 1054, 1054, 1123, 1122, 1124, 1124, 1125, 
	1054, 1054, 1054, 1054, 1126, 1054, 1054, 1054, 
	1123, 1127, 1128, 1128, 1130, 1129, 1129, 1129, 
	1054, 1131, 1132, 1133, 1134, 1131, 1132, 1133, 
	1134, 1054, 1135, 1135, 1054, 1136, 1136, 1054, 
	1137, 1137, 1054, 1138, 1138, 1139, 1054, 1138, 
	1138, 1140, 1140, 1140, 1054, 1141, 1141, 1143, 
	1142, 1142, 1142, 1054, 1144, 1144, 1145, 1054, 
	1145, 1145, 1146, 1147, 1148, 1148, 1148, 1054, 
	1054, 1054, 1054, 1149, 1054, 1054, 1054, 1151, 
	1150, 1152, 1152, 1153, 1054, 1054, 1054, 1054, 
	1154, 1054, 1054, 1054, 1151, 1155, 1156, 1156, 
	1158, 1157, 1157, 1157, 1054, 1159, 1159, 1160, 
	1054, 1159, 1159, 1161, 1161, 1161, 1054, 1162, 
	1162, 1164, 1163, 1163, 1163, 1054, 1165, 1165, 
	1166, 1054, 1166, 1166, 1167, 1168, 1169, 1169, 
	1169, 1054, 1054, 1054, 1054, 1170, 1054, 1054, 
	1054, 1172, 1171, 1173, 1173, 1174, 1054, 1054, 
	1054, 1054, 1175, 1054, 1054, 1054, 1172, 1176, 
	1177, 1177, 1179, 1178, 1178, 1178, 1054, 1180, 
	1180, 1181, 1182, 1182, 1054, 1180, 1180, 1183, 
	1183, 1183, 1054, 1184, 1184, 1186, 1185, 1185, 
	1185, 1054, 1187, 1187, 1188, 1054, 1188, 1188, 
	1189, 1190, 1191, 1191, 1191, 1054, 1054, 1054, 
	1054, 1192, 1054, 1054, 1054, 1194, 1193, 1195, 
	1195, 1196, 1054, 1054, 1054, 1054, 1197, 1054, 
	1054, 1054, 1194, 1198, 1199, 1199, 1201, 1200, 
	1200, 1200, 1054, 1202, 1202, 1054, 1203, 1203, 
	1054, 1204, 1204, 1205, 1054, 1204, 1204, 1206, 
	1206, 1206, 1054, 1207, 1207, 1209, 1208, 1208, 
	1208, 1054, 1210, 1210, 1211, 1054, 1211, 1211, 
	1212, 1213, 1214, 1214, 1214, 1054, 1054, 1054, 
	1054, 1215, 1054, 1054, 1054, 1217, 1216, 1218, 
	1218, 1219, 1054, 1054, 1054, 1054, 1220, 1054, 
	1054, 1054, 1217, 1221, 1222, 1222, 1224, 1223, 
	1223, 1223, 1054, 1225, 1225, 1226, 1054, 1225, 
	1225, 1227, 1227, 1227, 1054, 1228, 1228, 1230, 
	1229, 1229, 1229, 1054, 1231, 1231, 1232, 1054, 
	1232, 1232, 1233, 1234, 1235, 1235, 1235, 1054, 
	1054, 1054, 1054, 1236, 1054, 1054, 1054, 1238, 
	1237, 1239, 1239, 1240, 1054, 1054, 1054, 1054, 
	1241, 1054, 1054, 1054, 1238, 1242, 1243, 1243, 
	1245, 1244, 1244, 1244, 1054, 1246, 1247, 1246, 
	1247, 1054, 1248, 1248, 1054, 1249, 1249, 1054, 
	1250, 1250, 1054, 1251, 1251, 1054, 1252, 1252, 
	1054, 1253, 1253, 1054, 1254, 1254, 1054, 1064, 
	1054, 1255, 1256, 1257, 1258, 1255, 1256, 1257, 
	1258, 1054, 1259, 1259, 1054, 1260, 1260, 1054, 
	1261, 1261, 1054, 1072, 1054, 1262, 1262, 1054, 
	1263, 1263, 1054, 1264, 1264, 1054, 1076, 1054, 
	1265, 1265, 1054, 1266, 1266, 1054, 1267, 1267, 
	1054, 1080, 1054, 1081, 1054, 1268, 1268, 1054, 
	1269, 1269, 1054, 1270, 1270, 1271, 1085, 1271, 
	1054, 1270, 1270, 1272, 1272, 1272, 1054, 1273, 
	1273, 1275, 1274, 1274, 1274, 1054, 1276, 1276, 
	1277, 1054, 1277, 1277, 1278, 1279, 1280, 1280, 
	1280, 1054, 1054, 1054, 1054, 1281, 1054, 1054, 
	1054, 1283, 1282, 1284, 1284, 1100, 1054, 1054, 
	1054, 1054, 1285, 1054, 1054, 1054, 1283, 1286, 
	1287, 1287, 1105, 1288, 1288, 1288, 1054, 1289, 
	1289, 1054, 1290, 1290, 1054, 1291, 1291, 1054, 
	1292, 1292, 1054, 1293, 1293, 1111, 1054, 1293, 
	1293, 1294, 1294, 1294, 1054, 1295, 1295, 1297, 
	1296, 1296, 1296, 1054, 1298, 1298, 1299, 1054, 
	1299, 1299, 1300, 1301, 1302, 1302, 1302, 1054, 
	1054, 1054, 1054, 1303, 1054, 1054, 1054, 1305, 
	1304, 1306, 1306, 1125, 1054, 1054, 1054, 1054, 
	1307, 1054, 1054, 1054, 1305, 1308, 1309, 1309, 
	1130, 1310, 1310, 1310, 1054, 1311, 1312, 1313, 
	1314, 1311, 1312, 1313, 1314, 1054, 1315, 1315, 
	1054, 1316, 1316, 1054, 1317, 1317, 1054, 1318, 
	1318, 1139, 1054, 1318, 1318, 1319, 1319, 1319, 
	1054, 1320, 1320, 1322, 1321, 1321, 1321, 1054, 
	1323, 1323, 1324, 1054, 1324, 1324, 1325, 1326, 
	1327, 1327, 1327, 1054, 1054, 1054, 1054, 1328, 
	1054, 1054, 1054, 1330, 1329, 1331, 1331, 1153, 
	1054, 1054, 1054, 1054, 1332, 1054, 1054, 1054, 
	1330, 1333, 1334, 1334, 1158, 1335, 1335, 1335, 
	1054, 1336, 1336, 1160, 1054, 1336, 1336, 1337, 
	1337, 1337, 1054, 1338, 1338, 1340, 1339, 1339, 
	1339, 1054, 1341, 1341, 1342, 1054, 1342, 1342, 
	1343, 1344, 1345, 1345, 1345, 1054, 1054, 1054, 
	1054, 1346, 1054, 1054, 1054, 1348, 1347, 1349, 
	1349, 1174, 1054, 1054, 1054, 1054, 1350, 1054, 
	1054, 1054, 1348, 1351, 1352, 1352, 1179, 1353, 
	1353, 1353, 1054, 1354, 1354, 1355, 1181, 1355, 
	1054, 1354, 1354, 1356, 1356, 1356, 1054, 1357, 
	1357, 1359, 1358, 1358, 1358, 1054, 1360, 1360, 
	1361, 1054, 1361, 1361, 1362, 1363, 1364, 1364, 
	1364, 1054, 1054, 1054, 1054, 1365, 1054, 1054, 
	1054, 1367, 1366, 1368, 1368, 1196, 1054, 1054, 
	1054, 1054, 1369, 1054, 1054, 1054, 1367, 1370, 
	1371, 1371, 1201, 1372, 1372, 1372, 1054, 1373, 
	1373, 1054, 1374, 1374, 1054, 1375, 1375, 1205, 
	1054, 1375, 1375, 1376, 1376, 1376, 1054, 1377, 
	1377, 1379, 1378, 1378, 1378, 1054, 1380, 1380, 
	1381, 1054, 1381, 1381, 1382, 1383, 1384, 1384, 
	1384, 1054, 1054, 1054, 1054, 1385, 1054, 1054, 
	1054, 1387, 1386, 1388, 1388, 1219, 1054, 1054, 
	1054, 1054, 1389, 1054, 1054, 1054, 1387, 1390, 
	1391, 1391, 1224, 1392, 1392, 1392, 1054, 1393, 
	1393, 1226, 1054, 1393, 1393, 1394, 1394, 1394, 
	1054, 1395, 1395, 1397, 1396, 1396, 1396, 1054, 
	1398, 1398, 1399, 1054, 1399, 1399, 1400, 1401, 
	1402, 1402, 1402, 1054, 1054, 1054, 1054, 1403, 
	1054, 1054, 1054, 1405, 1404, 1406, 1406, 1240, 
	1054, 1054, 1054, 1054, 1407, 1054, 1054, 1054, 
	1405, 1408, 1409, 1409, 1245, 1410, 1410, 1410, 
	1054, 1, 1412, 1, 1412, 1413, 1414, 1415, 
	1416, 1417, 1415, 1411, 1, 2, 1, 2, 
	1418, 1, 4, 1, 4, 5, 6, 1419, 
	11, 11, 1420, 26, 26, 27, 1419, 1421, 
	1421, 1421, 1422, 1421, 25, 1421, 1421, 25, 
	24, 1423, 1424, 1425, 7, 1426, 32, 1427, 
	1428, 1423, 1424, 1425, 7, 1426, 32, 1427, 
	1428, 1419, 37, 37, 1429, 54, 55, 54, 
	55, 1430, 57, 58, 57, 58, 1431, 1433, 
	1433, 1432, 66, 66, 1434, 81, 82, 81, 
	82, 1435, 89, 89, 1436, 1437, 1419, 1439, 
	1439, 1438, 1440, 1441, 17, 1442, 1443, 1444, 
	1445, 1440, 1441, 17, 1442, 1443, 1444, 1445, 
	1419, 1446, 1419, 1448, 1449, 1450, 1447, 1452, 
	178, 1453, 171, 1454, 1455, 178, 1453, 171, 
	1454, 1455, 1451, 1456, 1457, 1458, 1459, 1460, 
	1457, 1458, 1459, 1460, 1451, 1465, 1466, 1467, 
	1468, 1466, 1469, 1472, 1473, 1474, 1475, 1476, 
	1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 
	1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 
	1480, 1481, 1482, 1483, 1485, 1486, 1487, 1461, 
	1461, 1461, 1488, 1461, 1462, 1463, 1464, 1461, 
	1470, 1461, 1461, 1470, 1461, 1470, 1461, 1471, 
	185, 1489, 186, 188, 1491, 1490, 186, 1489, 
	188, 1489, 189, 190, 189, 190, 184, 190, 
	192, 190, 192, 1489, 189, 194, 1493, 194, 
	1494, 1495, 1496, 1497, 1498, 1496, 1492, 202, 
	202, 1499, 189, 190, 1493, 190, 1501, 1502, 
	1500, 1503, 1503, 1503, 1504, 1503, 262, 1503, 
	1503, 262, 261, 279, 279, 1505, 285, 285, 
	1506, 1508, 1508, 1507, 1489, 1509, 382, 383, 
	384, 1510, 386, 1510, 386, 386, 386, 1510, 
	1510, 386, 1510, 1510, 1510, 376, 381, 385, 
	1510, 1510, 386, 375, 394, 395, 396, 1510, 
	398, 375, 398, 398, 398, 1510, 1510, 399, 
	1510, 1510, 1510, 388, 393, 397, 1510, 1510, 
	398, 387, 402, 403, 404, 1510, 399, 375, 
	399, 399, 399, 399, 1510, 400, 401, 405, 
	1510, 1510, 399, 406, 425, 426, 427, 375, 
	422, 387, 432, 399, 429, 423, 424, 428, 
	429, 429, 429, 1510, 375, 387, 399, 436, 
	1510, 1512, 1513, 1511, 1511, 1511, 1490, 1515, 
	1515, 1515, 1514, 1517, 1517, 1517, 1516, 1519, 
	1519, 1519, 1518, 1521, 1521, 1521, 1520, 1522, 
	1522, 1522, 1514, 1523, 1523, 1523, 1516, 1525, 
	1525, 1525, 1524, 1527, 1527, 1527, 1526, 1529, 
	1529, 1529, 1528, 1531, 1531, 1531, 1530, 1532, 
	1532, 1532, 1528, 1533, 1533, 1533, 1530, 1534, 
	1532, 1532, 1532, 1528, 576, 1529, 1529, 1529, 
	1528, 1535, 1536, 1512, 1535, 1536, 1513, 1511, 
	1511, 1511, 1490, 1537, 1512, 1537, 1513, 1511, 
	1511, 1511, 1490, 1538, 1512, 1538, 1513, 1511, 
	1511, 1511, 1490, 1539, 1512, 1539, 1513, 1511, 
	1511, 1511, 1490, 1540, 1512, 1513, 1511, 1511, 
	1511, 1490, 1542, 1541, 1543, 1512, 1543, 1513, 
	1511, 1511, 1511, 1490, 1544, 1512, 1544, 1513, 
	1511, 1511, 1511, 1490, 1545, 1512, 1545, 1513, 
	1511, 1511, 1511, 1490, 1546, 1512, 1546, 1513, 
	1511, 1511, 1511, 1490, 1547, 1512, 1513, 1511, 
	1511, 1511, 1490, 1549, 1548, 1550, 1512, 1550, 
	1513, 1511, 1511, 1511, 1490, 1551, 1512, 1551, 
	1513, 1511, 1511, 1511, 1490, 1552, 1512, 1552, 
	1513, 1511, 1511, 1511, 1490, 1553, 1512, 1553, 
	1513, 1511, 1511, 1511, 1490, 1554, 1512, 1554, 
	1513, 1511, 1511, 1511, 1490, 1555, 1512, 1555, 
	1513, 1511, 1511, 1511, 1490, 1556, 1512, 1513, 
	1511, 1511, 1511, 1490, 1558, 1557, 1559, 1512, 
	1559, 1513, 1511, 1511, 1511, 1490, 1560, 1512, 
	1560, 1513, 1511, 1511, 1511, 1490, 1561, 1512, 
	1561, 1513, 1511, 1511, 1511, 1490, 1562, 1512, 
	1562, 1513, 1511, 1511, 1511, 1490, 1563, 1512, 
	1513, 1511, 1511, 1511, 1490, 1565, 1566, 1564, 
	1568, 1568, 1568, 1568, 1568, 1567, 1569, 1512, 
	1569, 1513, 1511, 1511, 1511, 1490, 1570, 1512, 
	1570, 1513, 1511, 1511, 1511, 1490, 1571, 1512, 
	1571, 1513, 1511, 1511, 1511, 1490, 1572, 1512, 
	1572, 1513, 1511, 1511, 1511, 1490, 1573, 1512, 
	1513, 1511, 1511, 1511, 1490, 1575, 1574, 1576, 
	1512, 1576, 1513, 1511, 1511, 1511, 1490, 1577, 
	1512, 1577, 1513, 1511, 1511, 1511, 1490, 1578, 
	1512, 1578, 1513, 1511, 1511, 1511, 1490, 1579, 
	1580, 1512, 1580, 1513, 1511, 1511, 1511, 1490, 
	645, 646, 647, 652, 642, 653, 654, 655, 
	649, 643, 644, 648, 649, 649, 649, 1581, 
	666, 667, 668, 1581, 670, 1581, 670, 670, 
	670, 1581, 1581, 670, 1581, 1581, 1581, 660, 
	665, 669, 1581, 1581, 670, 652, 677, 678, 
	679, 1581, 681, 652, 681, 681, 681, 1581, 
	1581, 655, 1581, 1581, 1581, 671, 676, 680, 
	1581, 1581, 681, 653, 684, 685, 686, 1581, 
	655, 652, 655, 655, 655, 655, 1581, 682, 
	683, 687, 1581, 1581, 655, 688, 652, 653, 
	655, 693, 1581, 1579, 1512, 1513, 1511, 1511, 
	1511, 1490, 1582, 1512, 1582, 1513, 1511, 1511, 
	1511, 1490, 1583, 1512, 1583, 1513, 1511, 1511, 
	1511, 1490, 1584, 1512, 1584, 1513, 1511, 1511, 
	1511, 1490, 1585, 1512, 1585, 1513, 1511, 1511, 
	1511, 1490, 1586, 1512, 1586, 1513, 1511, 1511, 
	1511, 1490, 1587, 1512, 1587, 1513, 1511, 1511, 
	1511, 1490, 1588, 1512, 1588, 1513, 1511, 1511, 
	1511, 1490, 1589, 1512, 1589, 1513, 1511, 1511, 
	1511, 1490, 1590, 1512, 1590, 1513, 1511, 1511, 
	1511, 1490, 1591, 1512, 1591, 1513, 1511, 1511, 
	1511, 1490, 1592, 1512, 1513, 1511, 1511, 1511, 
	1490, 1594, 1593, 1595, 1512, 1595, 1513, 1511, 
	1511, 1511, 1490, 1596, 1512, 1596, 1513, 1511, 
	1511, 1511, 1490, 1597, 1512, 1513, 1511, 1511, 
	1511, 1490, 1599, 1598, 1600, 1601, 1512, 1600, 
	1601, 1513, 1511, 1511, 1511, 1490, 1602, 1512, 
	1602, 1513, 1511, 1511, 1511, 1490, 1603, 1512, 
	1603, 1513, 1511, 1511, 1511, 1490, 1604, 1512, 
	1604, 1513, 1511, 1511, 1511, 1490, 1605, 1512, 
	1513, 1511, 1511, 1511, 1490, 1607, 1606, 1608, 
	1609, 1512, 1608, 1609, 1513, 1511, 1511, 1511, 
	1490, 1610, 1512, 1610, 1513, 1511, 1511, 1511, 
	1490, 1611, 1512, 1513, 1511, 1511, 1511, 1490, 
	1613, 1612, 1614, 1512, 1614, 1513, 1511, 1511, 
	1511, 1490, 1615, 1512, 1513, 1511, 1511, 1511, 
	1490, 1617, 1616, 1618, 1512, 1618, 1513, 1511, 
	1511, 1511, 1490, 1619, 1512, 1619, 1513, 1511, 
	1511, 1511, 1490, 1620, 1512, 1620, 1513, 1511, 
	1511, 1511, 1490, 1621, 1512, 1621, 1513, 1511, 
	1511, 1511, 1490, 1622, 1512, 1622, 1513, 1511, 
	1511, 1511, 1490, 1623, 1512, 1513, 1511, 1511, 
	1511, 1490, 1625, 1624, 1626, 1512, 1626, 1513, 
	1511, 1511, 1511, 1490, 1627, 1512, 1627, 1513, 
	1511, 1511, 1511, 1490, 1628, 1512, 1628, 1513, 
	1511, 1511, 1511, 1490, 1629, 1512, 1629, 1513, 
	1511, 1511, 1511, 1490, 1630, 1512, 1513, 1511, 
	1511, 1511, 1490, 1632, 1633, 1631, 1635, 1634, 
	1636, 1512, 1636, 1513, 1511, 1511, 1511, 1490, 
	1637, 1512, 1637, 1513, 1511, 1511, 1511, 1490, 
	1638, 1512, 1638, 1513, 1511, 1511, 1511, 1490, 
	1639, 1512, 1513, 1511, 1511, 1511, 1490, 1641, 
	1640, 1642, 1512, 1642, 1513, 1511, 1511, 1511, 
	1490, 1643, 1512, 1643, 1513, 1511, 1511, 1511, 
	1490, 1644, 1512, 1644, 1513, 1511, 1511, 1511, 
	1490, 1645, 1512, 1513, 1511, 1511, 1511, 1490, 
	1647, 1646, 1648, 1649, 1650, 1651, 1652, 1653, 
	1654, 1655, 1656, 1657, 1658, 448, 1649, 1650, 
	1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 
	1489, 753, 754, 753, 754, 1659, 756, 757, 
	756, 757, 1660, 794, 795, 794, 795, 1661, 
	541, 1489, 1662, 1663, 1664, 1665, 1666, 1667, 
	946, 1668, 929, 1669, 1670, 1671, 1663, 1664, 
	1665, 1666, 1667, 946, 1668, 929, 1669, 1670, 
	1671, 1489, 1662, 1663, 1664, 1665, 1666, 1667, 
	946, 1668, 929, 1669, 1670, 1671, 1663, 1664, 
	1665, 1666, 1667, 946, 1668, 929, 1669, 1670, 
	1671, 1672, 1489, 1675, 1676, 1677, 1680, 1680, 
	1679, 1673, 1674, 1678, 1679, 1679, 1679, 1679, 
	1679, 1489, 1001, 1002, 1003, 990, 990, 990, 
	990, 1005, 990, 999, 1000, 1004, 990, 1005, 
	1005, 990, 1005, 1005, 1005, 1681, 993, 994, 
	995, 989, 998, 989, 989, 997, 990, 991, 
	992, 996, 990, 997, 997, 989, 997, 997, 
	997, 1681, 1683, 1684, 1685, 1686, 1682, 1688, 
	1689, 1687, 1025, 1687, 1031, 1687, 1691, 1692, 
	1693, 1694, 1690, 1696, 1697, 1695, 1037, 1695, 
	1046, 1695, 1699, 1700, 1698, 1702, 1703, 1704, 
	1703, 1704, 1701, 1705, 1706, 1707, 1706, 1707, 
	1701, 0
};

static const short _dtext_trans_targs[] = {
	1100, 1101, 1, 1100, 2, 3, 12, 4, 
	7, 5, 6, 1103, 8, 9, 10, 11, 
	1100, 13, 15, 14, 16, 17, 18, 19, 
	1105, 1106, 20, 21, 23, 24, 25, 26, 
	27, 28, 29, 30, 31, 1108, 33, 38, 
	34, 35, 36, 37, 1100, 39, 40, 41, 
	42, 1110, 43, 43, 1109, 1100, 1100, 44, 
	1100, 1100, 45, 47, 48, 49, 50, 51, 
	52, 54, 1112, 53, 52, 54, 1111, 53, 
	1111, 56, 57, 58, 59, 60, 61, 1113, 
	1100, 1100, 62, 64, 65, 66, 67, 68, 
	69, 1114, 70, 72, 1100, 74, 1116, 75, 
	75, 1116, 77, 82, 78, 79, 80, 81, 
	83, 84, 85, 86, 87, 87, 89, 90, 
	91, 92, 93, 94, 96, 95, 94, 96, 
	95, 98, 99, 100, 101, 102, 103, 105, 
	106, 107, 108, 110, 111, 112, 113, 114, 
	115, 116, 118, 120, 121, 120, 127, 122, 
	123, 122, 123, 124, 125, 126, 1100, 121, 
	128, 127, 121, 128, 1119, 130, 131, 132, 
	133, 138, 1119, 1119, 1119, 134, 135, 136, 
	137, 1119, 1119, 141, 1119, 1119, 143, 144, 
	145, 146, 139, 1119, 149, 150, 151, 152, 
	1122, 1124, 157, 1122, 158, 1127, 160, 1122, 
	161, 1122, 162, 163, 181, 164, 167, 176, 
	165, 166, 1130, 168, 169, 170, 171, 172, 
	173, 174, 175, 1122, 177, 178, 179, 180, 
	1122, 182, 184, 192, 183, 185, 186, 187, 
	188, 189, 190, 191, 193, 194, 195, 196, 
	1122, 198, 199, 205, 200, 201, 202, 203, 
	204, 1122, 206, 207, 208, 1122, 1122, 1122, 
	210, 211, 217, 212, 213, 214, 215, 216, 
	218, 219, 220, 222, 221, 1132, 1133, 224, 
	254, 261, 225, 235, 241, 246, 226, 227, 
	228, 229, 230, 231, 232, 233, 234, 1134, 
	236, 237, 238, 239, 240, 1135, 242, 243, 
	244, 245, 247, 248, 249, 250, 251, 252, 
	1122, 253, 255, 256, 257, 258, 259, 1122, 
	260, 260, 1122, 262, 263, 264, 265, 266, 
	267, 269, 270, 1136, 271, 271, 1136, 273, 
	288, 295, 274, 280, 275, 276, 277, 278, 
	279, 281, 282, 283, 284, 285, 286, 287, 
	289, 290, 291, 292, 293, 294, 294, 296, 
	297, 298, 299, 300, 301, 303, 304, 305, 
	304, 311, 306, 307, 306, 307, 308, 309, 
	310, 1122, 305, 312, 311, 305, 312, 313, 
	314, 315, 1138, 1139, 349, 374, 1122, 1138, 
	316, 319, 321, 323, 324, 317, 318, 320, 
	322, 325, 326, 1139, 327, 330, 332, 334, 
	335, 328, 329, 331, 333, 336, 337, 338, 
	339, 340, 341, 343, 345, 348, 1140, 342, 
	344, 346, 347, 350, 351, 352, 353, 373, 
	354, 355, 356, 358, 359, 357, 360, 361, 
	362, 363, 366, 368, 371, 1141, 364, 365, 
	372, 367, 369, 370, 1142, 375, 376, 375, 
	1122, 377, 378, 379, 380, 383, 381, 382, 
	385, 386, 385, 388, 399, 409, 422, 426, 
	429, 386, 387, 388, 389, 392, 393, 387, 
	389, 392, 393, 390, 391, 397, 398, 390, 
	392, 393, 391, 1144, 394, 393, 396, 394, 
	395, 396, 395, 396, 1146, 397, 400, 401, 
	402, 405, 401, 402, 405, 403, 404, 406, 
	407, 403, 405, 404, 405, 1148, 406, 408, 
	408, 410, 411, 412, 413, 414, 415, 416, 
	417, 416, 417, 418, 419, 420, 421, 418, 
	419, 420, 399, 423, 424, 425, 402, 405, 
	425, 402, 427, 428, 430, 433, 434, 435, 
	431, 432, 431, 432, 436, 438, 439, 441, 
	442, 477, 478, 480, 481, 439, 440, 444, 
	449, 440, 441, 442, 477, 478, 480, 471, 
	449, 471, 443, 450, 476, 445, 444, 447, 
	448, 445, 446, 447, 448, 446, 448, 1150, 
	1152, 451, 444, 457, 452, 451, 454, 455, 
	459, 465, 468, 471, 457, 452, 453, 457, 
	453, 454, 455, 459, 465, 468, 457, 456, 
	458, 1154, 1156, 460, 461, 462, 463, 464, 
	466, 467, 456, 469, 470, 472, 473, 474, 
	475, 472, 1157, 479, 482, 483, 484, 485, 
	487, 1163, 489, 1169, 491, 1177, 493, 1183, 
	1122, 1184, 496, 1190, 498, 499, 500, 502, 
	503, 501, 504, 505, 506, 507, 510, 512, 
	515, 1195, 508, 509, 1196, 1197, 549, 538, 
	511, 513, 514, 1122, 516, 519, 521, 523, 
	524, 517, 518, 520, 522, 525, 526, 527, 
	530, 532, 534, 535, 528, 529, 531, 533, 
	536, 537, 539, 540, 541, 543, 545, 548, 
	1198, 542, 544, 546, 547, 1199, 551, 1212, 
	553, 554, 555, 556, 557, 558, 559, 560, 
	1216, 562, 563, 564, 563, 565, 1222, 567, 
	1226, 569, 1229, 571, 1236, 573, 1242, 1122, 
	575, 1243, 577, 1248, 579, 1253, 581, 582, 
	583, 584, 1122, 1122, 1122, 1122, 586, 1122, 
	1122, 588, 593, 589, 590, 591, 592, 1122, 
	594, 595, 596, 597, 1256, 598, 598, 1255, 
	1122, 1122, 599, 1122, 1122, 600, 602, 603, 
	604, 605, 606, 607, 609, 1122, 608, 607, 
	609, 1122, 608, 1122, 611, 612, 613, 614, 
	621, 615, 616, 617, 618, 619, 620, 620, 
	1122, 1122, 624, 625, 626, 627, 628, 629, 
	1257, 1122, 1122, 630, 632, 633, 634, 635, 
	1122, 637, 1122, 638, 639, 640, 641, 642, 
	643, 1122, 645, 1122, 647, 1122, 648, 649, 
	650, 690, 651, 671, 672, 682, 652, 663, 
	652, 653, 653, 654, 655, 662, 655, 656, 
	657, 656, 657, 658, 659, 660, 661, 1122, 
	664, 665, 666, 667, 670, 668, 669, 671, 
	654, 673, 674, 673, 675, 676, 677, 678, 
	681, 679, 680, 683, 684, 685, 686, 689, 
	687, 688, 691, 703, 691, 692, 698, 692, 
	693, 694, 695, 696, 697, 1122, 699, 700, 
	701, 702, 704, 705, 706, 707, 710, 708, 
	709, 712, 713, 714, 715, 721, 716, 717, 
	718, 719, 720, 723, 724, 725, 726, 727, 
	728, 729, 730, 737, 730, 731, 732, 733, 
	733, 734, 735, 736, 1122, 738, 739, 740, 
	741, 744, 742, 743, 746, 755, 747, 748, 
	749, 750, 751, 752, 753, 754, 757, 762, 
	758, 759, 760, 761, 763, 764, 765, 766, 
	767, 767, 769, 770, 771, 772, 773, 774, 
	775, 777, 776, 775, 777, 776, 779, 780, 
	781, 782, 786, 783, 784, 785, 1122, 788, 
	789, 790, 791, 792, 793, 795, 802, 796, 
	797, 798, 799, 800, 801, 803, 804, 805, 
	806, 808, 811, 811, 1122, 813, 814, 825, 
	826, 827, 829, 831, 834, 1263, 835, 815, 
	816, 817, 819, 821, 823, 1262, 818, 820, 
	822, 824, 828, 830, 832, 833, 812, 838, 
	840, 842, 843, 836, 837, 839, 841, 844, 
	1264, 847, 848, 849, 850, 851, 1264, 853, 
	854, 855, 856, 857, 1268, 859, 860, 861, 
	862, 863, 864, 865, 866, 1268, 868, 869, 
	870, 871, 872, 873, 874, 875, 1272, 877, 
	885, 878, 879, 880, 881, 882, 883, 884, 
	1272, 886, 890, 894, 898, 887, 888, 889, 
	1272, 891, 892, 893, 1272, 895, 896, 897, 
	1272, 1272, 900, 901, 902, 1272, 912, 903, 
	904, 903, 905, 904, 905, 906, 909, 911, 
	907, 907, 908, 902, 1272, 910, 910, 902, 
	911, 1272, 913, 914, 915, 916, 917, 1272, 
	918, 919, 918, 920, 919, 920, 921, 924, 
	926, 922, 922, 923, 917, 1272, 925, 925, 
	917, 926, 1272, 928, 942, 953, 977, 929, 
	930, 931, 932, 1272, 933, 934, 933, 935, 
	934, 935, 936, 939, 941, 937, 937, 938, 
	932, 1272, 940, 940, 932, 941, 1272, 943, 
	1272, 944, 945, 944, 946, 945, 946, 947, 
	950, 952, 948, 948, 949, 943, 1272, 951, 
	951, 943, 952, 1272, 954, 1272, 964, 955, 
	956, 955, 957, 956, 957, 958, 961, 963, 
	959, 959, 960, 954, 1272, 962, 962, 954, 
	963, 1272, 965, 966, 967, 1272, 968, 969, 
	968, 970, 969, 970, 971, 974, 976, 972, 
	972, 973, 967, 1272, 975, 975, 967, 976, 
	1272, 978, 1272, 979, 980, 979, 981, 980, 
	981, 982, 985, 987, 983, 983, 984, 978, 
	1272, 986, 986, 978, 987, 1272, 989, 997, 
	990, 991, 992, 993, 994, 995, 996, 998, 
	1002, 1006, 1010, 999, 1000, 1001, 1003, 1004, 
	1005, 1007, 1008, 1009, 1012, 1013, 1014, 1024, 
	1015, 1016, 1015, 1017, 1016, 1017, 1018, 1021, 
	1023, 1019, 1019, 1020, 1014, 1022, 1022, 1014, 
	1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 
	1030, 1032, 1031, 1032, 1033, 1036, 1038, 1034, 
	1034, 1035, 1029, 1037, 1037, 1029, 1038, 1040, 
	1054, 1065, 1089, 1041, 1042, 1043, 1044, 1045, 
	1046, 1045, 1047, 1046, 1047, 1048, 1051, 1053, 
	1049, 1049, 1050, 1044, 1052, 1052, 1044, 1053, 
	1055, 1056, 1057, 1056, 1058, 1057, 1058, 1059, 
	1062, 1064, 1060, 1060, 1061, 1055, 1063, 1063, 
	1055, 1064, 1066, 1076, 1067, 1068, 1067, 1069, 
	1068, 1069, 1070, 1073, 1075, 1071, 1071, 1072, 
	1066, 1074, 1074, 1066, 1075, 1077, 1078, 1079, 
	1080, 1081, 1080, 1082, 1081, 1082, 1083, 1086, 
	1088, 1084, 1084, 1085, 1079, 1087, 1087, 1079, 
	1088, 1090, 1091, 1092, 1091, 1093, 1092, 1093, 
	1094, 1097, 1099, 1095, 1095, 1096, 1090, 1098, 
	1098, 1090, 1099, 1100, 1102, 1104, 1107, 1115, 
	1117, 1118, 1100, 1100, 1100, 1100, 1105, 22, 
	32, 46, 55, 63, 71, 1100, 1100, 1100, 
	1100, 1111, 1100, 1100, 1100, 73, 1100, 1116, 
	76, 88, 97, 104, 109, 117, 119, 1119, 
	1119, 1120, 1121, 1119, 129, 140, 142, 147, 
	148, 153, 154, 155, 156, 1122, 1123, 1125, 
	1126, 1127, 1128, 1129, 1122, 1137, 1143, 0, 
	1158, 1170, 1178, 1185, 1191, 1201, 1213, 1217, 
	1230, 1237, 1244, 1249, 1254, 1258, 1259, 1260, 
	1261, 1122, 1122, 159, 1122, 1131, 221, 223, 
	268, 272, 302, 1122, 1122, 197, 209, 1122, 
	1132, 1122, 1122, 1122, 1136, 313, 1122, 1143, 
	384, 437, 1122, 1145, 1122, 1145, 1122, 1147, 
	1122, 1147, 1149, 1149, 1122, 1151, 1122, 1151, 
	1122, 1153, 1122, 1153, 1155, 1155, 1152, 1159, 
	1164, 1160, 1161, 1162, 486, 1122, 1163, 1165, 
	1166, 1167, 1168, 488, 1122, 1169, 1171, 1172, 
	1173, 1174, 1175, 1176, 490, 1122, 1177, 1179, 
	1180, 1181, 1182, 492, 1122, 494, 1183, 1122, 
	1184, 1186, 1187, 1188, 1189, 495, 1122, 1190, 
	1192, 1193, 1194, 497, 1200, 1122, 1202, 1203, 
	1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 
	550, 1122, 1212, 1214, 1215, 552, 1122, 1216, 
	1218, 1223, 1219, 1220, 1221, 561, 1122, 1222, 
	1224, 1227, 1225, 566, 1122, 1226, 1228, 568, 
	1122, 1229, 1231, 1232, 1233, 1234, 1235, 570, 
	1122, 1236, 1238, 1239, 1240, 1241, 572, 1122, 
	574, 1242, 1122, 1243, 1245, 1246, 1247, 576, 
	1122, 1248, 1250, 1251, 1252, 578, 1122, 1253, 
	580, 585, 587, 601, 610, 622, 623, 631, 
	636, 644, 646, 1122, 1122, 1122, 711, 722, 
	745, 756, 768, 778, 787, 794, 807, 809, 
	810, 812, 836, 837, 839, 841, 844, 813, 
	845, 1122, 1264, 1264, 1265, 1266, 1267, 1264, 
	846, 852, 1268, 1268, 1269, 1270, 1271, 1268, 
	858, 867, 1272, 1273, 1274, 1272, 876, 899, 
	927, 988, 1011, 1039
};

static const short _dtext_trans_actions[] = {
	259, 25, 0, 261, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	223, 0, 0, 0, 0, 0, 0, 0, 
	5, 5, 3, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 227, 0, 0, 0, 
	0, 25, 1, 0, 401, 255, 217, 0, 
	253, 215, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 263, 0, 
	3, 0, 0, 0, 0, 0, 0, 25, 
	257, 221, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 225, 3, 429, 5, 
	0, 7, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 263, 263, 1, 5, 
	317, 0, 7, 0, 0, 0, 219, 3, 
	3, 0, 0, 0, 49, 0, 0, 0, 
	0, 0, 29, 33, 37, 0, 0, 0, 
	0, 41, 27, 0, 31, 35, 0, 0, 
	0, 0, 0, 39, 0, 0, 0, 0, 
	163, 419, 0, 159, 0, 410, 0, 161, 
	0, 157, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 89, 0, 0, 0, 0, 
	103, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	155, 0, 0, 0, 0, 0, 0, 0, 
	0, 79, 0, 0, 0, 107, 105, 75, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 5, 5, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	93, 0, 0, 0, 0, 0, 0, 97, 
	1, 0, 272, 0, 0, 0, 0, 0, 
	0, 1, 3, 429, 5, 0, 7, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 263, 
	263, 1, 5, 317, 0, 7, 0, 0, 
	0, 87, 3, 3, 0, 0, 0, 0, 
	3, 0, 493, 506, 5, 0, 145, 404, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 497, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 497, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 497, 0, 0, 
	0, 0, 0, 0, 497, 5, 5, 0, 
	335, 0, 0, 0, 0, 0, 0, 0, 
	0, 5, 5, 5, 5, 5, 5, 5, 
	5, 0, 7, 0, 7, 7, 7, 0, 
	0, 0, 0, 9, 11, 11, 0, 0, 
	11, 11, 0, 0, 13, 362, 362, 0, 
	15, 15, 0, 0, 0, 0, 7, 437, 
	326, 437, 362, 13, 362, 9, 359, 359, 
	0, 0, 359, 0, 0, 0, 0, 15, 
	0, 7, 13, 0, 0, 0, 0, 7, 
	7, 0, 0, 9, 11, 11, 0, 0, 
	0, 0, 0, 7, 13, 329, 7, 329, 
	0, 0, 7, 0, 0, 0, 0, 0, 
	7, 7, 0, 0, 0, 0, 5, 5, 
	5, 5, 5, 5, 5, 0, 7, 7, 
	7, 0, 0, 0, 0, 0, 0, 0, 
	0, 7, 0, 7, 7, 9, 356, 9, 
	356, 0, 11, 0, 11, 0, 0, 0, 
	0, 433, 320, 433, 9, 356, 9, 9, 
	9, 9, 9, 9, 356, 0, 323, 323, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	323, 0, 7, 7, 9, 0, 0, 0, 
	0, 7, 9, 7, 9, 9, 9, 9, 
	0, 0, 7, 0, 0, 0, 0, 0, 
	0, 1, 0, 1, 0, 1, 0, 398, 
	143, 5, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 407, 0, 0, 25, 407, 0, 0, 
	0, 0, 0, 147, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	407, 0, 0, 0, 0, 407, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 1, 3, 0, 0, 5, 0, 
	1, 0, 1, 0, 1, 0, 398, 141, 
	0, 5, 0, 1, 0, 1, 0, 0, 
	0, 0, 59, 63, 67, 71, 0, 57, 
	81, 0, 0, 0, 0, 0, 0, 77, 
	0, 0, 0, 0, 25, 1, 0, 401, 
	151, 85, 0, 149, 83, 0, 0, 0, 
	0, 0, 0, 0, 0, 101, 1, 1, 
	1, 425, 0, 275, 0, 0, 0, 0, 
	0, 0, 0, 0, 3, 0, 5, 0, 
	338, 61, 0, 0, 0, 0, 0, 0, 
	25, 153, 95, 0, 0, 0, 0, 0, 
	99, 0, 65, 0, 0, 0, 0, 0, 
	0, 91, 0, 73, 0, 69, 0, 0, 
	0, 0, 0, 5, 0, 5, 5, 5, 
	0, 7, 0, 0, 1, 1, 0, 3, 
	3, 0, 0, 0, 0, 0, 0, 51, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	7, 5, 5, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 0, 3, 3, 0, 
	0, 0, 0, 0, 0, 55, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 0, 3, 0, 5, 
	0, 7, 0, 0, 53, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 266, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 269, 0, 0, 0, 
	0, 0, 0, 0, 0, 489, 0, 0, 
	0, 0, 0, 0, 0, 489, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	173, 0, 0, 0, 0, 0, 165, 0, 
	0, 0, 0, 0, 183, 0, 0, 0, 
	0, 0, 0, 0, 0, 175, 0, 0, 
	0, 0, 0, 0, 0, 0, 213, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	187, 0, 0, 0, 0, 0, 0, 0, 
	207, 0, 0, 0, 197, 0, 0, 0, 
	193, 203, 0, 0, 0, 189, 0, 1, 
	3, 0, 3, 0, 0, 0, 0, 5, 
	5, 0, 7, 19, 380, 5, 0, 332, 
	0, 445, 0, 0, 0, 0, 0, 185, 
	1, 3, 0, 3, 0, 0, 0, 0, 
	5, 5, 0, 7, 19, 377, 5, 0, 
	332, 0, 441, 0, 0, 0, 0, 0, 
	0, 0, 0, 195, 1, 3, 0, 3, 
	0, 0, 0, 0, 5, 5, 0, 7, 
	19, 386, 5, 0, 332, 0, 453, 0, 
	205, 1, 3, 0, 3, 0, 0, 0, 
	0, 5, 5, 0, 7, 19, 395, 5, 
	0, 332, 0, 465, 0, 199, 0, 1, 
	3, 0, 3, 0, 0, 0, 0, 5, 
	5, 0, 7, 19, 389, 5, 0, 332, 
	0, 457, 0, 0, 0, 191, 1, 3, 
	0, 3, 0, 0, 0, 0, 5, 5, 
	0, 7, 19, 383, 5, 0, 332, 0, 
	449, 0, 201, 1, 3, 0, 3, 0, 
	0, 0, 0, 5, 5, 0, 7, 19, 
	392, 5, 0, 332, 0, 461, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 3, 0, 3, 0, 0, 0, 0, 
	5, 5, 0, 7, 19, 5, 0, 332, 
	0, 0, 0, 0, 0, 0, 1, 3, 
	0, 3, 0, 0, 0, 0, 5, 5, 
	0, 7, 19, 5, 0, 332, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	3, 0, 3, 0, 0, 0, 0, 5, 
	5, 0, 7, 19, 5, 0, 332, 0, 
	0, 1, 3, 0, 3, 0, 0, 0, 
	0, 5, 5, 0, 7, 19, 5, 0, 
	332, 0, 0, 0, 1, 3, 0, 3, 
	0, 0, 0, 0, 5, 5, 0, 7, 
	19, 5, 0, 332, 0, 0, 0, 0, 
	1, 3, 0, 3, 0, 0, 0, 0, 
	5, 5, 0, 7, 19, 5, 0, 332, 
	0, 0, 1, 3, 0, 3, 0, 0, 
	0, 0, 5, 5, 0, 7, 19, 5, 
	0, 332, 0, 229, 25, 398, 25, 25, 
	25, 25, 249, 251, 247, 353, 0, 0, 
	0, 0, 0, 0, 0, 233, 239, 237, 
	243, 0, 241, 245, 235, 1, 231, 0, 
	0, 0, 0, 0, 0, 0, 0, 45, 
	43, 25, 25, 47, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 111, 0, 422, 
	422, 416, 422, 413, 109, 422, 485, 0, 
	485, 485, 485, 485, 485, 485, 485, 485, 
	485, 485, 485, 485, 501, 501, 422, 422, 
	422, 139, 137, 0, 135, 410, 1, 0, 
	0, 0, 0, 131, 133, 0, 0, 350, 
	0, 127, 129, 125, 0, 1, 113, 419, 
	3, 3, 477, 17, 371, 0, 481, 17, 
	374, 0, 17, 0, 473, 13, 368, 0, 
	469, 13, 365, 0, 13, 0, 362, 419, 
	419, 419, 419, 419, 0, 302, 0, 419, 
	419, 419, 419, 0, 299, 0, 419, 419, 
	419, 419, 419, 419, 0, 287, 0, 419, 
	419, 419, 419, 0, 290, 3, 25, 341, 
	0, 419, 419, 419, 419, 0, 281, 0, 
	419, 419, 419, 0, 419, 115, 419, 419, 
	419, 419, 419, 419, 419, 419, 419, 419, 
	0, 305, 0, 419, 419, 0, 308, 0, 
	419, 419, 419, 419, 419, 0, 347, 0, 
	419, 419, 419, 0, 293, 0, 419, 0, 
	278, 0, 419, 419, 419, 419, 419, 0, 
	311, 0, 419, 419, 419, 419, 0, 284, 
	3, 25, 344, 0, 419, 419, 419, 0, 
	296, 0, 419, 419, 419, 0, 314, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 121, 119, 123, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 117, 169, 167, 25, 25, 25, 171, 
	0, 0, 179, 177, 25, 25, 25, 181, 
	0, 0, 209, 25, 25, 211, 0, 0, 
	0, 0, 0, 0
};

static const short _dtext_to_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 21, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 21, 
	0, 0, 21, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	21, 0, 0, 0, 21, 0, 0, 0, 
	21, 0, 0
};

static const short _dtext_from_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 23, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 23, 
	0, 0, 23, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	23, 0, 0, 0, 23, 0, 0, 0, 
	23, 0, 0
};

static const short _dtext_eof_trans[] = {
	0, 1, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 54, 57, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 81, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 157, 157, 157, 
	157, 157, 157, 157, 157, 185, 185, 188, 
	185, 192, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 233, 233, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 233, 233, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 194, 194, 194, 
	194, 194, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 194, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 194, 185, 
	185, 185, 185, 185, 185, 185, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 185, 185, 185, 185, 185, 185, 
	194, 185, 185, 185, 185, 185, 185, 185, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 192, 192, 192, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	188, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 188, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 188, 188, 
	188, 188, 188, 188, 188, 188, 633, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 660, 660, 660, 660, 
	660, 660, 660, 660, 660, 660, 660, 660, 
	660, 660, 660, 660, 660, 660, 660, 660, 
	660, 660, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 720, 720, 
	188, 188, 188, 188, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 753, 
	756, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 794, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 1025, 1025, 
	1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 
	1025, 1025, 1037, 1037, 1037, 1037, 1037, 1037, 
	1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 
	1037, 1037, 1037, 1037, 1055, 1055, 1055, 1055, 
	1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 
	1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 
	1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 
	1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 
	1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 
	1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 
	1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 
	1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 
	1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 
	1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 
	1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 
	1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 
	1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 
	1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 
	1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 
	1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 
	1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 
	1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 
	1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 
	1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 
	1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 
	1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 
	1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 
	1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 
	1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 
	1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 
	1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 
	1055, 1055, 1055, 1055, 0, 1419, 1420, 1421, 
	1420, 1422, 1422, 1420, 1430, 1431, 1432, 1433, 
	1435, 1436, 1437, 1420, 1439, 1420, 1420, 0, 
	1452, 1452, 0, 1490, 1491, 1490, 1490, 185, 
	1490, 1493, 1500, 1501, 1504, 1504, 1506, 1507, 
	1508, 1490, 1511, 1511, 1511, 1511, 1511, 1491, 
	1515, 1517, 1519, 1521, 1515, 1517, 1525, 1527, 
	1529, 1531, 1529, 1531, 1529, 1529, 1491, 1491, 
	1491, 1491, 1491, 1542, 1491, 1491, 1491, 1491, 
	1491, 1549, 1491, 1491, 1491, 1491, 1491, 1491, 
	1491, 1558, 1491, 1491, 1491, 1491, 1491, 1565, 
	1568, 1491, 1491, 1491, 1491, 1491, 1575, 1491, 
	1491, 1491, 1491, 1582, 1582, 1582, 1582, 1582, 
	1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 
	1491, 1491, 1491, 1491, 1594, 1491, 1491, 1491, 
	1599, 1491, 1491, 1491, 1491, 1491, 1607, 1491, 
	1491, 1491, 1613, 1491, 1491, 1617, 1491, 1491, 
	1491, 1491, 1491, 1491, 1625, 1491, 1491, 1491, 
	1491, 1491, 1632, 1635, 1491, 1491, 1491, 1491, 
	1641, 1491, 1491, 1491, 1491, 1647, 1490, 1660, 
	1661, 1662, 1490, 1490, 1490, 1490, 1682, 1682, 
	0, 1688, 1688, 1688, 0, 1696, 1696, 1696, 
	0, 1702, 1702
};

static const int dtext_start = 1100;
static const int dtext_first_final = 1100;
static const int dtext_error = 0;

static const int dtext_en_basic_inline = 1119;
static const int dtext_en_inline = 1122;
static const int dtext_en_code = 1264;
static const int dtext_en_nodtext = 1268;
static const int dtext_en_table = 1272;
static const int dtext_en_main = 1100;


#line 741 "ext/dtext/dtext.cpp.rl"

static void dstack_push(StateMachine * sm, element_t element) {
  sm->dstack.push_back(element);
}

static element_t dstack_pop(StateMachine * sm) {
  if (sm->dstack.empty()) {
    g_debug("dstack pop empty stack");
    return DSTACK_EMPTY;
  } else {
    auto element = sm->dstack.back();
    sm->dstack.pop_back();
    return element;
  }
}

static element_t dstack_peek(const StateMachine * sm) {
  return sm->dstack.empty() ? DSTACK_EMPTY : sm->dstack.back();
}

static bool dstack_check(const StateMachine * sm, element_t expected_element) {
  return dstack_peek(sm) == expected_element;
}

// Return true if the given tag is currently open.
static bool dstack_is_open(const StateMachine * sm, element_t element) {
  return std::find(sm->dstack.begin(), sm->dstack.end(), element) != sm->dstack.end();
}

static int dstack_count(const StateMachine * sm, element_t element) {
  return std::count(sm->dstack.begin(), sm->dstack.end(), element);
}

static bool is_internal_url(StateMachine * sm, const std::string_view url) {
  if (url.starts_with("/")) {
    return true;
  } else if (sm->options.domain.empty() || url.empty()) {
    return false;
  } else {
    // Matches the domain name part of a URL.
    static const std::regex url_regex("^https?://(?:[^/?#]*@)?([^/?#:]+)", std::regex_constants::icase);

    std::match_results<std::string_view::const_iterator> matches;
    std::regex_search(url.begin(), url.end(), matches, url_regex);
    return matches[1] == sm->options.domain;
  }
}

static void append(StateMachine * sm, const auto c) {
  sm->output += c;
}

static void append(StateMachine * sm, const char * a, const char * b) {
  append(sm, std::string_view(a, b));
}

static void append_html_escaped(StateMachine * sm, char s) {
  switch (s) {
    case '<': append(sm, "&lt;"); break;
    case '>': append(sm, "&gt;"); break;
    case '&': append(sm, "&amp;"); break;
    case '"': append(sm, "&quot;"); break;
    default:  append(sm, s);
  }
}

static void append_html_escaped(StateMachine * sm, const std::string_view string) {
  for (const unsigned char c : string) {
    append_html_escaped(sm, c);
  }
}

static void append_uri_escaped(StateMachine * sm, const std::string_view string) {
  static const char hex[] = "0123456789ABCDEF";

  for (const unsigned char c : string) {
    if ((c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == '-' || c == '_' || c == '.' || c == '~') {
      append(sm, c);
    } else {
      append(sm, '%');
      append(sm, hex[c >> 4]);
      append(sm, hex[c & 0x0F]);
    }
  }
}

static void append_relative_url(StateMachine * sm, const auto url) {
  if ((url[0] == '/' || url[0] == '#') && !sm->options.base_url.empty()) {
    append_html_escaped(sm, sm->options.base_url);
  }

  append_html_escaped(sm, url);
}

static void append_absolute_link(StateMachine * sm, const std::string_view url, const std::string_view title, bool internal_url, bool escape_title) {
  if (internal_url) {
    append(sm, "<a class=\"dtext-link\" href=\"");
  } else if (url == title) {
    append(sm, "<a rel=\"external nofollow noreferrer\" class=\"dtext-link dtext-external-link\" href=\"");
  } else {
    append(sm, "<a rel=\"external nofollow noreferrer\" class=\"dtext-link dtext-external-link dtext-named-external-link\" href=\"");
  }

  append_html_escaped(sm, url);
  append(sm, "\">");

  if (escape_title) {
    append_html_escaped(sm, title);
  } else {
    append(sm, title);
  }

  append(sm, "</a>");
}

static void append_mention(StateMachine * sm, const std::string_view name) {
  append(sm, "<a class=\"dtext-link dtext-user-mention-link\" data-user-name=\"");
  append_html_escaped(sm, name);
  append(sm, "\" href=\"");
  append_relative_url(sm, "/users?name=");
  append_uri_escaped(sm, name);
  append(sm, "\">@");
  append_html_escaped(sm, name);
  append(sm, "</a>");
}

static void append_id_link(StateMachine * sm, const char * title, const char * id_name, const char * url, const std::string_view id) {
  if (url[0] == '/') {
    append(sm, "<a class=\"dtext-link dtext-id-link dtext-");
    append(sm, id_name);
    append(sm, "-id-link\" href=\"");
    append_relative_url(sm, url);
  } else {
    append(sm, "<a rel=\"external nofollow noreferrer\" class=\"dtext-link dtext-id-link dtext-");
    append(sm, id_name);
    append(sm, "-id-link\" href=\"");
    append_html_escaped(sm, url);
  }

  append_uri_escaped(sm, id);
  append(sm, "\">");
  append(sm, title);
  append(sm, " #");
  append_html_escaped(sm, id);
  append(sm, "</a>");
}

static void append_bare_unnamed_url(StateMachine * sm, const std::string_view url) {
  auto [trimmed_url, leftovers] = trim_url(url);
  append_unnamed_url(sm, trimmed_url);
  append_html_escaped(sm, leftovers);
}

static void append_unnamed_url(StateMachine * sm, const std::string_view url) {
  DText::URL parsed_url(url);

  if (sm->options.internal_domains.find(std::string(parsed_url.domain)) != sm->options.internal_domains.end()) {
    append_internal_url(sm, parsed_url);
  } else {
    append_absolute_link(sm, url, url, parsed_url.domain == sm->options.domain);
  }
}

static void append_internal_url(StateMachine * sm, const DText::URL& url) {
  auto path_components = url.path_components();
  auto query = url.query;
  auto fragment = url.fragment;

  if (path_components.size() == 2) {
    auto controller = path_components.at(0);
    auto id = path_components.at(1);

    if (!id.empty() && std::all_of(id.begin(), id.end(), ::isdigit)) {
      if (controller == "posts" && fragment.empty()) {
        // https://danbooru.donmai.us/posts/6000000#comment_2288996
        return append_id_link(sm, "post", "post", "/posts/", id);
      } else if (controller == "pools" && query.empty()) {
        // https://danbooru.donmai.us/pools/903?page=2
        return append_id_link(sm, "pool", "pool", "/pools/", id);
      } else if (controller == "comments") {
        return append_id_link(sm, "comment", "comment", "/comments/", id);
      } else if (controller == "forum_posts") {
        return append_id_link(sm, "forum", "forum-post", "/forum_posts/", id);
      } else if (controller == "forum_topics" && query.empty() && fragment.empty()) {
        // https://danbooru.donmai.us/forum_topics/1234?page=2
        // https://danbooru.donmai.us/forum_topics/1234#forum_post_5678
        return append_id_link(sm, "topic", "forum-topic", "/forum_topics/", id);
      } else if (controller == "users") {
        return append_id_link(sm, "user", "user", "/users/", id);
      } else if (controller == "artists") {
        return append_id_link(sm, "artist", "artist", "/artists/", id);
      } else if (controller == "notes") {
        return append_id_link(sm, "note", "note", "/notes/", id);
      } else if (controller == "favorite_groups" && query.empty()) {
        // https://danbooru.donmai.us/favorite_groups/1234?page=2
        return append_id_link(sm, "favgroup", "favorite-group", "/favorite_groups/", id);
      } else if (controller == "wiki_pages" && fragment.empty()) {
        // http://danbooru.donmai.us/wiki_pages/10933#dtext-self-upload
        return append_id_link(sm, "wiki", "wiki-page", "/wiki_pages/", id);
      }
    } else if (controller == "wiki_pages" && fragment.empty()) {
      return append_wiki_link(sm, {}, id, {}, id, {});
    }
  } else if (path_components.size() >= 3) {
    // http://danbooru.donmai.us/post/show/1234/touhou
    auto controller = path_components.at(0);
    auto action = path_components.at(1);
    auto id = path_components.at(2);

    if (!id.empty() && std::all_of(id.begin(), id.end(), ::isdigit)) {
      if (controller == "post" && action == "show") {
        return append_id_link(sm, "post", "post", "/posts/", id);
      }
    }
  }

  append_absolute_link(sm, url.url, url.url, url.domain == sm->options.domain);
}

static void append_named_url(StateMachine * sm, const std::string_view url, const std::string_view title) {
  auto parsed_title = sm->parse_basic_inline(title);

  // protocol-relative url; treat `//example.com` like `http://example.com`
  if (url.size() > 2 && url.starts_with("//")) {
    auto full_url = "http:" + std::string(url);
    append_absolute_link(sm, full_url, parsed_title, is_internal_url(sm, full_url), false);
  } else if (url[0] == '/' || url[0] == '#') {
    append(sm, "<a class=\"dtext-link\" href=\"");
    append_relative_url(sm, url);
    append(sm, "\">");
    append(sm, parsed_title);
    append(sm, "</a>");
  } else if (url == title) {
    append_unnamed_url(sm, url);
  } else {
    append_absolute_link(sm, url, parsed_title, is_internal_url(sm, url), false);
  }
}

static void append_bare_named_url(StateMachine * sm, const std::string_view url, std::string_view title) {
  auto [trimmed_url, leftovers] = trim_url(url);
  append_named_url(sm, trimmed_url, title);
  append_html_escaped(sm, leftovers);
}

static void append_post_search_link(StateMachine * sm, const std::string_view prefix, const std::string_view search, const std::string_view title, const std::string_view suffix) {
  auto normalized_title = std::string(title);

  append(sm, "<a class=\"dtext-link dtext-post-search-link\" href=\"");
  append_relative_url(sm, "/posts?tags=");
  append_uri_escaped(sm, search);
  append(sm, "\">");

  // 19{{60s}} -> {{60s|1960s}}
  if (!prefix.empty()) {
    normalized_title.insert(0, prefix);
  }

  // {{pokemon_(creature)|}} -> {{pokemon_(creature)|pokemon}}
  if (title.empty()) {
    std::regex_replace(std::back_inserter(normalized_title), search.begin(), search.end(), tag_qualifier_regex, "");
  }

  // {{cat}}s -> {{cat|cats}}
  if (!suffix.empty()) {
    normalized_title.append(suffix);
  }

  append_html_escaped(sm, normalized_title);
  append(sm, "</a>");

  clear_matches(sm);
}

static void append_wiki_link(StateMachine * sm, const std::string_view prefix, const std::string_view tag, const std::string_view anchor, const std::string_view title, const std::string_view suffix) {
  auto normalized_tag = std::string(tag);
  auto title_string = std::string(title);

  // "Kantai Collection" -> "kantai_collection"
  std::transform(normalized_tag.cbegin(), normalized_tag.cend(), normalized_tag.begin(), [](unsigned char c) { return c == ' ' ? '_' : std::tolower(c); });

  // [[2019]] -> [[~2019]]
  if (std::all_of(normalized_tag.cbegin(), normalized_tag.cend(), ::isdigit)) {
    normalized_tag.insert(0, "~");
  }

  // Pipe trick: [[Kaga (Kantai Collection)|]] -> [[kaga_(kantai_collection)|Kaga]]
  if (title_string.empty()) {
    std::regex_replace(std::back_inserter(title_string), tag.cbegin(), tag.cend(), tag_qualifier_regex, "");
  }

  // 19[[60s]] -> [[60s|1960s]]
  if (!prefix.empty()) {
    title_string.insert(0, prefix);
  }

  // [[cat]]s -> [[cat|cats]]
  if (!suffix.empty()) {
    title_string.append(suffix);
  }

  append(sm, "<a class=\"dtext-link dtext-wiki-link\" href=\"");
  append_relative_url(sm, "/wiki_pages/");
  append_uri_escaped(sm, normalized_tag);

  if (!anchor.empty()) {
    std::string normalized_anchor(anchor);
    std::transform(normalized_anchor.begin(), normalized_anchor.end(), normalized_anchor.begin(), [](char c) { return isalnum(c) ? tolower(c) : '-'; });
    append_html_escaped(sm, "#dtext-");
    append_html_escaped(sm, normalized_anchor);
  }

  append(sm, "\">");
  append_html_escaped(sm, title_string);
  append(sm, "</a>");

  sm->wiki_pages.insert(std::string(tag));

  clear_matches(sm);
}

static void append_paged_link(StateMachine * sm, const char * title, const char * tag, const char * href, const char * param) {
  append(sm, tag);
  append_relative_url(sm, href);
  append(sm, sm->a1, sm->a2);
  append(sm, param);
  append(sm, sm->b1, sm->b2);
  append(sm, "\">");
  append(sm, title);
  append(sm, sm->a1, sm->a2);
  append(sm, "/p");
  append(sm, sm->b1, sm->b2);
  append(sm, "</a>");
}

static void append_dmail_key_link(StateMachine * sm) {
  append(sm, "<a class=\"dtext-link dtext-id-link dtext-dmail-id-link\" href=\"");
  append_relative_url(sm, "/dmails/");
  append(sm, sm->a1, sm->a2);
  append(sm, "?key=");
  append_uri_escaped(sm, { sm->b1, sm->b2 });
  append(sm, "\">");
  append(sm, "dmail #");
  append(sm, sm->a1, sm->a2);
  append(sm, "</a>");
}

static void append_code_fence(StateMachine * sm, const std::string_view code, const std::string_view language) {
  if (language.empty()) {
    append_block(sm, "<pre>");
    append_html_escaped(sm, code);
    append_block(sm, "</pre>");
  } else {
    append_block(sm, "<pre class=\"language-");
    append_html_escaped(sm, language);
    append_block(sm, "\">");
    append_html_escaped(sm, code);
    append_block(sm, "</pre>");
  }
}

static void append_inline_code(StateMachine * sm, const std::string_view language = {}) {
  if (language.empty()) {
    dstack_open_element(sm, INLINE_CODE, "<code>");
  } else {
    dstack_open_element(sm, INLINE_CODE, "<code class=\"language-");
    append_html_escaped(sm, language);
    append(sm, "\">");
  }
}

static void append_block_code(StateMachine * sm, const std::string_view language = {}) {
  dstack_close_leaf_blocks(sm);

  if (language.empty()) {
    dstack_open_element(sm, BLOCK_CODE, "<pre>");
  } else {
    dstack_open_element(sm, BLOCK_CODE, "<pre class=\"language-");
    append_html_escaped(sm, language);
    append(sm, "\">");
  }
}

static void append_header(StateMachine * sm, char header, const std::string_view id) {
  static element_t blocks[] = { BLOCK_H1, BLOCK_H2, BLOCK_H3, BLOCK_H4, BLOCK_H5, BLOCK_H6 };
  element_t block = blocks[header - '1'];

  if (id.empty()) {
    dstack_open_element(sm, block, "<h");
    append_block(sm, header);
    append_block(sm, ">");
  } else {
    auto normalized_id = std::string(id);
    std::transform(id.begin(), id.end(), normalized_id.begin(), [](char c) { return isalnum(c) ? tolower(c) : '-'; });

    dstack_open_element(sm, block, "<h");
    append_block(sm, header);
    append_block(sm, " id=\"dtext-");
    append_block(sm, normalized_id);
    append_block(sm, "\">");
  }

  sm->header_mode = true;
}

static void append_block(StateMachine * sm, const auto s) {
  if (!sm->options.f_inline) {
    append(sm, s);
  }
}

static void append_block_html_escaped(StateMachine * sm, const std::string_view string) {
  if (!sm->options.f_inline) {
    append_html_escaped(sm, string);
  }
}

static void append_closing_p(StateMachine * sm) {
  g_debug("append closing p");

  if (sm->output.size() > 4 && sm->output.ends_with("<br>")) {
    g_debug("trim last <br>");
    sm->output.resize(sm->output.size() - 4);
  }

  if (sm->output.size() > 3 && sm->output.ends_with("<p>")) {
    g_debug("trim last <p>");
    sm->output.resize(sm->output.size() - 3);
    return;
  }

  append_block(sm, "</p>");
}

static void dstack_open_element(StateMachine * sm, element_t type, const char * html) {
  g_debug("opening %s", html);

  dstack_push(sm, type);

  if (type >= INLINE) {
    append(sm, html);
  } else {
    append_block(sm, html);
  }
}

static void dstack_open_element(StateMachine * sm, element_t type, std::string_view tag_name, const StateMachine::TagAttributes& tag_attributes) {
  dstack_push(sm, type);
  append_block(sm, "<");
  append_block(sm, tag_name);

  auto& permitted_names = permitted_attribute_names.at(tag_name);
  for (auto& [name, value] : tag_attributes) {
    if (permitted_names.find(name) != permitted_names.end()) {
      auto validate_value = permitted_attribute_values.at(name);

      if (validate_value(value)) {
        append_block(sm, " ");
        append_block_html_escaped(sm, name);
        append_block(sm, "=\"");
        append_block_html_escaped(sm, value);
        append_block(sm, "\"");
      }
    }
  }

  append_block(sm, ">");
  clear_tag_attributes(sm);
}

static bool dstack_close_element(StateMachine * sm, element_t type) {
  if (dstack_check(sm, type)) {
    dstack_rewind(sm);
    return true;
  } else if (type >= INLINE && dstack_peek(sm) >= INLINE) {
    g_debug("out-of-order close %s; closing %s instead", element_names[type], element_names[dstack_peek(sm)]);
    dstack_rewind(sm);
    return true;
  } else if (type >= INLINE) {
    g_debug("out-of-order closing %s", element_names[type]);
    append_html_escaped(sm, { sm->ts, sm->te });
    return false;
  } else {
    g_debug("out-of-order closing %s", element_names[type]);
    append_block_html_escaped(sm, { sm->ts, sm->te });
    return false;
  }
}

// Close the last open tag.
static void dstack_rewind(StateMachine * sm) {
  element_t element = dstack_pop(sm);
  g_debug("dstack rewind %s", element_names[element]);

  switch(element) {
    case BLOCK_P: append_closing_p(sm); break;
    case INLINE_SPOILER: append(sm, "</span>"); break;
    case BLOCK_SPOILER: append_block(sm, "</div>"); break;
    case BLOCK_QUOTE: append_block(sm, "</blockquote>"); break;
    case BLOCK_EXPAND: append_block(sm, "</div></details>"); break;
    case BLOCK_NODTEXT: append_block(sm, "</p>"); break;
    case BLOCK_CODE: append_block(sm, "</pre>"); break;
    case BLOCK_TD: append_block(sm, "</td>"); break;
    case BLOCK_TH: append_block(sm, "</th>"); break;

    case INLINE_NODTEXT: break;
    case INLINE_B: append(sm, "</strong>"); break;
    case INLINE_I: append(sm, "</em>"); break;
    case INLINE_U: append(sm, "</u>"); break;
    case INLINE_S: append(sm, "</s>"); break;
    case INLINE_TN: append(sm, "</span>"); break;
    case INLINE_CENTER: append(sm, "</span>"); break;
    case INLINE_CODE: append(sm, "</code>"); break;

    case BLOCK_TN: append_closing_p(sm); break;
    case BLOCK_CENTER: append_closing_p(sm); break;
    case BLOCK_TABLE: append_block(sm, "</table>"); break;
    case BLOCK_COLGROUP: append_block(sm, "</colgroup>"); break;
    case BLOCK_THEAD: append_block(sm, "</thead>"); break;
    case BLOCK_TBODY: append_block(sm, "</tbody>"); break;
    case BLOCK_TR: append_block(sm, "</tr>"); break;
    case BLOCK_UL: append_block(sm, "</ul>"); break;
    case BLOCK_LI: append_block(sm, "</li>"); break;
    case BLOCK_H6: append_block(sm, "</h6>"); sm->header_mode = false; break;
    case BLOCK_H5: append_block(sm, "</h5>"); sm->header_mode = false; break;
    case BLOCK_H4: append_block(sm, "</h4>"); sm->header_mode = false; break;
    case BLOCK_H3: append_block(sm, "</h3>"); sm->header_mode = false; break;
    case BLOCK_H2: append_block(sm, "</h2>"); sm->header_mode = false; break;
    case BLOCK_H1: append_block(sm, "</h1>"); sm->header_mode = false; break;

    // Should never happen.
    case INLINE: break;
    case DSTACK_EMPTY: break;
  } 
}

// container blocks: [spoiler], [quote], [expand], [tn], [center]
// leaf blocks: [nodtext], [code], [table], [td]?, [th]?, <h1>, <p>, <li>, <ul>
static void dstack_close_leaf_blocks(StateMachine * sm) {
  g_debug("dstack close leaf blocks");

  while (!sm->dstack.empty() && !dstack_check(sm, BLOCK_QUOTE) && !dstack_check(sm, BLOCK_SPOILER) && !dstack_check(sm, BLOCK_EXPAND) && !dstack_check(sm, BLOCK_TN) && !dstack_check(sm, BLOCK_CENTER)) {
    dstack_rewind(sm);
  }
}

// Close all open tags up to and including the given tag.
static void dstack_close_until(StateMachine * sm, element_t element) {
  while (!sm->dstack.empty() && !dstack_check(sm, element)) {
    dstack_rewind(sm);
  }

  dstack_rewind(sm);
}

// Close all remaining open tags.
static void dstack_close_all(StateMachine * sm) {
  while (!sm->dstack.empty()) {
    dstack_rewind(sm);
  }
}

static void dstack_open_list(StateMachine * sm, int depth) {
  g_debug("open list");

  if (dstack_is_open(sm, BLOCK_LI)) {
    dstack_close_until(sm, BLOCK_LI);
  } else {
    dstack_close_leaf_blocks(sm);
  }

  while (dstack_count(sm, BLOCK_UL) < depth) {
    dstack_open_element(sm, BLOCK_UL, "<ul>");
  }

  while (dstack_count(sm, BLOCK_UL) > depth) {
    dstack_close_until(sm, BLOCK_UL);
  }

  dstack_open_element(sm, BLOCK_LI, "<li>");
}

static void dstack_close_list(StateMachine * sm) {
  while (dstack_is_open(sm, BLOCK_UL)) {
    dstack_close_until(sm, BLOCK_UL);
  }
}

static void save_tag_attribute(StateMachine * sm, const std::string_view name, const std::string_view value) {
  sm->tag_attributes[name] = value;
}

static void clear_tag_attributes(StateMachine * sm) {
  sm->tag_attributes.clear();
}

static void clear_matches(StateMachine * sm) {
  sm->a1 = NULL;
  sm->a2 = NULL;
  sm->b1 = NULL;
  sm->b2 = NULL;
  sm->c1 = NULL;
  sm->c2 = NULL;
  sm->d1 = NULL;
  sm->d2 = NULL;
  sm->e1 = NULL;
  sm->e2 = NULL;
}

// True if a mention is allowed to start after this character.
static bool is_mention_boundary(unsigned char c) {
  switch (c) {
    case '\0': return true;
    case '\r': return true;
    case '\n': return true;
    case ' ':  return true;
    case '/':  return true;
    case '"':  return true;
    case '\'': return true;
    case '(':  return true;
    case ')':  return true;
    case '[':  return true;
    case ']':  return true;
    case '{':  return true;
    case '}':  return true;
    default:   return false;
  }
}

// Trim trailing unbalanced ')' characters from the URL.
static std::tuple<std::string_view, std::string_view> trim_url(const std::string_view url) {
  std::string_view trimmed = url;

  while (!trimmed.empty() && trimmed.back() == ')' && std::count(trimmed.begin(), trimmed.end(), ')') > std::count(trimmed.begin(), trimmed.end(), '(')) {
    trimmed.remove_suffix(1);
  }

  return { trimmed, { trimmed.end(), url.end() } };
}

// Replace CRLF sequences with LF.
static void replace_newlines(const std::string_view input, std::string& output) {
  size_t pos, last = 0;

  while (std::string::npos != (pos = input.find("\r\n", last))) {
    output.append(input, last, pos - last);
    output.append("\n");
    last = pos + 2;
  }

  output.append(input, last, pos - last);
}

StateMachine::StateMachine(const auto string, int initial_state, const DTextOptions options) : options(options) {
  // Add null bytes to the beginning and end of the string as start and end of string markers.
  input.reserve(string.size());
  input.append(1, '\0');
  replace_newlines(string, input);
  input.append(1, '\0');

  output.reserve(string.size() * 1.5);
  stack.reserve(16);
  dstack.reserve(16);

  p = input.c_str();
  pb = input.c_str();
  pe = input.c_str() + input.size();
  eof = pe;
  cs = initial_state;
}

std::string StateMachine::parse_inline(const std::string_view dtext) {
  StateMachine sm(dtext, dtext_en_inline, options);
  return sm.parse();
}

std::string StateMachine::parse_basic_inline(const std::string_view dtext) {
  StateMachine sm(dtext, dtext_en_basic_inline, options);
  return sm.parse();
}

StateMachine::ParseResult StateMachine::parse_dtext(const std::string_view dtext, DTextOptions options) {
  StateMachine sm(dtext, dtext_en_main, options);
  return { sm.parse(), sm.wiki_pages };
}

std::string StateMachine::parse() {
  StateMachine* sm = this;
  g_debug("parse '%.*s'", (int)(sm->input.size() - 2), sm->input.c_str() + 1);

  
#line 4563 "ext/dtext/dtext.cpp"
	{
	( sm->top) = 0;
	( sm->ts) = 0;
	( sm->te) = 0;
	( sm->act) = 0;
	}

#line 1432 "ext/dtext/dtext.cpp.rl"
  
#line 4569 "ext/dtext/dtext.cpp"
	{
	int _klen;
	unsigned int _trans;
	short _widec;
	const unsigned char *_acts;
	unsigned int _nacts;
	const short *_keys;

	if ( ( sm->p) == ( sm->pe) )
		goto _test_eof;
	if (  sm->cs == 0 )
		goto _out;
_resume:
	_acts = _dtext_actions + _dtext_from_state_actions[ sm->cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 12:
#line 1 "NONE"
	{( sm->ts) = ( sm->p);}
	break;
#line 4589 "ext/dtext/dtext.cpp"
		}
	}

	_widec = (*( sm->p));
	_klen = _dtext_cond_lengths[ sm->cs];
	_keys = _dtext_cond_keys + (_dtext_cond_offsets[ sm->cs]*2);
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( _widec < _mid[0] )
				_upper = _mid - 2;
			else if ( _widec > _mid[1] )
				_lower = _mid + 2;
			else {
				switch ( _dtext_cond_spaces[_dtext_cond_offsets[ sm->cs] + ((_mid - _keys)>>1)] ) {
	case 0: {
		_widec = (short)(128 + ((*( sm->p)) - -128));
		if ( 
#line 82 "ext/dtext/dtext.cpp.rl"
 is_mention_boundary(p[-1])  ) _widec += 256;
		break;
	}
	case 1: {
		_widec = (short)(640 + ((*( sm->p)) - -128));
		if ( 
#line 83 "ext/dtext/dtext.cpp.rl"
 sm->options.f_mentions  ) _widec += 256;
		break;
	}
	case 2: {
		_widec = (short)(2176 + ((*( sm->p)) - -128));
		if ( 
#line 84 "ext/dtext/dtext.cpp.rl"
 dstack_is_open(sm, BLOCK_QUOTE)  ) _widec += 256;
		break;
	}
	case 3: {
		_widec = (short)(2688 + ((*( sm->p)) - -128));
		if ( 
#line 85 "ext/dtext/dtext.cpp.rl"
 dstack_is_open(sm, BLOCK_EXPAND)  ) _widec += 256;
		break;
	}
	case 4: {
		_widec = (short)(1152 + ((*( sm->p)) - -128));
		if ( 
#line 82 "ext/dtext/dtext.cpp.rl"
 is_mention_boundary(p[-1])  ) _widec += 256;
		if ( 
#line 83 "ext/dtext/dtext.cpp.rl"
 sm->options.f_mentions  ) _widec += 512;
		break;
	}
				}
				break;
			}
		}
	}

	_keys = _dtext_trans_keys + _dtext_key_offsets[ sm->cs];
	_trans = _dtext_index_offsets[ sm->cs];

	_klen = _dtext_single_lengths[ sm->cs];
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( _widec < *_mid )
				_upper = _mid - 1;
			else if ( _widec > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _dtext_range_lengths[ sm->cs];
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( _widec < _mid[0] )
				_upper = _mid - 2;
			else if ( _widec > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _dtext_indicies[_trans];
_eof_trans:
	 sm->cs = _dtext_trans_targs[_trans];

	if ( _dtext_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _dtext_actions + _dtext_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
#line 71 "ext/dtext/dtext.cpp.rl"
	{ sm->a1 = sm->p; }
	break;
	case 1:
#line 72 "ext/dtext/dtext.cpp.rl"
	{ sm->a2 = sm->p; }
	break;
	case 2:
#line 73 "ext/dtext/dtext.cpp.rl"
	{ sm->b1 = sm->p; }
	break;
	case 3:
#line 74 "ext/dtext/dtext.cpp.rl"
	{ sm->b2 = sm->p; }
	break;
	case 4:
#line 75 "ext/dtext/dtext.cpp.rl"
	{ sm->c1 = sm->p; }
	break;
	case 5:
#line 76 "ext/dtext/dtext.cpp.rl"
	{ sm->c2 = sm->p; }
	break;
	case 6:
#line 77 "ext/dtext/dtext.cpp.rl"
	{ sm->d1 = sm->p; }
	break;
	case 7:
#line 78 "ext/dtext/dtext.cpp.rl"
	{ sm->d2 = sm->p; }
	break;
	case 8:
#line 79 "ext/dtext/dtext.cpp.rl"
	{ sm->e1 = sm->p; }
	break;
	case 9:
#line 80 "ext/dtext/dtext.cpp.rl"
	{ sm->e2 = sm->p; }
	break;
	case 10:
#line 86 "ext/dtext/dtext.cpp.rl"
	{ save_tag_attribute(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 }); }
	break;
	case 13:
#line 1 "NONE"
	{( sm->te) = ( sm->p)+1;}
	break;
	case 14:
#line 277 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_B, "<strong>"); }}
	break;
	case 15:
#line 278 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_B); }}
	break;
	case 16:
#line 279 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_I, "<em>"); }}
	break;
	case 17:
#line 280 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_I); }}
	break;
	case 18:
#line 281 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_S, "<s>"); }}
	break;
	case 19:
#line 282 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_S); }}
	break;
	case 20:
#line 283 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_U, "<u>"); }}
	break;
	case 21:
#line 284 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_U); }}
	break;
	case 22:
#line 285 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;}
	break;
	case 23:
#line 286 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ append_html_escaped(sm, (*( sm->p))); }}
	break;
	case 24:
#line 286 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_html_escaped(sm, (*( sm->p))); }}
	break;
	case 25:
#line 286 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{ append_html_escaped(sm, (*( sm->p))); }}
	break;
	case 26:
#line 325 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 31;}
	break;
	case 27:
#line 337 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 34;}
	break;
	case 28:
#line 345 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 36;}
	break;
	case 29:
#line 513 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 69;}
	break;
	case 30:
#line 531 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 70;}
	break;
	case 31:
#line 549 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 72;}
	break;
	case 32:
#line 551 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 73;}
	break;
	case 33:
#line 555 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 74;}
	break;
	case 34:
#line 329 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_named_url(sm, { sm->b1, sm->b2 }, { sm->a1, sm->a2 });
  }}
	break;
	case 35:
#line 333 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_named_url(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 });
  }}
	break;
	case 36:
#line 341 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_unnamed_url(sm, { sm->a1, sm->a2 });
  }}
	break;
	case 37:
#line 349 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("delimited mention: <@%.*s>", (int)(sm->a2 - sm->a1), sm->a1);
    append_mention(sm, { sm->a1, sm->a2 });
  }}
	break;
	case 38:
#line 360 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_B, "<strong>"); }}
	break;
	case 39:
#line 361 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_B); }}
	break;
	case 40:
#line 362 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_I, "<em>"); }}
	break;
	case 41:
#line 363 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_I); }}
	break;
	case 42:
#line 364 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_S, "<s>"); }}
	break;
	case 43:
#line 365 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_S); }}
	break;
	case 44:
#line 366 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_U, "<u>"); }}
	break;
	case 45:
#line 367 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_U); }}
	break;
	case 46:
#line 369 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, INLINE_TN, "<span class=\"tn\">");
  }}
	break;
	case 47:
#line 373 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [/tn]");

    if (dstack_check(sm, INLINE_TN)) {
      dstack_close_element(sm, INLINE_TN);
    } else if (dstack_close_element(sm, BLOCK_TN)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }}
	break;
	case 48:
#line 383 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, INLINE_CENTER, "<span class=\"center\">");
  }}
	break;
	case 49:
#line 387 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [/center]");

    if (dstack_check(sm, INLINE_CENTER)) {
      dstack_close_element(sm, INLINE_CENTER);
    } else if (dstack_close_element(sm, BLOCK_CENTER)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }}
	break;
	case 50:
#line 397 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    if (sm->header_mode) {
      append_html_escaped(sm, "<br>");
    } else {
      append(sm, "<br>");
    };
  }}
	break;
	case 51:
#line 405 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_inline_code(sm);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1264;goto _again;}}
  }}
	break;
	case 52:
#line 410 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_inline_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1264;goto _again;}}
  }}
	break;
	case 53:
#line 415 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 54:
#line 421 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 55:
#line 427 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, INLINE_SPOILER, "<span class=\"spoiler\">");
  }}
	break;
	case 56:
#line 431 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    if (dstack_is_open(sm, INLINE_SPOILER)) {
      dstack_close_element(sm, INLINE_SPOILER);
    } else if (dstack_is_open(sm, BLOCK_SPOILER)) {
      dstack_close_until(sm, BLOCK_SPOILER);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else {
      append_html_escaped(sm, { sm->ts, sm->te });
    }
  }}
	break;
	case 57:
#line 442 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, INLINE_NODTEXT, "");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1268;goto _again;}}
  }}
	break;
	case 58:
#line 450 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 59:
#line 462 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [quote]");
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 60:
#line 475 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [expand]");
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 61:
#line 488 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 62:
#line 494 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    if (dstack_close_element(sm, BLOCK_TH)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }}
	break;
	case 63:
#line 500 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    if (dstack_close_element(sm, BLOCK_TD)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }}
	break;
	case 64:
#line 545 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append(sm, ' ');
  }}
	break;
	case 65:
#line 555 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 66:
#line 290 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "post", "post", "/post/show/", { sm->a1, sm->a2 }); }}
	break;
	case 67:
#line 291 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "forum", "forum-post", "/forum/show/", { sm->a1, sm->a2 }); }}
	break;
	case 68:
#line 292 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "topic", "forum-topic", "/forum/show/", { sm->a1, sm->a2 }); }}
	break;
	case 69:
#line 293 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "comment", "comment", "/comment/show/", { sm->a1, sm->a2 }); }}
	break;
	case 70:
#line 294 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "dmail", "dmail", "/dmail/show/", { sm->a1, sm->a2 }); }}
	break;
	case 71:
#line 295 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "pool", "pool", "/pool/show/", { sm->a1, sm->a2 }); }}
	break;
	case 72:
#line 296 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "user", "user", "/user/show/", { sm->a1, sm->a2 }); }}
	break;
	case 73:
#line 297 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "artist", "artist", "/artist/show/", { sm->a1, sm->a2 }); }}
	break;
	case 74:
#line 298 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "alias", "tag-alias", "/tag_aliases/", { sm->a1, sm->a2 }); }}
	break;
	case 75:
#line 299 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "implication", "tag-implication", "/tag_implications/", { sm->a1, sm->a2 }); }}
	break;
	case 76:
#line 300 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "mod action", "mod-action", "/mod_action?id=", { sm->a1, sm->a2 }); }}
	break;
	case 77:
#line 301 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "record", "user-record", "/user_record?id=", { sm->a1, sm->a2 }); }}
	break;
	case 78:
#line 302 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "wiki", "wiki-page", "/wiki_pages/", { sm->a1, sm->a2 }); }}
	break;
	case 79:
#line 304 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_dmail_key_link(sm); }}
	break;
	case 80:
#line 306 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_paged_link(sm, "topic #", "<a class=\"dtext-link dtext-id-link dtext-forum-topic-id-link\" href=\"", "/forum_topics/", "?page="); }}
	break;
	case 81:
#line 307 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_paged_link(sm, "pixiv #", "<a rel=\"external nofollow noreferrer\" class=\"dtext-link dtext-id-link dtext-pixiv-id-link\" href=\"", "https://www.pixiv.net/artworks/", "#"); }}
	break;
	case 82:
#line 309 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_post_search_link(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 }, { sm->b1, sm->b2 }, { sm->d1, sm->d2 });
  }}
	break;
	case 83:
#line 313 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_post_search_link(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 }, { sm->c1, sm->c2 }, { sm->d1, sm->d2 });
  }}
	break;
	case 84:
#line 317 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_wiki_link(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 }, { sm->c1, sm->c2 }, { sm->b1, sm->b2 }, { sm->e1, sm->e2 });
  }}
	break;
	case 85:
#line 321 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_wiki_link(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 }, { sm->c1, sm->c2 }, { sm->d1, sm->d2 }, { sm->e1, sm->e2 });
  }}
	break;
	case 86:
#line 325 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_bare_named_url(sm, { sm->b1, sm->b2 + 1 }, { sm->a1, sm->a2 });
  }}
	break;
	case 87:
#line 337 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_bare_unnamed_url(sm, { sm->ts, sm->te });
  }}
	break;
	case 88:
#line 345 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_mention(sm, { sm->a1, sm->a2 + 1 });
  }}
	break;
	case 89:
#line 354 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline list");
    {( sm->p) = (( sm->ts + 1))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 90:
#line 405 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_inline_code(sm);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1264;goto _again;}}
  }}
	break;
	case 91:
#line 410 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_inline_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1264;goto _again;}}
  }}
	break;
	case 92:
#line 442 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    dstack_open_element(sm, INLINE_NODTEXT, "");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1268;goto _again;}}
  }}
	break;
	case 93:
#line 456 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 94:
#line 469 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline [/quote]");
    dstack_close_until(sm, BLOCK_QUOTE);
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 95:
#line 482 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline [/expand]");
    dstack_close_until(sm, BLOCK_EXPAND);
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 96:
#line 506 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline [hr] (pos: %ld)", sm->ts - sm->pb);
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 97:
#line 513 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline newline2");

    if (dstack_check(sm, BLOCK_P)) {
      dstack_rewind(sm);
    } else if (sm->header_mode) {
      dstack_close_leaf_blocks(sm);
    } else {
      dstack_close_list(sm);
    }

    if (sm->options.f_inline) {
      append(sm, " ");
    }

    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 98:
#line 531 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline newline");

    if (sm->header_mode) {
      dstack_close_leaf_blocks(sm);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else if (dstack_is_open(sm, BLOCK_UL)) {
      dstack_close_list(sm);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else {
      append(sm, "<br>");
    }
  }}
	break;
	case 99:
#line 551 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append(sm, std::string_view { sm->ts, sm->te });
  }}
	break;
	case 100:
#line 555 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 101:
#line 292 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{ append_id_link(sm, "topic", "forum-topic", "/forum/show/", { sm->a1, sm->a2 }); }}
	break;
	case 102:
#line 294 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{ append_id_link(sm, "dmail", "dmail", "/dmail/show/", { sm->a1, sm->a2 }); }}
	break;
	case 103:
#line 325 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_bare_named_url(sm, { sm->b1, sm->b2 + 1 }, { sm->a1, sm->a2 });
  }}
	break;
	case 104:
#line 337 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_bare_unnamed_url(sm, { sm->ts, sm->te });
  }}
	break;
	case 105:
#line 405 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_inline_code(sm);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1264;goto _again;}}
  }}
	break;
	case 106:
#line 410 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_inline_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1264;goto _again;}}
  }}
	break;
	case 107:
#line 442 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    dstack_open_element(sm, INLINE_NODTEXT, "");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1268;goto _again;}}
  }}
	break;
	case 108:
#line 513 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    g_debug("inline newline2");

    if (dstack_check(sm, BLOCK_P)) {
      dstack_rewind(sm);
    } else if (sm->header_mode) {
      dstack_close_leaf_blocks(sm);
    } else {
      dstack_close_list(sm);
    }

    if (sm->options.f_inline) {
      append(sm, " ");
    }

    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 109:
#line 531 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    g_debug("inline newline");

    if (sm->header_mode) {
      dstack_close_leaf_blocks(sm);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else if (dstack_is_open(sm, BLOCK_UL)) {
      dstack_close_list(sm);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else {
      append(sm, "<br>");
    }
  }}
	break;
	case 110:
#line 551 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append(sm, std::string_view { sm->ts, sm->te });
  }}
	break;
	case 111:
#line 555 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 112:
#line 1 "NONE"
	{	switch( ( sm->act) ) {
	case 31:
	{{( sm->p) = ((( sm->te)))-1;}
    append_bare_named_url(sm, { sm->b1, sm->b2 + 1 }, { sm->a1, sm->a2 });
  }
	break;
	case 34:
	{{( sm->p) = ((( sm->te)))-1;}
    append_bare_unnamed_url(sm, { sm->ts, sm->te });
  }
	break;
	case 36:
	{{( sm->p) = ((( sm->te)))-1;}
    append_mention(sm, { sm->a1, sm->a2 + 1 });
  }
	break;
	case 69:
	{{( sm->p) = ((( sm->te)))-1;}
    g_debug("inline newline2");

    if (dstack_check(sm, BLOCK_P)) {
      dstack_rewind(sm);
    } else if (sm->header_mode) {
      dstack_close_leaf_blocks(sm);
    } else {
      dstack_close_list(sm);
    }

    if (sm->options.f_inline) {
      append(sm, " ");
    }

    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }
	break;
	case 70:
	{{( sm->p) = ((( sm->te)))-1;}
    g_debug("inline newline");

    if (sm->header_mode) {
      dstack_close_leaf_blocks(sm);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else if (dstack_is_open(sm, BLOCK_UL)) {
      dstack_close_list(sm);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else {
      append(sm, "<br>");
    }
  }
	break;
	case 73:
	{{( sm->p) = ((( sm->te)))-1;}
    append(sm, std::string_view { sm->ts, sm->te });
  }
	break;
	case 74:
	{{( sm->p) = ((( sm->te)))-1;}
    append_html_escaped(sm, (*( sm->p)));
  }
	break;
	default:
	{{( sm->p) = ((( sm->te)))-1;}}
	break;
	}
	}
	break;
	case 113:
#line 561 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_rewind(sm);
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 114:
#line 566 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;}
	break;
	case 115:
#line 568 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 116:
#line 568 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 117:
#line 568 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 118:
#line 574 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_rewind(sm);
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 119:
#line 579 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;}
	break;
	case 120:
#line 581 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 121:
#line 581 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 122:
#line 581 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 123:
#line 587 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_COLGROUP, "colgroup", sm->tag_attributes);
  }}
	break;
	case 124:
#line 591 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_element(sm, BLOCK_COLGROUP);
  }}
	break;
	case 125:
#line 595 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_COL, "col", sm->tag_attributes);
    dstack_pop(sm); // XXX [col] has no end tag
  }}
	break;
	case 126:
#line 600 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_THEAD, "thead", sm->tag_attributes);
  }}
	break;
	case 127:
#line 604 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_element(sm, BLOCK_THEAD);
  }}
	break;
	case 128:
#line 608 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_TBODY, "tbody", sm->tag_attributes);
  }}
	break;
	case 129:
#line 612 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_element(sm, BLOCK_TBODY);
  }}
	break;
	case 130:
#line 616 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_TH, "th", sm->tag_attributes);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1122;goto _again;}}
  }}
	break;
	case 131:
#line 621 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_TR, "tr", sm->tag_attributes);
  }}
	break;
	case 132:
#line 625 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_element(sm, BLOCK_TR);
  }}
	break;
	case 133:
#line 629 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_TD, "td", sm->tag_attributes);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1122;goto _again;}}
  }}
	break;
	case 134:
#line 634 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    if (dstack_close_element(sm, BLOCK_TABLE)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }}
	break;
	case 135:
#line 640 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;}
	break;
	case 136:
#line 640 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;}
	break;
	case 137:
#line 640 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}}
	break;
	case 138:
#line 659 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_block_code(sm);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1264;goto _again;}}
  }}
	break;
	case 139:
#line 664 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_block_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1264;goto _again;}}
  }}
	break;
	case 140:
#line 669 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_code_fence(sm, { sm->b1, sm->b2 }, { sm->a1, sm->a2 });
  }}
	break;
	case 141:
#line 688 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_NODTEXT, "<p>");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1268;goto _again;}}
  }}
	break;
	case 142:
#line 694 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_TABLE, "<table class=\"striped\">");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1272;goto _again;}}
  }}
	break;
	case 143:
#line 700 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_TN, "<p class=\"tn\">");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1122;goto _again;}}
  }}
	break;
	case 144:
#line 705 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_CENTER, "<p class=\"center\">");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1122;goto _again;}}
  }}
	break;
	case 145:
#line 726 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("block char");
    ( sm->p)--;

    if (sm->dstack.empty() || dstack_check(sm, BLOCK_QUOTE) || dstack_check(sm, BLOCK_SPOILER) || dstack_check(sm, BLOCK_EXPAND)) {
      dstack_open_element(sm, BLOCK_P, "<p>");
    }

    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1122;goto _again;}}
  }}
	break;
	case 146:
#line 644 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_header(sm, *sm->a1, { sm->b1, sm->b2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1122;goto _again;}}
  }}
	break;
	case 147:
#line 649 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_QUOTE, "<blockquote>");
  }}
	break;
	case 148:
#line 654 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_SPOILER, "<div class=\"spoiler\">");
  }}
	break;
	case 149:
#line 659 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_block_code(sm);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1264;goto _again;}}
  }}
	break;
	case 150:
#line 664 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_block_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1264;goto _again;}}
  }}
	break;
	case 151:
#line 673 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_EXPAND, "<details>");
    append_block(sm, "<summary>Show</summary><div>");
  }}
	break;
	case 152:
#line 679 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("block [expand=]");
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_EXPAND, "<details>");
    append_block(sm, "<summary>");
    append_block_html_escaped(sm, { sm->a1, sm->a2 });
    append_block(sm, "</summary><div>");
  }}
	break;
	case 153:
#line 688 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_NODTEXT, "<p>");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1268;goto _again;}}
  }}
	break;
	case 154:
#line 710 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("write '<hr>' (pos: %ld)", sm->ts - sm->pb);
    append_block(sm, "<hr>");
  }}
	break;
	case 155:
#line 715 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("block list");
    dstack_open_list(sm, sm->a2 - sm->a1);
    {( sm->p) = (( sm->b1))-1;}
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1122;goto _again;}}
  }}
	break;
	case 156:
#line 722 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("block blank line(s)");
  }}
	break;
	case 157:
#line 726 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("block char");
    ( sm->p)--;

    if (sm->dstack.empty() || dstack_check(sm, BLOCK_QUOTE) || dstack_check(sm, BLOCK_SPOILER) || dstack_check(sm, BLOCK_EXPAND)) {
      dstack_open_element(sm, BLOCK_P, "<p>");
    }

    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1122;goto _again;}}
  }}
	break;
	case 158:
#line 659 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_block_code(sm);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1264;goto _again;}}
  }}
	break;
	case 159:
#line 664 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_block_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1264;goto _again;}}
  }}
	break;
	case 160:
#line 688 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_NODTEXT, "<p>");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1268;goto _again;}}
  }}
	break;
	case 161:
#line 722 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    g_debug("block blank line(s)");
  }}
	break;
	case 162:
#line 726 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    g_debug("block char");
    ( sm->p)--;

    if (sm->dstack.empty() || dstack_check(sm, BLOCK_QUOTE) || dstack_check(sm, BLOCK_SPOILER) || dstack_check(sm, BLOCK_EXPAND)) {
      dstack_open_element(sm, BLOCK_P, "<p>");
    }

    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1122;goto _again;}}
  }}
	break;
#line 5955 "ext/dtext/dtext.cpp"
		}
	}

_again:
	_acts = _dtext_actions + _dtext_to_state_actions[ sm->cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 11:
#line 1 "NONE"
	{( sm->ts) = 0;}
	break;
#line 5966 "ext/dtext/dtext.cpp"
		}
	}

	if (  sm->cs == 0 )
		goto _out;
	if ( ++( sm->p) != ( sm->pe) )
		goto _resume;
	_test_eof: {}
	if ( ( sm->p) == ( sm->eof) )
	{
	if ( _dtext_eof_trans[ sm->cs] > 0 ) {
		_trans = _dtext_eof_trans[ sm->cs] - 1;
		goto _eof_trans;
	}
	}

	_out: {}
	}

#line 1433 "ext/dtext/dtext.cpp.rl"

  g_debug("EOF; closing stray blocks");
  dstack_close_all(sm);
  g_debug("done");

  return sm->output;
}

/* Everything below is optional, it's only needed to build bin/cdtext.exe. */
#ifdef CDTEXT

#include <glib.h>
#include <iostream>

static void parse_file(FILE* input, FILE* output) {
  std::stringstream ss;
  ss << std::cin.rdbuf();
  std::string dtext = ss.str();

  try {
    auto result = StateMachine::parse_dtext(dtext, options);

    if (fwrite(result.c_str(), 1, result.size(), output) != result.size()) {
      perror("fwrite failed");
      exit(1);
    }
  } catch (std::exception& e) {
    fprintf(stderr, "dtext parse error: %s\n", e.what());
    exit(1);
  }
}

int main(int argc, char* argv[]) {
  GError* error = NULL;
  bool opt_verbose = FALSE;
  bool opt_inline = FALSE;
  bool opt_no_mentions = FALSE;

  GOptionEntry options[] = {
    { "no-mentions", 'm', 0, G_OPTION_ARG_NONE, &opt_no_mentions, "Don't parse @mentions", NULL },
    { "inline",      'i', 0, G_OPTION_ARG_NONE, &opt_inline,      "Parse in inline mode", NULL },
    { "verbose",     'v', 0, G_OPTION_ARG_NONE, &opt_verbose,     "Print debug output", NULL },
    { NULL }
  };

  g_autoptr(GOptionContext) context = g_option_context_new("[FILE...]");
  g_option_context_add_main_entries(context, options, NULL);

  if (!g_option_context_parse(context, &argc, &argv, &error)) {
    fprintf(stderr, "option parsing failed: %s\n", error->message);
    g_clear_error(&error);
    return 1;
  }

  if (opt_verbose) {
    g_setenv("G_MESSAGES_DEBUG", "all", TRUE);
  }

  /* skip first argument (progname) */
  argc--, argv++;

  if (argc == 0) {
    parse_file(stdin, stdout, { .f_inline = opt_inline, .f_mentions = !opt_no_mentions });
    return 0;
  }

  for (const char* filename = *argv; argc > 0; argc--, argv++) {
    FILE* input = fopen(filename, "r");
    if (!input) {
      perror("fopen failed");
      return 1;
    }

    parse_file(input, stdout, opt_inline, !opt_no_mentions);
    fclose(input);
  }

  return 0;
}

#endif
