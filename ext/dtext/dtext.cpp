
#line 1 "ext/dtext/dtext.cpp.rl"
#include "dtext.h"
#include "url.h"

#include <algorithm>
#include <unordered_map>
#include <unordered_set>
#include <regex>

#ifdef DEBUG
#undef g_debug
#define STRINGIFY(x) XSTRINGIFY(x)
#define XSTRINGIFY(x) #x
#define g_debug(fmt, ...) fprintf(stderr, "\x1B[1;32mDEBUG\x1B[0m %-28.28s %-24.24s " fmt "\n", __FILE__ ":" STRINGIFY(__LINE__), __func__, ##__VA_ARGS__)
#else
#undef g_debug
#define g_debug(...)
#endif

static const size_t MAX_STACK_DEPTH = 512;

// Strip qualifier from tag: "Artoria Pendragon (Lancer) (Fate)" -> "Artoria Pendragon (Lancer)"
static const std::regex tag_qualifier_regex("[ _]\\([^)]+?\\)$");

// Permitted HTML attribute names.
static const std::unordered_map<std::string_view, const std::unordered_set<std::string_view>> permitted_attribute_names = {
  { "thead",    { "align" } },
  { "tbody",    { "align" } },
  { "tr",       { "align" } },
  { "td",       { "align", "colspan", "rowspan" } },
  { "th",       { "align", "colspan", "rowspan" } },
  { "col",      { "align", "span" } },
  { "colgroup", {} },
};

// Permitted HTML attribute values.
static const std::unordered_set<std::string_view> align_values = { "left", "center", "right", "justify" };
static const std::unordered_map<std::string_view, std::function<bool(std::string_view)>> permitted_attribute_values = {
  { "align",   [](auto value) { return align_values.find(value) != align_values.end(); } },
  { "span",    [](auto value) { return std::all_of(value.begin(), value.end(), isdigit); } },
  { "colspan", [](auto value) { return std::all_of(value.begin(), value.end(), isdigit); } },
  { "rowspan", [](auto value) { return std::all_of(value.begin(), value.end(), isdigit); } },
};


#line 785 "ext/dtext/dtext.cpp.rl"



#line 47 "ext/dtext/dtext.cpp"
static const unsigned char _dtext_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 10, 1, 11, 1, 
	12, 1, 13, 1, 14, 1, 15, 1, 
	16, 1, 17, 1, 18, 1, 19, 1, 
	20, 1, 21, 1, 22, 1, 23, 1, 
	24, 1, 25, 1, 51, 1, 52, 1, 
	53, 1, 55, 1, 56, 1, 57, 1, 
	58, 1, 59, 1, 60, 1, 61, 1, 
	62, 1, 63, 1, 64, 1, 65, 1, 
	66, 1, 67, 1, 69, 1, 70, 1, 
	71, 1, 72, 1, 73, 1, 74, 1, 
	75, 1, 76, 1, 77, 1, 78, 1, 
	79, 1, 80, 1, 81, 1, 82, 1, 
	83, 1, 84, 1, 85, 1, 110, 1, 
	111, 1, 112, 1, 114, 1, 115, 1, 
	116, 1, 117, 1, 118, 1, 119, 1, 
	120, 1, 121, 1, 122, 1, 123, 1, 
	124, 1, 125, 1, 126, 1, 127, 1, 
	128, 1, 129, 1, 130, 1, 131, 1, 
	132, 1, 133, 1, 134, 1, 135, 1, 
	136, 1, 137, 1, 138, 1, 139, 1, 
	140, 1, 141, 1, 142, 1, 143, 1, 
	144, 1, 145, 1, 146, 1, 147, 1, 
	148, 1, 149, 1, 150, 1, 151, 1, 
	152, 1, 153, 1, 154, 1, 155, 1, 
	156, 1, 157, 1, 158, 1, 159, 1, 
	160, 1, 161, 1, 162, 1, 163, 1, 
	164, 1, 165, 1, 166, 1, 168, 1, 
	169, 1, 170, 1, 171, 1, 172, 1, 
	173, 1, 174, 1, 175, 1, 176, 1, 
	177, 1, 178, 1, 179, 1, 180, 1, 
	181, 1, 183, 1, 184, 1, 185, 1, 
	186, 1, 187, 1, 188, 1, 189, 2, 
	0, 1, 2, 1, 53, 2, 1, 54, 
	2, 1, 68, 2, 1, 78, 2, 1, 
	80, 2, 1, 86, 2, 1, 87, 2, 
	1, 88, 2, 1, 89, 2, 1, 90, 
	2, 1, 91, 2, 1, 92, 2, 1, 
	93, 2, 1, 94, 2, 1, 95, 2, 
	1, 96, 2, 1, 97, 2, 1, 98, 
	2, 1, 99, 2, 1, 100, 2, 1, 
	101, 2, 1, 102, 2, 1, 167, 2, 
	2, 3, 2, 3, 4, 2, 3, 5, 
	2, 3, 6, 2, 3, 7, 2, 3, 
	10, 2, 3, 51, 2, 3, 52, 2, 
	3, 103, 2, 3, 104, 2, 3, 105, 
	2, 3, 113, 2, 3, 182, 2, 4, 
	5, 2, 5, 7, 2, 6, 7, 2, 
	7, 106, 2, 7, 107, 2, 9, 108, 
	2, 9, 109, 2, 10, 148, 2, 10, 
	150, 2, 10, 151, 2, 10, 153, 2, 
	10, 155, 2, 10, 156, 2, 10, 158, 
	2, 13, 0, 2, 13, 1, 2, 13, 
	3, 2, 13, 26, 2, 13, 27, 2, 
	13, 28, 2, 13, 29, 2, 13, 30, 
	2, 13, 31, 2, 13, 32, 2, 13, 
	33, 2, 13, 34, 2, 13, 35, 2, 
	13, 36, 2, 13, 37, 2, 13, 38, 
	2, 13, 39, 2, 13, 40, 2, 13, 
	41, 2, 13, 42, 2, 13, 44, 2, 
	13, 46, 2, 13, 47, 2, 13, 48, 
	2, 13, 49, 2, 13, 50, 3, 0, 
	1, 68, 3, 0, 1, 80, 3, 0, 
	1, 167, 3, 1, 2, 3, 3, 3, 
	4, 5, 3, 3, 6, 7, 3, 3, 
	10, 148, 3, 3, 10, 150, 3, 3, 
	10, 151, 3, 3, 10, 153, 3, 3, 
	10, 155, 3, 3, 10, 156, 3, 3, 
	10, 158, 3, 6, 7, 106, 3, 6, 
	7, 107, 3, 8, 9, 108, 3, 8, 
	9, 109, 3, 13, 0, 26, 3, 13, 
	0, 27, 3, 13, 0, 28, 3, 13, 
	0, 29, 3, 13, 0, 30, 3, 13, 
	0, 31, 3, 13, 0, 32, 3, 13, 
	0, 33, 3, 13, 0, 34, 3, 13, 
	0, 35, 3, 13, 0, 36, 3, 13, 
	0, 37, 3, 13, 0, 38, 3, 13, 
	0, 39, 3, 13, 0, 40, 3, 13, 
	0, 41, 3, 13, 0, 42, 3, 13, 
	0, 49, 3, 13, 1, 45, 3, 13, 
	2, 3, 3, 13, 3, 43, 4, 13, 
	0, 1, 50, 4, 13, 2, 3, 43
	
};

static const short _dtext_cond_offsets[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 3, 3, 3, 3, 3, 4, 
	4, 4, 4, 4, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 10, 16, 
	17, 37, 57, 78, 99, 122, 145, 167, 
	193, 217, 242, 263, 290, 311, 332, 355, 
	378, 400, 426, 450, 475, 502, 523, 547, 
	548, 551, 553, 555, 558, 562, 565, 569, 
	570, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 586, 601, 621, 
	641, 641, 641, 641, 641, 641, 641, 641, 
	641, 641, 641
};

static const char _dtext_cond_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 4, 6, 1, 
	20, 20, 21, 21, 23, 23, 22, 26, 
	24, 25, 21, 27, 21, 21, 23, 23, 
	22, 26, 24, 25, 27, 21, 24, 1, 
	3, 2, 2, 3, 4, 3, 4, 1, 
	13, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 2, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 15, 20, 20, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
};

static const short _dtext_cond_keys[] = {
	62, 62, 93, 93, 93, 93, 62, 62, 
	62, 62, 93, 93, -128, -1, 1, 8, 
	14, 31, 33, 127, -128, -1, 1, 9, 
	11, 12, 14, 61, 62, 62, 63, 127, 
	-128, -65, -128, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -65, -64, -63, 
	-62, -33, -32, -31, -30, -30, -29, -29, 
	-28, -18, -17, -17, -16, -12, -11, -1, 
	1, 8, 14, 31, 33, 33, 39, 39, 
	43, 43, 45, 47, 48, 57, 65, 90, 
	95, 95, 97, 122, 127, 127, -128, -100, 
	-99, -99, -98, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -84, -83, -83, 
	-82, -65, -64, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -128, -127, -65, -64, -63, 
	-62, -33, -32, -31, -30, -30, -29, -29, 
	-28, -18, -17, -17, -16, -12, -11, -1, 
	1, 8, 14, 31, 33, 33, 39, 39, 
	43, 43, 45, 47, 48, 57, 65, 90, 
	95, 95, 97, 122, 127, 127, -128, -126, 
	-125, -121, -120, -111, -110, -109, -108, -100, 
	-99, -65, -64, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -69, -68, -68, -67, -67, 
	-66, -65, -64, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -120, -119, -119, -118, -68, 
	-67, -67, -66, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -65, -64, -63, 
	-62, -33, -32, -31, -30, -30, -29, -29, 
	-28, -18, -17, -17, -16, -12, -11, -1, 
	1, 8, 14, 31, 33, 33, 39, 39, 
	43, 43, 45, 47, 48, 57, 65, 90, 
	95, 95, 97, 122, 127, 127, -128, -100, 
	-99, -99, -98, -97, -96, -96, -95, -94, 
	-93, -93, -92, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -65, -64, -63, 
	-62, -33, -32, -31, -30, -30, -29, -29, 
	-28, -18, -17, -17, -16, -12, -11, -1, 
	1, 8, 14, 31, 33, 33, 39, 39, 
	43, 43, 45, 47, 48, 57, 65, 90, 
	95, 95, 97, 122, 127, 127, -128, -65, 
	-64, -63, -62, -33, -32, -31, -30, -30, 
	-29, -29, -28, -18, -17, -17, -16, -12, 
	-11, -1, 1, 8, 14, 31, 33, 33, 
	39, 39, 43, 43, 45, 47, 48, 57, 
	65, 90, 95, 95, 97, 122, 127, 127, 
	-128, -100, -99, -99, -98, -65, -64, -63, 
	-62, -33, -32, -31, -30, -30, -29, -29, 
	-28, -18, -17, -17, -16, -12, -11, -1, 
	1, 8, 14, 31, 33, 33, 39, 39, 
	43, 43, 45, 47, 48, 57, 65, 90, 
	95, 95, 97, 122, 127, 127, -128, -84, 
	-83, -83, -82, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -128, -127, -65, 
	-64, -63, -62, -33, -32, -31, -30, -30, 
	-29, -29, -28, -18, -17, -17, -16, -12, 
	-11, -1, 1, 8, 14, 31, 33, 33, 
	39, 39, 43, 43, 45, 47, 48, 57, 
	65, 90, 95, 95, 97, 122, 127, 127, 
	-128, -126, -125, -121, -120, -111, -110, -109, 
	-108, -100, -99, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -69, -68, -68, 
	-67, -67, -66, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -120, -119, -119, 
	-118, -68, -67, -67, -66, -65, -64, -63, 
	-62, -33, -32, -31, -30, -30, -29, -29, 
	-28, -18, -17, -17, -16, -12, -11, -1, 
	1, 8, 14, 31, 33, 33, 39, 39, 
	43, 43, 45, 47, 48, 57, 65, 90, 
	95, 95, 97, 122, 127, 127, -128, -100, 
	-99, -99, -98, -97, -96, -96, -95, -94, 
	-93, -93, -92, -65, -64, -63, -62, -33, 
	-32, -31, -30, -30, -29, -29, -28, -18, 
	-17, -17, -16, -12, -11, -1, 1, 8, 
	14, 31, 33, 33, 39, 39, 43, 43, 
	45, 47, 48, 57, 65, 90, 95, 95, 
	97, 122, 127, 127, -128, -65, -64, -63, 
	-62, -33, -32, -31, -30, -30, -29, -29, 
	-28, -18, -17, -17, -16, -12, -11, -1, 
	1, 8, 14, 31, 33, 33, 39, 39, 
	43, 43, 45, 47, 48, 57, 65, 90, 
	95, 95, 97, 122, 127, 127, -128, -63, 
	-62, -33, -32, -31, -30, -30, -29, -29, 
	-28, -18, -17, -17, -16, -12, -11, -1, 
	1, 8, 14, 31, 33, 33, 39, 39, 
	43, 43, 45, 47, 48, 57, 65, 90, 
	95, 95, 97, 99, 100, 100, 101, 114, 
	115, 115, 116, 122, 127, 127, -128, -65, 
	-128, -100, -99, -99, -98, -65, -128, -84, 
	-82, -65, -128, -128, -127, -65, -125, -121, 
	-110, -109, -99, -65, -128, -69, -68, -68, 
	-67, -67, -66, -65, -128, -120, -118, -68, 
	-66, -65, -128, -100, -98, -97, -95, -94, 
	-92, -65, -128, -65, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, 1, 8, 14, 31, 48, 57, 
	65, 90, 97, 122, 127, 127, 60, 60, 
	64, 64, 64, 64, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, 1, 8, 14, 31, 46, 46, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, -128, -63, -62, -33, -32, -31, 
	-30, -30, -29, -29, -28, -18, -17, -17, 
	-16, -12, -11, -1, 1, 8, 14, 31, 
	33, 33, 39, 39, 43, 43, 45, 47, 
	48, 57, 65, 90, 95, 95, 97, 122, 
	127, 127, 0
};

static const char _dtext_cond_spaces[] = {
	4, 4, 2, 3, 2, 3, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	5, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 0
};

static const short _dtext_key_offsets[] = {
	0, 0, 4, 10, 16, 18, 20, 22, 
	24, 26, 27, 29, 30, 34, 36, 38, 
	40, 42, 43, 49, 51, 53, 55, 57, 
	59, 60, 62, 63, 65, 67, 69, 71, 
	72, 77, 80, 82, 84, 86, 88, 90, 
	92, 94, 96, 98, 99, 103, 107, 109, 
	113, 116, 124, 131, 135, 139, 141, 143, 
	147, 154, 158, 164, 166, 168, 170, 172, 
	174, 178, 185, 189, 195, 197, 199, 201, 
	203, 205, 207, 208, 212, 214, 216, 218, 
	220, 222, 224, 227, 228, 232, 233, 235, 
	246, 257, 261, 265, 267, 271, 274, 282, 
	289, 291, 293, 297, 304, 308, 314, 316, 
	318, 320, 322, 324, 328, 335, 339, 345, 
	347, 349, 351, 353, 355, 357, 358, 360, 
	362, 364, 366, 367, 369, 371, 373, 375, 
	377, 379, 382, 383, 387, 388, 389, 399, 
	401, 403, 406, 409, 412, 416, 426, 430, 
	440, 441, 443, 444, 447, 449, 451, 453, 
	455, 456, 457, 459, 460, 463, 465, 467, 
	469, 471, 472, 480, 481, 482, 483, 484, 
	485, 486, 487, 488, 490, 492, 494, 498, 
	502, 508, 514, 516, 517, 521, 523, 525, 
	527, 529, 531, 533, 536, 540, 541, 543, 
	545, 547, 549, 550, 556, 558, 559, 561, 
	563, 565, 567, 569, 571, 574, 575, 577, 
	579, 581, 583, 584, 585, 589, 593, 595, 
	597, 599, 601, 602, 604, 606, 608, 610, 
	616, 617, 618, 619, 620, 624, 628, 630, 
	632, 634, 636, 637, 639, 641, 643, 645, 
	651, 652, 653, 654, 657, 662, 673, 685, 
	687, 689, 691, 693, 695, 697, 699, 701, 
	703, 704, 706, 708, 710, 712, 714, 715, 
	717, 719, 721, 723, 724, 726, 728, 730, 
	732, 734, 736, 739, 740, 742, 744, 746, 
	750, 753, 761, 768, 770, 772, 774, 776, 
	778, 780, 781, 783, 785, 796, 807, 818, 
	828, 830, 832, 834, 836, 838, 839, 841, 
	843, 845, 847, 849, 851, 854, 855, 857, 
	859, 861, 865, 868, 876, 883, 885, 887, 
	889, 891, 893, 895, 896, 897, 898, 908, 
	910, 912, 915, 918, 921, 925, 935, 939, 
	940, 941, 946, 948, 950, 953, 957, 960, 
	966, 970, 976, 984, 986, 1014, 1016, 1018, 
	1021, 1025, 1028, 1034, 1038, 1044, 1052, 1054, 
	1082, 1106, 1108, 1110, 1113, 1117, 1120, 1126, 
	1130, 1136, 1144, 1146, 1148, 1150, 1152, 1155, 
	1156, 1157, 1171, 1173, 1188, 1190, 1192, 1209, 
	1211, 1213, 1216, 1219, 1240, 1243, 1255, 1259, 
	1263, 1268, 1270, 1272, 1273, 1277, 1282, 1284, 
	1286, 1288, 1291, 1292, 1293, 1297, 1298, 1299, 
	1309, 1316, 1323, 1328, 1337, 1349, 1353, 1354, 
	1360, 1366, 1372, 1373, 1385, 1394, 1401, 1408, 
	1415, 1423, 1437, 1443, 1444, 1458, 1472, 1486, 
	1493, 1500, 1507, 1514, 1520, 1521, 1525, 1529, 
	1531, 1542, 1545, 1556, 1565, 1573, 1580, 1587, 
	1594, 1601, 1607, 1608, 1617, 1622, 1627, 1629, 
	1630, 1635, 1636, 1637, 1638, 1652, 1660, 1674, 
	1686, 1694, 1698, 1706, 1714, 1722, 1729, 1730, 
	1731, 1740, 1756, 1766, 1782, 1796, 1806, 1815, 
	1816, 1820, 1830, 1839, 1848, 1857, 1866, 1875, 
	1886, 1896, 1905, 1915, 1924, 1933, 1950, 1959, 
	1968, 1977, 1986, 1990, 1998, 2007, 2015, 2023, 
	2032, 2033, 2037, 2038, 2039, 2040, 2046, 2052, 
	2058, 2064, 2070, 2076, 2082, 2088, 2094, 2100, 
	2106, 2107, 2113, 2119, 2125, 2131, 2137, 2143, 
	2149, 2155, 2161, 2167, 2173, 2174, 2180, 2186, 
	2192, 2198, 2204, 2210, 2216, 2222, 2228, 2234, 
	2240, 2241, 2247, 2255, 2261, 2267, 2273, 2279, 
	2285, 2291, 2297, 2303, 2309, 2315, 2316, 2322, 
	2328, 2334, 2340, 2346, 2352, 2358, 2364, 2370, 
	2376, 2382, 2383, 2384, 2398, 2400, 2415, 2417, 
	2419, 2436, 2438, 2440, 2443, 2446, 2467, 2470, 
	2482, 2486, 2490, 2495, 2497, 2499, 2501, 2504, 
	2508, 2511, 2517, 2521, 2527, 2535, 2537, 2565, 
	2567, 2569, 2572, 2576, 2579, 2585, 2589, 2595, 
	2603, 2605, 2633, 2657, 2659, 2661, 2664, 2668, 
	2671, 2677, 2681, 2687, 2695, 2697, 2699, 2701, 
	2703, 2705, 2707, 2709, 2711, 2712, 2713, 2719, 
	2725, 2731, 2737, 2743, 2749, 2755, 2761, 2767, 
	2773, 2779, 2780, 2786, 2793, 2795, 2797, 2804, 
	2811, 2818, 2825, 2832, 2839, 2846, 2853, 2860, 
	2863, 2864, 2870, 2876, 2882, 2888, 2894, 2900, 
	2906, 2912, 2918, 2924, 2925, 2931, 2937, 2943, 
	2949, 2955, 2961, 2967, 2973, 2979, 2985, 2991, 
	2992, 2998, 3004, 3010, 3016, 3022, 3028, 3034, 
	3040, 3046, 3052, 3058, 3059, 3065, 3071, 3077, 
	3083, 3089, 3095, 3101, 3107, 3113, 3119, 3125, 
	3126, 3132, 3138, 3144, 3150, 3156, 3162, 3168, 
	3174, 3180, 3186, 3192, 3198, 3200, 3202, 3204, 
	3206, 3207, 3208, 3214, 3220, 3226, 3232, 3238, 
	3244, 3250, 3256, 3262, 3268, 3274, 3276, 3278, 
	3280, 3282, 3284, 3286, 3288, 3290, 3292, 3294, 
	3295, 3296, 3302, 3308, 3314, 3320, 3326, 3332, 
	3338, 3344, 3350, 3356, 3362, 3364, 3366, 3368, 
	3370, 3372, 3374, 3376, 3378, 3380, 3382, 3383, 
	3384, 3390, 3396, 3402, 3408, 3414, 3420, 3426, 
	3432, 3438, 3444, 3450, 3451, 3457, 3459, 3461, 
	3467, 3473, 3479, 3485, 3491, 3497, 3503, 3509, 
	3515, 3521, 3524, 3530, 3536, 3542, 3548, 3554, 
	3560, 3566, 3572, 3578, 3584, 3590, 3592, 3594, 
	3596, 3598, 3600, 3601, 3602, 3608, 3614, 3620, 
	3626, 3632, 3638, 3644, 3650, 3656, 3662, 3668, 
	3669, 3675, 3681, 3687, 3693, 3699, 3705, 3711, 
	3717, 3723, 3729, 3735, 3751, 3752, 3753, 3756, 
	3757, 3760, 3761, 3765, 3767, 3769, 3771, 3773, 
	3774, 3778, 3780, 3784, 3787, 3795, 3802, 3806, 
	3810, 3812, 3814, 3818, 3825, 3829, 3835, 3837, 
	3839, 3841, 3843, 3845, 3849, 3856, 3860, 3866, 
	3868, 3870, 3872, 3875, 3876, 3877, 3881, 3886, 
	3892, 3895, 3899, 3900, 3901, 3903, 3905, 3907, 
	3909, 3911, 3913, 3914, 3918, 3920, 3922, 3924, 
	3926, 3927, 3930, 3932, 3934, 3936, 3938, 3940, 
	3943, 3944, 3946, 3947, 3950, 3952, 3956, 3959, 
	3967, 3971, 3976, 3979, 3984, 3990, 3993, 3994, 
	3996, 3998, 4000, 4001, 4007, 4009, 4011, 4013, 
	4016, 4017, 4018, 4022, 4023, 4029, 4033, 4038, 
	4040, 4042, 4044, 4047, 4048, 4049, 4053, 4054, 
	4056, 4058, 4060, 4063, 4064, 4065, 4069, 4070, 
	4076, 4082, 4085, 4086, 4088, 4090, 4092, 4093, 
	4100, 4108, 4116, 4124, 4131, 4133, 4135, 4137, 
	4140, 4141, 4142, 4146, 4147, 4163, 4166, 4170, 
	4171, 4176, 4178, 4180, 4182, 4184, 4185, 4186, 
	4188, 4192, 4194, 4196, 4198, 4199, 4200, 4204, 
	4209, 4215, 4218, 4222, 4227, 4233, 4238, 4240, 
	4242, 4244, 4247, 4248, 4249, 4253, 4254, 4259, 
	4261, 4263, 4265, 4267, 4269, 4271, 4273, 4275, 
	4276, 4277, 4281, 4283, 4285, 4287, 4289, 4290, 
	4294, 4296, 4300, 4303, 4311, 4318, 4320, 4322, 
	4326, 4333, 4337, 4343, 4347, 4348, 4350, 4352, 
	4354, 4356, 4360, 4367, 4371, 4377, 4379, 4381, 
	4383, 4386, 4387, 4388, 4392, 4397, 4398, 4400, 
	4402, 4404, 4406, 4408, 4410, 4411, 4416, 4418, 
	4420, 4422, 4424, 4426, 4429, 4430, 4432, 4434, 
	4436, 4438, 4439, 4441, 4442, 4443, 4451, 4460, 
	4462, 4492, 4522, 4554, 4586, 4619, 4652, 4685, 
	4727, 4761, 4795, 4827, 4862, 4894, 4926, 4959, 
	4992, 5025, 5067, 5101, 5135, 5170, 5202, 5234, 
	5236, 5239, 5243, 5246, 5252, 5256, 5262, 5270, 
	5272, 5292, 5293, 5295, 5297, 5299, 5301, 5302, 
	5303, 5305, 5307, 5309, 5311, 5312, 5313, 5315, 
	5317, 5319, 5321, 5323, 5325, 5327, 5328, 5329, 
	5331, 5333, 5335, 5337, 5339, 5341, 5343, 5344, 
	5348, 5350, 5352, 5354, 5356, 5358, 5360, 5362, 
	5363, 5371, 5373, 5375, 5377, 5378, 5380, 5382, 
	5384, 5385, 5387, 5389, 5391, 5392, 5393, 5395, 
	5397, 5402, 5410, 5419, 5422, 5432, 5435, 5439, 
	5442, 5445, 5449, 5458, 5460, 5462, 5464, 5466, 
	5469, 5477, 5486, 5489, 5499, 5502, 5506, 5509, 
	5512, 5516, 5525, 5533, 5535, 5537, 5539, 5542, 
	5550, 5559, 5562, 5572, 5575, 5579, 5582, 5585, 
	5589, 5598, 5601, 5609, 5618, 5621, 5631, 5634, 
	5638, 5641, 5644, 5648, 5657, 5662, 5670, 5679, 
	5682, 5692, 5695, 5699, 5702, 5705, 5709, 5718, 
	5720, 5722, 5725, 5733, 5742, 5745, 5755, 5758, 
	5762, 5765, 5768, 5772, 5781, 5784, 5792, 5801, 
	5804, 5814, 5817, 5821, 5824, 5827, 5831, 5840, 
	5844, 5846, 5848, 5850, 5852, 5854, 5856, 5858, 
	5859, 5867, 5869, 5871, 5873, 5874, 5876, 5878, 
	5880, 5881, 5883, 5885, 5887, 5888, 5889, 5891, 
	5893, 5898, 5906, 5915, 5918, 5928, 5931, 5935, 
	5938, 5941, 5945, 5954, 5956, 5958, 5960, 5962, 
	5965, 5973, 5982, 5985, 5995, 5998, 6002, 6005, 
	6008, 6012, 6021, 6029, 6031, 6033, 6035, 6038, 
	6046, 6055, 6058, 6068, 6071, 6075, 6078, 6081, 
	6085, 6094, 6097, 6105, 6114, 6117, 6127, 6130, 
	6134, 6137, 6140, 6144, 6153, 6158, 6166, 6175, 
	6178, 6188, 6191, 6195, 6198, 6201, 6205, 6214, 
	6216, 6218, 6221, 6229, 6238, 6241, 6251, 6254, 
	6258, 6261, 6264, 6268, 6277, 6280, 6288, 6297, 
	6300, 6310, 6313, 6317, 6320, 6323, 6327, 6336, 
	6346, 6350, 6356, 6358, 6361, 6364, 6369, 6385, 
	6388, 6392, 6396, 6399, 6402, 6406, 6409, 6411, 
	6413, 6427, 6428, 6431, 6442, 6451, 6515, 6517, 
	6523, 6525, 6527, 6531, 6535, 6545, 6547, 6553, 
	6554, 6557, 6562, 6564, 6566, 6568, 6569, 6597, 
	6625, 6649, 6670, 6675, 6683, 6689, 6695, 6701, 
	6707, 6713, 6719, 6725, 6731, 6737, 6743, 6749, 
	6755, 6762, 6769, 6779, 6789, 6799, 6809, 6819, 
	6828, 6834, 6840, 6846, 6852, 6858, 6864, 6870, 
	6876, 6882, 6888, 6890, 6890, 6900, 6910, 6920, 
	6929, 6935, 6941, 6947, 6953, 6959, 6965, 6971, 
	6977, 6983, 6989, 6991, 6991, 7001, 7011, 7021, 
	7031, 7041, 7051, 7060, 7066, 7072, 7078, 7084, 
	7090, 7096, 7102, 7108, 7114, 7120, 7122, 7122, 
	7132, 7142, 7152, 7162, 7171, 7178, 7186, 7193, 
	7200, 7207, 7214, 7221, 7228, 7235, 7242, 7249, 
	7252, 7253, 7263, 7273, 7283, 7293, 7302, 7308, 
	7314, 7320, 7326, 7332, 7338, 7344, 7350, 7356, 
	7362, 7364, 7364, 7374, 7384, 7394, 7405, 7426, 
	7454, 7482, 7506, 7511, 7520, 7530, 7540, 7549, 
	7555, 7561, 7567, 7573, 7579, 7585, 7591, 7597, 
	7603, 7609, 7611, 7611, 7623, 7633, 7643, 7653, 
	7662, 7664, 7676, 7686, 7695, 7701, 7707, 7713, 
	7719, 7725, 7731, 7737, 7743, 7749, 7755, 7757, 
	7757, 7767, 7776, 7782, 7788, 7794, 7800, 7806, 
	7812, 7818, 7824, 7830, 7836, 7838, 7838, 7848, 
	7858, 7868, 7878, 7888, 7897, 7903, 7909, 7915, 
	7921, 7927, 7933, 7939, 7945, 7951, 7957, 7959, 
	7959, 7969, 7979, 7989, 7999, 8009, 8018, 8024, 
	8030, 8036, 8042, 8048, 8054, 8060, 8066, 8072, 
	8078, 8080, 8080, 8092, 8102, 8111, 8117, 8123, 
	8129, 8135, 8141, 8147, 8153, 8159, 8165, 8171, 
	8173, 8173, 8179, 8185, 8191, 8197, 8203, 8209, 
	8215, 8221, 8227, 8233, 8235, 8235, 8241, 8247, 
	8253, 8259, 8265, 8271, 8277, 8283, 8289, 8295, 
	8297, 8297, 8307, 8317, 8327, 8336, 8343, 8345, 
	8352, 8359, 8366, 8373, 8380, 8387, 8394, 8401, 
	8408, 8411, 8412, 8422, 8432, 8442, 8451, 8457, 
	8463, 8469, 8475, 8481, 8487, 8493, 8499, 8505, 
	8511, 8513, 8513, 8519, 8525, 8531, 8537, 8543, 
	8549, 8555, 8561, 8567, 8573, 8575, 8575, 8585, 
	8595, 8605, 8614, 8620, 8626, 8632, 8638, 8644, 
	8650, 8656, 8662, 8668, 8674, 8676, 8676, 8698, 
	8702, 8706, 8710, 8711, 8734, 8758, 8780, 8810, 
	8840, 8844, 8846, 8847, 8848, 8852, 8854, 8855, 
	8856, 8858, 8863
};

static const short _dtext_trans_keys[] = {
	0, 9, 10, 32, 0, 9, 10, 32, 
	60, 91, 67, 72, 84, 99, 104, 116, 
	69, 101, 78, 110, 84, 116, 69, 101, 
	82, 114, 62, 82, 114, 62, 0, 9, 
	10, 32, 65, 97, 66, 98, 76, 108, 
	69, 101, 62, 67, 72, 84, 99, 104, 
	116, 69, 101, 78, 110, 84, 116, 69, 
	101, 82, 114, 93, 82, 114, 93, 65, 
	97, 66, 98, 76, 108, 69, 101, 93, 
	0, 9, 10, 13, 32, 9, 32, 42, 
	76, 108, 79, 111, 67, 99, 75, 107, 
	81, 113, 85, 117, 79, 111, 84, 116, 
	69, 101, 62, 69, 79, 101, 111, 68, 
	76, 100, 108, 69, 101, 9, 32, 61, 
	62, 9, 32, 61, 9, 32, 48, 57, 
	65, 90, 97, 122, 62, 48, 57, 65, 
	90, 97, 122, 0, 9, 10, 32, 0, 
	9, 10, 32, 79, 111, 82, 114, 9, 
	32, 61, 62, 0, 9, 10, 13, 32, 
	61, 62, 0, 10, 13, 62, 0, 9, 
	10, 13, 32, 62, 88, 120, 80, 112, 
	65, 97, 78, 110, 68, 100, 9, 32, 
	61, 62, 0, 9, 10, 13, 32, 61, 
	62, 0, 10, 13, 62, 0, 9, 10, 
	13, 32, 62, 79, 111, 68, 100, 84, 
	116, 69, 101, 88, 120, 84, 116, 62, 
	0, 9, 10, 32, 80, 112, 79, 111, 
	73, 105, 76, 108, 69, 101, 82, 114, 
	62, 83, 115, 62, 65, 78, 97, 110, 
	62, 35, 46, 33, 35, 38, 45, 95, 
	47, 58, 65, 90, 97, 122, 33, 35, 
	38, 46, 95, 45, 58, 65, 90, 97, 
	122, 69, 79, 101, 111, 68, 76, 100, 
	108, 69, 101, 9, 32, 61, 93, 9, 
	32, 61, 9, 32, 48, 57, 65, 90, 
	97, 122, 93, 48, 57, 65, 90, 97, 
	122, 79, 111, 82, 114, 9, 32, 61, 
	93, 0, 9, 10, 13, 32, 61, 93, 
	0, 10, 13, 93, 0, 9, 10, 13, 
	32, 93, 88, 120, 80, 112, 65, 97, 
	78, 110, 68, 100, 9, 32, 61, 93, 
	0, 9, 10, 13, 32, 61, 93, 0, 
	10, 13, 93, 0, 9, 10, 13, 32, 
	93, 79, 111, 68, 100, 84, 116, 69, 
	101, 88, 120, 84, 116, 93, 85, 117, 
	79, 111, 84, 116, 69, 101, 93, 80, 
	112, 79, 111, 73, 105, 76, 108, 69, 
	101, 82, 114, 83, 93, 115, 93, 65, 
	78, 97, 110, 93, 96, 0, 9, 10, 
	32, 48, 57, 65, 90, 97, 122, 0, 
	10, 0, 10, 0, 10, 96, 0, 10, 
	96, 0, 10, 96, 0, 9, 10, 32, 
	0, 9, 10, 32, 48, 57, 65, 90, 
	97, 122, 0, 9, 10, 32, 66, 69, 
	73, 83, 85, 98, 101, 105, 115, 117, 
	62, 77, 109, 62, 62, 84, 116, 82, 
	114, 79, 111, 78, 110, 71, 103, 62, 
	62, 77, 109, 62, 62, 84, 116, 82, 
	114, 79, 111, 78, 110, 71, 103, 62, 
	66, 73, 83, 85, 98, 105, 115, 117, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	-128, -65, -128, -65, -128, -65, 0, 9, 
	10, 32, 0, 9, 10, 32, 0, 9, 
	10, 32, 60, 91, 72, 83, 84, 104, 
	115, 116, 82, 114, 62, 0, 9, 10, 
	32, 80, 112, 79, 111, 73, 105, 76, 
	108, 69, 101, 82, 114, 62, 83, 115, 
	0, 9, 10, 32, 62, 65, 97, 66, 
	98, 76, 108, 69, 101, 62, 72, 83, 
	84, 104, 115, 116, 82, 114, 93, 80, 
	112, 79, 111, 73, 105, 76, 108, 69, 
	101, 82, 114, 83, 93, 115, 93, 65, 
	97, 66, 98, 76, 108, 69, 101, 93, 
	47, 67, 84, 99, 116, 69, 79, 101, 
	111, 78, 110, 84, 116, 69, 101, 82, 
	114, 62, 76, 108, 79, 111, 82, 114, 
	2366, 2622, 68, 72, 78, 100, 104, 110, 
	62, 62, 62, 47, 67, 84, 99, 116, 
	69, 79, 101, 111, 78, 110, 84, 116, 
	69, 101, 82, 114, 93, 76, 108, 79, 
	111, 82, 114, 2397, 2653, 68, 72, 78, 
	100, 104, 110, 93, 93, 93, 9, 32, 
	42, 0, 9, 10, 13, 32, 47, 67, 
	72, 78, 83, 84, 99, 104, 110, 115, 
	116, 66, 67, 69, 81, 83, 84, 98, 
	99, 101, 113, 115, 116, 76, 108, 79, 
	111, 67, 99, 75, 107, 81, 113, 85, 
	117, 79, 111, 84, 116, 69, 101, 3165, 
	88, 120, 80, 112, 65, 97, 78, 110, 
	68, 100, 3646, 85, 117, 79, 111, 84, 
	116, 69, 101, 3134, 80, 112, 79, 111, 
	73, 105, 76, 108, 69, 101, 82, 114, 
	62, 83, 115, 62, 79, 111, 68, 100, 
	69, 101, 9, 32, 61, 62, 9, 32, 
	61, 9, 32, 48, 57, 65, 90, 97, 
	122, 62, 48, 57, 65, 90, 97, 122, 
	79, 111, 68, 100, 84, 116, 69, 101, 
	88, 120, 84, 116, 62, 49, 54, 35, 
	46, 33, 35, 38, 45, 95, 47, 58, 
	65, 90, 97, 122, 33, 35, 38, 46, 
	95, 45, 58, 65, 90, 97, 122, 47, 
	67, 72, 78, 83, 84, 99, 104, 110, 
	115, 116, 67, 69, 81, 83, 84, 99, 
	101, 113, 115, 116, 88, 120, 80, 112, 
	65, 97, 78, 110, 68, 100, 3677, 80, 
	112, 79, 111, 73, 105, 76, 108, 69, 
	101, 82, 114, 83, 93, 115, 93, 79, 
	111, 68, 100, 69, 101, 9, 32, 61, 
	93, 9, 32, 61, 9, 32, 48, 57, 
	65, 90, 97, 122, 93, 48, 57, 65, 
	90, 97, 122, 79, 111, 68, 100, 84, 
	116, 69, 101, 88, 120, 84, 116, 93, 
	96, 96, 0, 9, 10, 32, 48, 57, 
	65, 90, 97, 122, 0, 10, 0, 10, 
	0, 10, 96, 0, 10, 96, 0, 10, 
	96, 0, 9, 10, 32, 0, 9, 10, 
	32, 48, 57, 65, 90, 97, 122, 0, 
	9, 10, 32, 34, 58, 35, 47, 72, 
	91, 104, -128, -65, -128, -65, -99, -128, 
	-65, -128, -84, -82, -65, -128, -127, -65, 
	-125, -121, -110, -109, -99, -65, -68, -67, 
	-128, -65, -128, -120, -118, -68, -66, -65, 
	-128, -100, -98, -97, -95, -94, -92, -65, 
	-128, -65, -30, -29, -17, 32, 34, 35, 
	39, 44, 46, 60, 62, 63, 91, 93, 
	-128, -63, -62, -33, -32, -18, -16, -12, 
	-11, 0, 9, 13, 58, 59, -128, -65, 
	-128, -65, -99, -128, -65, -128, -84, -82, 
	-65, -128, -127, -65, -125, -121, -110, -109, 
	-99, -65, -68, -67, -128, -65, -128, -120, 
	-118, -68, -66, -65, -128, -100, -98, -97, 
	-95, -94, -92, -65, -128, -65, -30, -29, 
	-17, 32, 34, 35, 39, 44, 46, 60, 
	62, 63, 91, 93, -128, -63, -62, -33, 
	-32, -18, -16, -12, -11, 0, 9, 13, 
	58, 59, -30, -29, -17, 32, 34, 35, 
	39, 44, 46, 63, -128, -63, -62, -33, 
	-32, -18, -16, -12, -11, 0, 9, 13, 
	58, 59, -128, -65, -128, -65, -99, -128, 
	-65, -128, -84, -82, -65, -128, -127, -65, 
	-125, -121, -110, -109, -99, -65, -68, -67, 
	-128, -65, -128, -120, -118, -68, -66, -65, 
	-128, -100, -98, -97, -95, -94, -92, -65, 
	-128, -65, 84, 116, 84, 116, 80, 112, 
	58, 83, 115, 47, 47, 45, 95, -62, 
	-33, -32, -17, -16, -12, 48, 57, 65, 
	90, 97, 122, -128, -65, 45, 46, 95, 
	-62, -33, -32, -17, -16, -12, 48, 57, 
	65, 90, 97, 122, -128, -65, -128, -65, 
	-30, -29, -17, 45, 95, -62, -33, -32, 
	-18, -16, -12, 48, 57, 65, 90, 97, 
	122, -128, -65, -128, -65, -99, -128, -65, 
	-83, -128, -65, -30, -29, -17, 35, 46, 
	47, 58, 63, 95, -62, -33, -32, -18, 
	-16, -12, 45, 57, 65, 90, 97, 122, 
	-128, -127, -65, -128, -126, -125, -121, -120, 
	-111, -110, -109, -108, -100, -99, -65, -68, 
	-67, -128, -65, -119, -67, -128, -65, -99, 
	-96, -93, -128, -65, -128, -65, 48, 57, 
	58, 35, 47, 72, 104, 0, 32, 93, 
	9, 13, 84, 116, 84, 116, 80, 112, 
	58, 83, 115, 47, 47, 0, 32, 9, 
	13, 58, 91, 9, 32, 58, 60, 62, 
	92, 93, 124, 10, 13, 9, 32, 35, 
	93, 124, 10, 13, 9, 32, 35, 93, 
	124, 10, 13, 32, 93, 124, 9, 13, 
	9, 32, 35, 93, 124, 10, 13, 65, 
	90, 9, 32, 45, 93, 95, 124, 48, 
	57, 65, 90, 97, 122, 9, 32, 93, 
	124, 93, 9, 32, 93, 124, 10, 13, 
	9, 32, 93, 124, 10, 13, 9, 32, 
	93, 124, 10, 13, 93, 9, 32, 45, 
	93, 95, 124, 48, 57, 65, 90, 97, 
	122, 32, 45, 95, 48, 57, 65, 90, 
	97, 122, 9, 32, 35, 93, 124, 10, 
	13, 9, 32, 35, 93, 124, 10, 13, 
	9, 32, 35, 93, 124, 10, 13, 9, 
	32, 93, 124, 10, 13, 65, 90, 9, 
	32, 45, 93, 95, 124, 10, 13, 48, 
	57, 65, 90, 97, 122, 9, 32, 93, 
	124, 10, 13, 93, 9, 32, 45, 93, 
	95, 124, 10, 13, 48, 57, 65, 90, 
	97, 122, 9, 32, 45, 93, 95, 124, 
	10, 13, 48, 57, 65, 90, 97, 122, 
	9, 32, 45, 93, 95, 124, 10, 13, 
	48, 57, 65, 90, 97, 122, 9, 32, 
	35, 93, 124, 10, 13, 9, 32, 62, 
	93, 124, 10, 13, 9, 32, 93, 95, 
	124, 10, 13, 9, 32, 60, 93, 124, 
	10, 13, 9, 32, 93, 124, 10, 13, 
	62, 9, 32, 35, 93, 9, 32, 35, 
	93, 65, 90, 9, 32, 45, 93, 95, 
	48, 57, 65, 90, 97, 122, 9, 32, 
	93, 9, 32, 45, 93, 95, 48, 57, 
	65, 90, 97, 122, 32, 45, 95, 48, 
	57, 65, 90, 97, 122, 9, 32, 35, 
	58, 93, 124, 10, 13, 9, 32, 51, 
	93, 124, 10, 13, 9, 32, 35, 93, 
	124, 10, 13, 9, 32, 35, 93, 124, 
	10, 13, 9, 32, 35, 93, 124, 10, 
	13, 9, 32, 93, 124, 10, 13, 47, 
	95, 119, 124, 48, 57, 65, 90, 97, 
	122, 9, 32, 35, 93, 124, 9, 32, 
	35, 93, 124, 65, 90, 124, 9, 32, 
	35, 93, 124, 95, 124, 123, 0, 9, 
	32, 45, 58, 60, 62, 92, 124, 126, 
	10, 13, 123, 125, 0, 9, 32, 123, 
	124, 125, 10, 13, 0, 9, 32, 45, 
	58, 60, 62, 92, 123, 124, 125, 126, 
	10, 13, 0, 9, 32, 58, 60, 62, 
	92, 123, 124, 125, 10, 13, 0, 9, 
	32, 123, 124, 125, 10, 13, 9, 32, 
	124, 125, 0, 9, 10, 13, 32, 125, 
	11, 12, 0, 9, 10, 13, 32, 125, 
	11, 12, 0, 9, 10, 13, 32, 125, 
	11, 12, 0, 10, 13, 32, 125, 9, 
	12, 125, 125, 0, 9, 10, 13, 32, 
	124, 125, 11, 12, 0, 9, 10, 13, 
	32, 45, 58, 60, 62, 92, 123, 124, 
	125, 126, 11, 12, 0, 9, 10, 13, 
	32, 123, 124, 125, 11, 12, 0, 9, 
	10, 13, 32, 45, 58, 60, 62, 92, 
	123, 124, 125, 126, 11, 12, 0, 9, 
	10, 13, 32, 58, 60, 62, 92, 123, 
	124, 125, 11, 12, 0, 9, 10, 13, 
	32, 123, 124, 125, 11, 12, 0, 9, 
	10, 13, 32, 124, 125, 11, 12, 125, 
	9, 32, 124, 125, 0, 9, 10, 13, 
	32, 123, 124, 125, 11, 12, 0, 9, 
	10, 13, 32, 62, 125, 11, 12, 0, 
	9, 10, 13, 32, 95, 125, 11, 12, 
	0, 9, 10, 13, 32, 60, 125, 11, 
	12, 0, 9, 10, 13, 32, 124, 125, 
	11, 12, 0, 9, 10, 13, 32, 62, 
	125, 11, 12, 0, 9, 10, 13, 32, 
	58, 123, 124, 125, 11, 12, 0, 9, 
	10, 13, 32, 123, 124, 125, 11, 12, 
	0, 9, 10, 13, 32, 51, 125, 11, 
	12, 0, 9, 10, 13, 32, 123, 124, 
	125, 11, 12, 0, 9, 10, 13, 32, 
	124, 125, 11, 12, 0, 9, 10, 13, 
	32, 47, 125, 11, 12, 0, 9, 10, 
	13, 32, 95, 119, 124, 125, 11, 12, 
	48, 57, 65, 90, 97, 122, 0, 9, 
	10, 13, 32, 124, 125, 11, 12, 0, 
	9, 10, 13, 32, 124, 125, 11, 12, 
	0, 9, 10, 13, 32, 95, 125, 11, 
	12, 0, 9, 10, 13, 32, 124, 125, 
	11, 12, 9, 32, 124, 125, 0, 9, 
	32, 123, 124, 125, 10, 13, 0, 9, 
	32, 58, 123, 124, 125, 10, 13, 0, 
	9, 32, 123, 124, 125, 10, 13, 0, 
	9, 32, 123, 124, 125, 10, 13, 95, 
	119, 124, 48, 57, 65, 90, 97, 122, 
	124, 9, 32, 124, 125, 95, 124, 35, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 35, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 35, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	35, 48, 57, 65, 90, 97, 122, 45, 
	61, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 35, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 47, 47, 
	45, 95, -62, -33, -32, -17, -16, -12, 
	48, 57, 65, 90, 97, 122, -128, -65, 
	45, 46, 95, -62, -33, -32, -17, -16, 
	-12, 48, 57, 65, 90, 97, 122, -128, 
	-65, -128, -65, -30, -29, -17, 45, 95, 
	-62, -33, -32, -18, -16, -12, 48, 57, 
	65, 90, 97, 122, -128, -65, -128, -65, 
	-99, -128, -65, -83, -128, -65, -30, -29, 
	-17, 35, 46, 47, 58, 63, 95, -62, 
	-33, -32, -18, -16, -12, 45, 57, 65, 
	90, 97, 122, -128, -127, -65, -128, -126, 
	-125, -121, -120, -111, -110, -109, -108, -100, 
	-99, -65, -68, -67, -128, -65, -119, -67, 
	-128, -65, -99, -96, -93, -128, -65, -128, 
	-65, -128, -65, -128, -65, -99, -128, -65, 
	-128, -84, -82, -65, -128, -127, -65, -125, 
	-121, -110, -109, -99, -65, -68, -67, -128, 
	-65, -128, -120, -118, -68, -66, -65, -128, 
	-100, -98, -97, -95, -94, -92, -65, -128, 
	-65, -30, -29, -17, 32, 34, 35, 39, 
	44, 46, 60, 62, 63, 91, 93, -128, 
	-63, -62, -33, -32, -18, -16, -12, -11, 
	0, 9, 13, 58, 59, -128, -65, -128, 
	-65, -99, -128, -65, -128, -84, -82, -65, 
	-128, -127, -65, -125, -121, -110, -109, -99, 
	-65, -68, -67, -128, -65, -128, -120, -118, 
	-68, -66, -65, -128, -100, -98, -97, -95, 
	-94, -92, -65, -128, -65, -30, -29, -17, 
	32, 34, 35, 39, 44, 46, 60, 62, 
	63, 91, 93, -128, -63, -62, -33, -32, 
	-18, -16, -12, -11, 0, 9, 13, 58, 
	59, -30, -29, -17, 32, 34, 35, 39, 
	44, 46, 63, -128, -63, -62, -33, -32, 
	-18, -16, -12, -11, 0, 9, 13, 58, 
	59, -128, -65, -128, -65, -99, -128, -65, 
	-128, -84, -82, -65, -128, -127, -65, -125, 
	-121, -110, -109, -99, -65, -68, -67, -128, 
	-65, -128, -120, -118, -68, -66, -65, -128, 
	-100, -98, -97, -95, -94, -92, -65, -128, 
	-65, 48, 57, 65, 97, 67, 99, 84, 
	116, 73, 105, 79, 111, 78, 110, 32, 
	35, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 35, 48, 57, 65, 90, 
	97, 122, 47, 48, 57, 65, 90, 97, 
	122, 80, 112, 48, 57, 47, 48, 57, 
	65, 90, 97, 122, 47, 48, 57, 65, 
	90, 97, 122, 47, 48, 57, 65, 90, 
	97, 122, 47, 48, 57, 65, 90, 97, 
	122, 47, 48, 57, 65, 90, 97, 122, 
	47, 48, 57, 65, 90, 97, 122, 47, 
	48, 57, 65, 90, 97, 122, 47, 48, 
	57, 65, 90, 97, 122, 47, 48, 57, 
	65, 90, 97, 122, 47, 48, 57, 47, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 35, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 35, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 35, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 35, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	65, 73, 84, 97, 105, 116, 76, 108, 
	73, 105, 65, 97, 83, 115, 32, 35, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 77, 109, 80, 112, 76, 108, 
	73, 105, 67, 99, 65, 97, 84, 116, 
	73, 105, 79, 111, 78, 110, 32, 35, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 82, 114, 65, 97, 78, 110, 
	83, 115, 76, 108, 65, 97, 84, 116, 
	73, 105, 79, 111, 78, 110, 32, 35, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 35, 48, 57, 65, 90, 97, 
	122, 80, 112, 48, 57, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 35, 82, 114, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 69, 101, 
	80, 112, 79, 111, 82, 114, 84, 116, 
	32, 35, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 35, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 66, 
	67, 69, 73, 81, 83, 84, 85, 98, 
	99, 101, 105, 113, 115, 116, 117, 93, 
	93, 80, 93, 112, 93, 82, 93, 114, 
	93, 69, 79, 101, 111, 78, 110, 84, 
	116, 69, 101, 82, 114, 93, 68, 76, 
	100, 108, 69, 101, 9, 32, 61, 93, 
	9, 32, 61, 9, 32, 48, 57, 65, 
	90, 97, 122, 93, 48, 57, 65, 90, 
	97, 122, 0, 9, 10, 32, 0, 9, 
	10, 32, 79, 111, 82, 114, 9, 32, 
	61, 93, 0, 9, 10, 13, 32, 61, 
	93, 0, 10, 13, 93, 0, 9, 10, 
	13, 32, 93, 88, 120, 80, 112, 65, 
	97, 78, 110, 68, 100, 9, 32, 61, 
	93, 0, 9, 10, 13, 32, 61, 93, 
	0, 10, 13, 93, 0, 9, 10, 13, 
	32, 93, 84, 116, 84, 116, 80, 112, 
	58, 83, 115, 47, 47, 0, 32, 9, 
	13, 0, 32, 93, 9, 13, 0, 32, 
	40, 93, 9, 13, 0, 10, 13, 0, 
	10, 13, 41, 58, 93, 79, 111, 68, 
	100, 84, 116, 69, 101, 88, 120, 84, 
	116, 93, 0, 9, 10, 32, 85, 117, 
	79, 111, 84, 116, 69, 101, 93, 80, 
	93, 112, 79, 111, 73, 105, 76, 108, 
	69, 101, 82, 114, 83, 93, 115, 93, 
	78, 110, 93, 82, 93, 114, 76, 108, 
	9, 32, 61, 93, 9, 32, 61, 9, 
	32, 34, 35, 39, 47, 72, 104, 35, 
	47, 72, 104, 0, 32, 34, 9, 13, 
	9, 32, 93, 0, 9, 10, 13, 32, 
	0, 9, 10, 13, 32, 91, 9, 32, 
	91, 47, 85, 117, 82, 114, 76, 108, 
	93, 0, 9, 10, 13, 32, 91, 84, 
	116, 84, 116, 80, 112, 58, 83, 115, 
	47, 47, 0, 32, 9, 13, 58, 0, 
	9, 32, 93, 10, 13, 35, 47, 72, 
	104, 0, 32, 39, 9, 13, 84, 116, 
	84, 116, 80, 112, 58, 83, 115, 47, 
	47, 0, 32, 9, 13, 58, 84, 116, 
	84, 116, 80, 112, 58, 83, 115, 47, 
	47, 0, 32, 9, 13, 58, 9, 32, 
	35, 47, 72, 104, 0, 9, 32, 91, 
	10, 13, 9, 32, 91, 47, 85, 117, 
	82, 114, 76, 108, 93, 0, 9, 32, 
	47, 91, 10, 13, 0, 9, 32, 85, 
	91, 117, 10, 13, 0, 9, 32, 82, 
	91, 114, 10, 13, 0, 9, 32, 76, 
	91, 108, 10, 13, 0, 9, 32, 91, 
	93, 10, 13, 84, 116, 84, 116, 80, 
	112, 58, 83, 115, 47, 47, 0, 32, 
	9, 13, 58, 66, 67, 69, 73, 81, 
	83, 84, 85, 98, 99, 101, 105, 113, 
	115, 116, 117, 62, 76, 108, 77, 88, 
	109, 120, 62, 62, 80, 84, 112, 116, 
	82, 114, 79, 111, 78, 110, 71, 103, 
	62, 62, 9, 32, 9, 32, 72, 104, 
	82, 114, 69, 101, 70, 102, 61, 34, 
	35, 47, 72, 104, 0, 32, 34, 9, 
	13, 0, 32, 34, 62, 9, 13, 0, 
	10, 13, 0, 10, 13, 60, 0, 10, 
	13, 47, 60, 0, 10, 13, 60, 65, 
	97, 0, 10, 13, 60, 62, 84, 116, 
	84, 116, 80, 112, 58, 83, 115, 47, 
	47, 0, 32, 9, 13, 58, 62, 76, 
	82, 108, 114, 79, 111, 67, 99, 75, 
	107, 81, 113, 85, 117, 79, 111, 84, 
	116, 69, 101, 62, 62, 69, 79, 101, 
	111, 78, 110, 84, 116, 69, 101, 82, 
	114, 62, 68, 76, 100, 108, 69, 101, 
	9, 32, 61, 62, 9, 32, 61, 9, 
	32, 48, 57, 65, 90, 97, 122, 62, 
	48, 57, 65, 90, 97, 122, 79, 111, 
	82, 114, 9, 32, 61, 62, 0, 9, 
	10, 13, 32, 61, 62, 0, 10, 13, 
	62, 0, 9, 10, 13, 32, 62, 77, 
	88, 109, 120, 62, 80, 112, 65, 97, 
	78, 110, 68, 100, 9, 32, 61, 62, 
	0, 9, 10, 13, 32, 61, 62, 0, 
	10, 13, 62, 0, 9, 10, 13, 32, 
	62, 84, 116, 84, 116, 80, 112, 58, 
	83, 115, 47, 47, 0, 32, 9, 13, 
	0, 32, 62, 9, 13, 58, 79, 111, 
	68, 100, 84, 116, 69, 101, 88, 120, 
	84, 116, 62, 62, 80, 84, 112, 116, 
	79, 111, 73, 105, 76, 108, 69, 101, 
	82, 114, 62, 83, 115, 62, 82, 114, 
	79, 111, 78, 110, 71, 103, 62, 78, 
	110, 62, 62, 896, 1023, 1025, 1032, 1038, 
	1055, 1057, 1151, 1086, 896, 1023, 1025, 1033, 
	1035, 1036, 1038, 1151, 896, 959, 994, 995, 
	1007, 1057, 1063, 1067, 1119, 1151, 896, 961, 
	962, 991, 992, 1006, 1008, 1012, 1013, 1023, 
	1025, 1032, 1038, 1055, 1069, 1071, 1072, 1081, 
	1089, 1114, 1121, 1146, 994, 995, 1007, 1057, 
	1063, 1067, 1119, 1151, 896, 961, 962, 991, 
	992, 1006, 1008, 1012, 1013, 1023, 1025, 1032, 
	1038, 1055, 1069, 1071, 1072, 1081, 1089, 1114, 
	1121, 1146, 994, 995, 1007, 1057, 1063, 1067, 
	1119, 1151, 896, 959, 960, 961, 962, 991, 
	992, 1006, 1008, 1012, 1013, 1023, 1025, 1032, 
	1038, 1055, 1069, 1071, 1072, 1081, 1089, 1114, 
	1121, 1146, 994, 995, 1007, 1057, 1063, 1067, 
	1119, 1151, 896, 959, 960, 961, 962, 991, 
	992, 1006, 1008, 1012, 1013, 1023, 1025, 1032, 
	1038, 1055, 1069, 1071, 1072, 1081, 1089, 1114, 
	1121, 1146, 925, 994, 995, 1007, 1057, 1063, 
	1067, 1119, 1151, 896, 959, 960, 961, 962, 
	991, 992, 1006, 1008, 1012, 1013, 1023, 1025, 
	1032, 1038, 1055, 1069, 1071, 1072, 1081, 1089, 
	1114, 1121, 1146, 941, 994, 995, 1007, 1057, 
	1063, 1067, 1119, 1151, 896, 959, 960, 961, 
	962, 991, 992, 1006, 1008, 1012, 1013, 1023, 
	1025, 1032, 1038, 1055, 1069, 1071, 1072, 1081, 
	1089, 1114, 1121, 1146, 896, 994, 995, 1007, 
	1057, 1063, 1067, 1119, 1151, 897, 959, 960, 
	961, 962, 991, 992, 1006, 1008, 1012, 1013, 
	1023, 1025, 1032, 1038, 1055, 1069, 1071, 1072, 
	1081, 1089, 1114, 1121, 1146, 994, 995, 1007, 
	1057, 1063, 1067, 1119, 1151, 896, 898, 899, 
	903, 904, 913, 914, 915, 916, 924, 925, 
	959, 960, 961, 962, 991, 992, 1006, 1008, 
	1012, 1013, 1023, 1025, 1032, 1038, 1055, 1069, 
	1071, 1072, 1081, 1089, 1114, 1121, 1146, 956, 
	957, 994, 995, 1007, 1057, 1063, 1067, 1119, 
	1151, 896, 959, 960, 961, 962, 991, 992, 
	1006, 1008, 1012, 1013, 1023, 1025, 1032, 1038, 
	1055, 1069, 1071, 1072, 1081, 1089, 1114, 1121, 
	1146, 905, 957, 994, 995, 1007, 1057, 1063, 
	1067, 1119, 1151, 896, 959, 960, 961, 962, 
	991, 992, 1006, 1008, 1012, 1013, 1023, 1025, 
	1032, 1038, 1055, 1069, 1071, 1072, 1081, 1089, 
	1114, 1121, 1146, 994, 995, 1007, 1057, 1063, 
	1067, 1119, 1151, 896, 959, 960, 961, 962, 
	991, 992, 1006, 1008, 1012, 1013, 1023, 1025, 
	1032, 1038, 1055, 1069, 1071, 1072, 1081, 1089, 
	1114, 1121, 1146, 925, 928, 931, 994, 995, 
	1007, 1057, 1063, 1067, 1119, 1151, 896, 959, 
	960, 961, 962, 991, 992, 1006, 1008, 1012, 
	1013, 1023, 1025, 1032, 1038, 1055, 1069, 1071, 
	1072, 1081, 1089, 1114, 1121, 1146, 994, 995, 
	1007, 1057, 1063, 1067, 1119, 1151, 896, 959, 
	960, 961, 962, 991, 992, 1006, 1008, 1012, 
	1013, 1023, 1025, 1032, 1038, 1055, 1069, 1071, 
	1072, 1081, 1089, 1114, 1121, 1146, 994, 995, 
	1007, 1057, 1063, 1067, 1119, 1151, 896, 959, 
	960, 961, 962, 991, 992, 1006, 1008, 1012, 
	1013, 1023, 1025, 1032, 1038, 1055, 1069, 1071, 
	1072, 1081, 1089, 1114, 1121, 1146, 925, 994, 
	995, 1007, 1057, 1063, 1067, 1119, 1151, 896, 
	959, 960, 961, 962, 991, 992, 1006, 1008, 
	1012, 1013, 1023, 1025, 1032, 1038, 1055, 1069, 
	1071, 1072, 1081, 1089, 1114, 1121, 1146, 941, 
	994, 995, 1007, 1057, 1063, 1067, 1119, 1151, 
	896, 959, 960, 961, 962, 991, 992, 1006, 
	1008, 1012, 1013, 1023, 1025, 1032, 1038, 1055, 
	1069, 1071, 1072, 1081, 1089, 1114, 1121, 1146, 
	896, 994, 995, 1007, 1057, 1063, 1067, 1119, 
	1151, 897, 959, 960, 961, 962, 991, 992, 
	1006, 1008, 1012, 1013, 1023, 1025, 1032, 1038, 
	1055, 1069, 1071, 1072, 1081, 1089, 1114, 1121, 
	1146, 994, 995, 1007, 1057, 1063, 1067, 1119, 
	1151, 896, 898, 899, 903, 904, 913, 914, 
	915, 916, 924, 925, 959, 960, 961, 962, 
	991, 992, 1006, 1008, 1012, 1013, 1023, 1025, 
	1032, 1038, 1055, 1069, 1071, 1072, 1081, 1089, 
	1114, 1121, 1146, 956, 957, 994, 995, 1007, 
	1057, 1063, 1067, 1119, 1151, 896, 959, 960, 
	961, 962, 991, 992, 1006, 1008, 1012, 1013, 
	1023, 1025, 1032, 1038, 1055, 1069, 1071, 1072, 
	1081, 1089, 1114, 1121, 1146, 905, 957, 994, 
	995, 1007, 1057, 1063, 1067, 1119, 1151, 896, 
	959, 960, 961, 962, 991, 992, 1006, 1008, 
	1012, 1013, 1023, 1025, 1032, 1038, 1055, 1069, 
	1071, 1072, 1081, 1089, 1114, 1121, 1146, 925, 
	928, 931, 994, 995, 1007, 1057, 1063, 1067, 
	1119, 1151, 896, 959, 960, 961, 962, 991, 
	992, 1006, 1008, 1012, 1013, 1023, 1025, 1032, 
	1038, 1055, 1069, 1071, 1072, 1081, 1089, 1114, 
	1121, 1146, 994, 995, 1007, 1057, 1063, 1067, 
	1119, 1151, 896, 959, 960, 961, 962, 991, 
	992, 1006, 1008, 1012, 1013, 1023, 1025, 1032, 
	1038, 1055, 1069, 1071, 1072, 1081, 1089, 1114, 
	1121, 1146, 994, 995, 1007, 1057, 1063, 1067, 
	1119, 1124, 1139, 1151, 896, 961, 962, 991, 
	992, 1006, 1008, 1012, 1013, 1023, 1025, 1032, 
	1038, 1055, 1069, 1071, 1072, 1081, 1089, 1114, 
	1121, 1146, 896, 959, 925, 896, 959, 896, 
	940, 942, 959, 896, 897, 959, 899, 903, 
	914, 915, 925, 959, 956, 957, 896, 959, 
	896, 904, 906, 956, 958, 959, 896, 924, 
	926, 927, 929, 930, 932, 959, 896, 959, 
	994, 995, 1007, 1151, 962, 991, 992, 1006, 
	1008, 1012, 1025, 1032, 1038, 1055, 1072, 1081, 
	1089, 1114, 1121, 1146, 47, 67, 99, 79, 
	111, 68, 100, 69, 101, 62, 47, 67, 
	99, 79, 111, 68, 100, 69, 101, 93, 
	47, 78, 110, 79, 111, 68, 100, 84, 
	116, 69, 101, 88, 120, 84, 116, 62, 
	47, 78, 110, 79, 111, 68, 100, 84, 
	116, 69, 101, 88, 120, 84, 116, 93, 
	67, 84, 99, 116, 79, 111, 76, 108, 
	71, 103, 82, 114, 79, 111, 85, 117, 
	80, 112, 62, 65, 66, 72, 82, 97, 
	98, 104, 114, 66, 98, 76, 108, 69, 
	101, 62, 79, 111, 68, 100, 89, 121, 
	62, 69, 101, 65, 97, 68, 100, 62, 
	62, 79, 111, 76, 108, 9, 32, 62, 
	71, 103, 9, 32, 48, 57, 65, 90, 
	97, 122, 9, 32, 61, 48, 57, 65, 
	90, 97, 122, 9, 32, 61, 9, 32, 
	34, 39, 48, 57, 65, 90, 97, 122, 
	0, 10, 13, 0, 10, 13, 34, 9, 
	32, 62, 0, 10, 13, 0, 10, 13, 
	39, 9, 32, 62, 48, 57, 65, 90, 
	97, 122, 82, 114, 79, 111, 85, 117, 
	80, 112, 9, 32, 62, 9, 32, 48, 
	57, 65, 90, 97, 122, 9, 32, 61, 
	48, 57, 65, 90, 97, 122, 9, 32, 
	61, 9, 32, 34, 39, 48, 57, 65, 
	90, 97, 122, 0, 10, 13, 0, 10, 
	13, 34, 9, 32, 62, 0, 10, 13, 
	0, 10, 13, 39, 9, 32, 62, 48, 
	57, 65, 90, 97, 122, 66, 68, 72, 
	82, 98, 100, 104, 114, 79, 111, 68, 
	100, 89, 121, 9, 32, 62, 9, 32, 
	48, 57, 65, 90, 97, 122, 9, 32, 
	61, 48, 57, 65, 90, 97, 122, 9, 
	32, 61, 9, 32, 34, 39, 48, 57, 
	65, 90, 97, 122, 0, 10, 13, 0, 
	10, 13, 34, 9, 32, 62, 0, 10, 
	13, 0, 10, 13, 39, 9, 32, 62, 
	48, 57, 65, 90, 97, 122, 9, 32, 
	62, 9, 32, 48, 57, 65, 90, 97, 
	122, 9, 32, 61, 48, 57, 65, 90, 
	97, 122, 9, 32, 61, 9, 32, 34, 
	39, 48, 57, 65, 90, 97, 122, 0, 
	10, 13, 0, 10, 13, 34, 9, 32, 
	62, 0, 10, 13, 0, 10, 13, 39, 
	9, 32, 62, 48, 57, 65, 90, 97, 
	122, 9, 32, 62, 69, 101, 9, 32, 
	48, 57, 65, 90, 97, 122, 9, 32, 
	61, 48, 57, 65, 90, 97, 122, 9, 
	32, 61, 9, 32, 34, 39, 48, 57, 
	65, 90, 97, 122, 0, 10, 13, 0, 
	10, 13, 34, 9, 32, 62, 0, 10, 
	13, 0, 10, 13, 39, 9, 32, 62, 
	48, 57, 65, 90, 97, 122, 65, 97, 
	68, 100, 9, 32, 62, 9, 32, 48, 
	57, 65, 90, 97, 122, 9, 32, 61, 
	48, 57, 65, 90, 97, 122, 9, 32, 
	61, 9, 32, 34, 39, 48, 57, 65, 
	90, 97, 122, 0, 10, 13, 0, 10, 
	13, 34, 9, 32, 62, 0, 10, 13, 
	0, 10, 13, 39, 9, 32, 62, 48, 
	57, 65, 90, 97, 122, 9, 32, 62, 
	9, 32, 48, 57, 65, 90, 97, 122, 
	9, 32, 61, 48, 57, 65, 90, 97, 
	122, 9, 32, 61, 9, 32, 34, 39, 
	48, 57, 65, 90, 97, 122, 0, 10, 
	13, 0, 10, 13, 34, 9, 32, 62, 
	0, 10, 13, 0, 10, 13, 39, 9, 
	32, 62, 48, 57, 65, 90, 97, 122, 
	67, 84, 99, 116, 79, 111, 76, 108, 
	71, 103, 82, 114, 79, 111, 85, 117, 
	80, 112, 93, 65, 66, 72, 82, 97, 
	98, 104, 114, 66, 98, 76, 108, 69, 
	101, 93, 79, 111, 68, 100, 89, 121, 
	93, 69, 101, 65, 97, 68, 100, 93, 
	93, 79, 111, 76, 108, 9, 32, 71, 
	93, 103, 9, 32, 48, 57, 65, 90, 
	97, 122, 9, 32, 61, 48, 57, 65, 
	90, 97, 122, 9, 32, 61, 9, 32, 
	34, 39, 48, 57, 65, 90, 97, 122, 
	0, 10, 13, 0, 10, 13, 34, 9, 
	32, 93, 0, 10, 13, 0, 10, 13, 
	39, 9, 32, 93, 48, 57, 65, 90, 
	97, 122, 82, 114, 79, 111, 85, 117, 
	80, 112, 9, 32, 93, 9, 32, 48, 
	57, 65, 90, 97, 122, 9, 32, 61, 
	48, 57, 65, 90, 97, 122, 9, 32, 
	61, 9, 32, 34, 39, 48, 57, 65, 
	90, 97, 122, 0, 10, 13, 0, 10, 
	13, 34, 9, 32, 93, 0, 10, 13, 
	0, 10, 13, 39, 9, 32, 93, 48, 
	57, 65, 90, 97, 122, 66, 68, 72, 
	82, 98, 100, 104, 114, 79, 111, 68, 
	100, 89, 121, 9, 32, 93, 9, 32, 
	48, 57, 65, 90, 97, 122, 9, 32, 
	61, 48, 57, 65, 90, 97, 122, 9, 
	32, 61, 9, 32, 34, 39, 48, 57, 
	65, 90, 97, 122, 0, 10, 13, 0, 
	10, 13, 34, 9, 32, 93, 0, 10, 
	13, 0, 10, 13, 39, 9, 32, 93, 
	48, 57, 65, 90, 97, 122, 9, 32, 
	93, 9, 32, 48, 57, 65, 90, 97, 
	122, 9, 32, 61, 48, 57, 65, 90, 
	97, 122, 9, 32, 61, 9, 32, 34, 
	39, 48, 57, 65, 90, 97, 122, 0, 
	10, 13, 0, 10, 13, 34, 9, 32, 
	93, 0, 10, 13, 0, 10, 13, 39, 
	9, 32, 93, 48, 57, 65, 90, 97, 
	122, 9, 32, 69, 93, 101, 9, 32, 
	48, 57, 65, 90, 97, 122, 9, 32, 
	61, 48, 57, 65, 90, 97, 122, 9, 
	32, 61, 9, 32, 34, 39, 48, 57, 
	65, 90, 97, 122, 0, 10, 13, 0, 
	10, 13, 34, 9, 32, 93, 0, 10, 
	13, 0, 10, 13, 39, 9, 32, 93, 
	48, 57, 65, 90, 97, 122, 65, 97, 
	68, 100, 9, 32, 93, 9, 32, 48, 
	57, 65, 90, 97, 122, 9, 32, 61, 
	48, 57, 65, 90, 97, 122, 9, 32, 
	61, 9, 32, 34, 39, 48, 57, 65, 
	90, 97, 122, 0, 10, 13, 0, 10, 
	13, 34, 9, 32, 93, 0, 10, 13, 
	0, 10, 13, 39, 9, 32, 93, 48, 
	57, 65, 90, 97, 122, 9, 32, 93, 
	9, 32, 48, 57, 65, 90, 97, 122, 
	9, 32, 61, 48, 57, 65, 90, 97, 
	122, 9, 32, 61, 9, 32, 34, 39, 
	48, 57, 65, 90, 97, 122, 0, 10, 
	13, 0, 10, 13, 34, 9, 32, 93, 
	0, 10, 13, 0, 10, 13, 39, 9, 
	32, 93, 48, 57, 65, 90, 97, 122, 
	0, 9, 10, 32, 42, 60, 72, 91, 
	96, 104, 0, 9, 10, 32, 0, 9, 
	10, 32, 60, 91, 0, 10, 9, 32, 
	42, 0, 10, 13, 0, 9, 10, 13, 
	32, 66, 67, 69, 72, 78, 81, 83, 
	84, 98, 99, 101, 104, 110, 113, 115, 
	116, 32, 9, 13, 0, 9, 10, 32, 
	0, 9, 10, 32, 32, 9, 13, 32, 
	9, 13, 0, 9, 10, 32, 32, 9, 
	13, 49, 54, 9, 32, 67, 69, 72, 
	78, 81, 83, 84, 99, 101, 104, 110, 
	113, 115, 116, 96, 0, 60, 91, 47, 
	66, 69, 73, 83, 85, 98, 101, 105, 
	115, 117, 47, 66, 73, 83, 85, 98, 
	105, 115, 117, 0, 9, 10, 13, 32, 
	34, 65, 66, 67, 68, 70, 72, 77, 
	80, 82, 83, 84, 85, 87, 91, 97, 
	98, 99, 100, 102, 104, 109, 112, 114, 
	115, 116, 117, 119, 123, 828, 1084, 1344, 
	1600, 1856, 2112, -128, -63, -62, -33, -32, 
	-17, -16, -12, -11, 47, 48, 57, 58, 
	59, 61, 63, 69, 90, 92, 96, 101, 
	122, 124, 127, -128, -65, -62, -33, -32, 
	-17, -16, -12, -128, -65, -128, -65, 0, 
	9, 10, 32, 0, 9, 10, 32, 0, 
	9, 10, 32, 42, 60, 72, 91, 96, 
	104, 0, 10, 0, 9, 10, 32, 60, 
	91, 10, 0, 10, 13, 0, 9, 10, 
	13, 32, 9, 32, 9, 32, 9, 32, 
	34, -30, -29, -17, 32, 34, 35, 39, 
	44, 46, 60, 62, 63, 91, 93, -128, 
	-63, -62, -33, -32, -18, -16, -12, -11, 
	0, 9, 13, 58, 59, -30, -29, -17, 
	32, 34, 35, 39, 44, 46, 60, 62, 
	63, 91, 93, -128, -63, -62, -33, -32, 
	-18, -16, -12, -11, 0, 9, 13, 58, 
	59, -30, -29, -17, 32, 34, 35, 39, 
	44, 46, 63, -128, -63, -62, -33, -32, 
	-18, -16, -12, -11, 0, 9, 13, 58, 
	59, -30, -29, -17, 35, 46, 47, 58, 
	63, 95, -62, -33, -32, -18, -16, -12, 
	45, 57, 65, 90, 97, 122, 35, 47, 
	63, 48, 57, 91, 123, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 125, 48, 57, 65, 90, 
	97, 122, 125, 48, 57, 65, 90, 97, 
	122, 82, 91, 114, 123, 48, 57, 65, 
	90, 97, 122, 84, 91, 116, 123, 48, 
	57, 65, 90, 97, 122, 73, 91, 105, 
	123, 48, 57, 65, 90, 97, 122, 83, 
	91, 115, 123, 48, 57, 65, 90, 97, 
	122, 84, 91, 116, 123, 48, 57, 65, 
	90, 97, 122, 32, 91, 123, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 79, 91, 111, 123, 48, 57, 
	65, 90, 97, 122, 79, 91, 111, 123, 
	48, 57, 65, 90, 97, 122, 75, 91, 
	107, 123, 48, 57, 65, 90, 97, 122, 
	32, 91, 123, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 79, 
	91, 111, 123, 48, 57, 65, 90, 97, 
	122, 77, 91, 109, 123, 48, 57, 65, 
	90, 97, 122, 77, 91, 109, 123, 48, 
	57, 65, 90, 97, 122, 69, 91, 101, 
	123, 48, 57, 65, 90, 97, 122, 78, 
	91, 110, 123, 48, 57, 65, 90, 97, 
	122, 84, 91, 116, 123, 48, 57, 65, 
	90, 97, 122, 32, 91, 123, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 77, 91, 109, 123, 48, 57, 
	65, 90, 97, 122, 65, 91, 97, 123, 
	48, 57, 66, 90, 98, 122, 73, 91, 
	105, 123, 48, 57, 65, 90, 97, 122, 
	76, 91, 108, 123, 48, 57, 65, 90, 
	97, 122, 32, 91, 123, 48, 57, 65, 
	90, 97, 122, 47, 48, 57, 65, 90, 
	97, 122, 45, 61, 48, 57, 65, 90, 
	97, 122, 47, 48, 57, 65, 90, 97, 
	122, 47, 48, 57, 65, 90, 97, 122, 
	47, 48, 57, 65, 90, 97, 122, 47, 
	48, 57, 65, 90, 97, 122, 47, 48, 
	57, 65, 90, 97, 122, 47, 48, 57, 
	65, 90, 97, 122, 47, 48, 57, 65, 
	90, 97, 122, 47, 48, 57, 65, 90, 
	97, 122, 47, 48, 57, 65, 90, 97, 
	122, 47, 48, 57, 47, 79, 91, 111, 
	123, 48, 57, 65, 90, 97, 122, 82, 
	91, 114, 123, 48, 57, 65, 90, 97, 
	122, 85, 91, 117, 123, 48, 57, 65, 
	90, 97, 122, 77, 91, 109, 123, 48, 
	57, 65, 90, 97, 122, 32, 91, 123, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 84, 91, 116, 123, 
	48, 57, 65, 90, 97, 122, 84, 91, 
	116, 123, 48, 57, 65, 90, 97, 122, 
	80, 91, 112, 123, 48, 57, 65, 90, 
	97, 122, 58, 83, 91, 115, 123, 48, 
	57, 65, 90, 97, 122, -30, -29, -17, 
	35, 46, 47, 58, 63, 95, -62, -33, 
	-32, -18, -16, -12, 45, 57, 65, 90, 
	97, 122, -30, -29, -17, 32, 34, 35, 
	39, 44, 46, 60, 62, 63, 91, 93, 
	-128, -63, -62, -33, -32, -18, -16, -12, 
	-11, 0, 9, 13, 58, 59, -30, -29, 
	-17, 32, 34, 35, 39, 44, 46, 60, 
	62, 63, 91, 93, -128, -63, -62, -33, 
	-32, -18, -16, -12, -11, 0, 9, 13, 
	58, 59, -30, -29, -17, 32, 34, 35, 
	39, 44, 46, 63, -128, -63, -62, -33, 
	-32, -18, -16, -12, -11, 0, 9, 13, 
	58, 59, 35, 47, 63, 48, 57, 58, 
	91, 123, 48, 57, 65, 90, 97, 122, 
	79, 91, 111, 123, 48, 57, 65, 90, 
	97, 122, 68, 91, 100, 123, 48, 57, 
	65, 90, 97, 122, 32, 91, 123, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 73, 79, 91, 105, 111, 
	123, 48, 57, 65, 90, 97, 122, 88, 
	91, 120, 123, 48, 57, 65, 90, 97, 
	122, 73, 91, 105, 123, 48, 57, 65, 
	90, 97, 122, 86, 91, 118, 123, 48, 
	57, 65, 90, 97, 122, 32, 91, 123, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	79, 83, 91, 111, 115, 123, 48, 57, 
	65, 90, 97, 122, 76, 91, 108, 123, 
	48, 57, 65, 90, 97, 122, 32, 91, 
	123, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 84, 91, 116, 
	123, 48, 57, 65, 90, 97, 122, 32, 
	91, 123, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 69, 91, 
	101, 123, 48, 57, 65, 90, 97, 122, 
	67, 91, 99, 123, 48, 57, 65, 90, 
	97, 122, 79, 91, 111, 123, 48, 57, 
	65, 90, 97, 122, 82, 91, 114, 123, 
	48, 57, 65, 90, 97, 122, 68, 91, 
	100, 123, 48, 57, 65, 90, 97, 122, 
	32, 91, 123, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 69, 
	91, 101, 123, 48, 57, 65, 90, 97, 
	122, 82, 91, 114, 123, 48, 57, 65, 
	90, 97, 122, 73, 91, 105, 123, 48, 
	57, 65, 90, 97, 122, 69, 91, 101, 
	123, 48, 57, 65, 90, 97, 122, 83, 
	91, 115, 123, 48, 57, 65, 90, 97, 
	122, 32, 91, 123, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 79, 91, 97, 111, 123, 48, 57, 
	66, 90, 98, 122, 71, 91, 103, 123, 
	48, 57, 65, 90, 97, 122, 32, 91, 
	123, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 80, 91, 112, 123, 48, 57, 65, 
	90, 97, 122, 73, 91, 105, 123, 48, 
	57, 65, 90, 97, 122, 67, 91, 99, 
	123, 48, 57, 65, 90, 97, 122, 32, 
	91, 123, 48, 57, 65, 90, 97, 122, 
	47, 48, 57, 65, 90, 97, 122, 48, 
	57, 47, 48, 57, 65, 90, 97, 122, 
	47, 48, 57, 65, 90, 97, 122, 47, 
	48, 57, 65, 90, 97, 122, 47, 48, 
	57, 65, 90, 97, 122, 47, 48, 57, 
	65, 90, 97, 122, 47, 48, 57, 65, 
	90, 97, 122, 47, 48, 57, 65, 90, 
	97, 122, 47, 48, 57, 65, 90, 97, 
	122, 47, 48, 57, 65, 90, 97, 122, 
	47, 48, 57, 47, 83, 91, 115, 123, 
	48, 57, 65, 90, 97, 122, 69, 91, 
	101, 123, 48, 57, 65, 90, 97, 122, 
	82, 91, 114, 123, 48, 57, 65, 90, 
	97, 122, 32, 91, 123, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 65, 
	90, 97, 122, 48, 57, 65, 90, 97, 
	122, 48, 57, 65, 90, 97, 122, 48, 
	57, 65, 90, 97, 122, 48, 57, 73, 
	91, 105, 123, 48, 57, 65, 90, 97, 
	122, 75, 91, 107, 123, 48, 57, 65, 
	90, 97, 122, 73, 91, 105, 123, 48, 
	57, 65, 90, 97, 122, 32, 91, 123, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 65, 90, 97, 122, 
	48, 57, 65, 90, 97, 122, 48, 57, 
	65, 90, 97, 122, 48, 57, 65, 90, 
	97, 122, 48, 57, 47, 66, 67, 69, 
	72, 73, 78, 81, 83, 84, 85, 91, 
	98, 99, 101, 104, 105, 110, 113, 115, 
	116, 117, 0, 9, 10, 32, 0, 9, 
	10, 32, 0, 9, 10, 32, 123, 47, 
	65, 66, 67, 69, 72, 73, 78, 81, 
	83, 84, 85, 97, 98, 99, 101, 104, 
	105, 110, 113, 115, 116, 117, 47, 65, 
	66, 67, 69, 72, 73, 78, 81, 83, 
	84, 85, 97, 98, 99, 101, 104, 105, 
	110, 113, 115, 116, 117, 1088, 994, 995, 
	1007, 1070, 1119, 1151, 962, 991, 992, 1006, 
	1008, 1012, 1025, 1032, 1038, 1055, 1072, 1081, 
	1089, 1114, 1121, 1146, 994, 995, 1007, 1057, 
	1063, 1067, 1119, 1151, 896, 961, 962, 991, 
	992, 1006, 1008, 1012, 1013, 1023, 1025, 1032, 
	1038, 1055, 1069, 1071, 1072, 1081, 1089, 1114, 
	1121, 1146, 994, 995, 1007, 1057, 1063, 1067, 
	1119, 1151, 896, 961, 962, 991, 992, 1006, 
	1008, 1012, 1013, 1023, 1025, 1032, 1038, 1055, 
	1069, 1071, 1072, 1081, 1089, 1114, 1121, 1146, 
	0, 10, 60, 91, 60, 91, 47, 47, 
	0, 10, 60, 91, 60, 91, 47, 47, 
	60, 91, 47, 67, 84, 99, 116, 47, 
	67, 84, 99, 116, 0
};

static const char _dtext_single_lengths[] = {
	0, 4, 6, 6, 2, 2, 2, 2, 
	2, 1, 2, 1, 4, 2, 2, 2, 
	2, 1, 6, 2, 2, 2, 2, 2, 
	1, 2, 1, 2, 2, 2, 2, 1, 
	5, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 4, 4, 2, 4, 
	3, 2, 1, 4, 4, 2, 2, 4, 
	7, 4, 6, 2, 2, 2, 2, 2, 
	4, 7, 4, 6, 2, 2, 2, 2, 
	2, 2, 1, 4, 2, 2, 2, 2, 
	2, 2, 3, 1, 4, 1, 2, 5, 
	5, 4, 4, 2, 4, 3, 2, 1, 
	2, 2, 4, 7, 4, 6, 2, 2, 
	2, 2, 2, 4, 7, 4, 6, 2, 
	2, 2, 2, 2, 2, 1, 2, 2, 
	2, 2, 1, 2, 2, 2, 2, 2, 
	2, 3, 1, 4, 1, 1, 4, 2, 
	2, 3, 3, 3, 4, 4, 4, 10, 
	1, 2, 1, 3, 2, 2, 2, 2, 
	1, 1, 2, 1, 3, 2, 2, 2, 
	2, 1, 8, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 4, 4, 
	6, 6, 2, 1, 4, 2, 2, 2, 
	2, 2, 2, 3, 4, 1, 2, 2, 
	2, 2, 1, 6, 2, 1, 2, 2, 
	2, 2, 2, 2, 3, 1, 2, 2, 
	2, 2, 1, 1, 4, 4, 2, 2, 
	2, 2, 1, 2, 2, 2, 2, 6, 
	1, 1, 1, 1, 4, 4, 2, 2, 
	2, 2, 1, 2, 2, 2, 2, 6, 
	1, 1, 1, 3, 5, 11, 12, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 2, 2, 2, 2, 2, 1, 2, 
	2, 2, 2, 1, 2, 2, 2, 2, 
	2, 2, 3, 1, 2, 2, 2, 4, 
	3, 2, 1, 2, 2, 2, 2, 2, 
	2, 1, 0, 2, 5, 5, 11, 10, 
	2, 2, 2, 2, 2, 1, 2, 2, 
	2, 2, 2, 2, 3, 1, 2, 2, 
	2, 4, 3, 2, 1, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 4, 2, 
	2, 3, 3, 3, 4, 4, 4, 1, 
	1, 5, 0, 0, 1, 0, 1, 0, 
	2, 0, 0, 0, 14, 0, 0, 1, 
	0, 1, 0, 2, 0, 0, 0, 14, 
	10, 0, 0, 1, 0, 1, 0, 2, 
	0, 0, 0, 2, 2, 2, 3, 1, 
	1, 2, 0, 3, 0, 0, 5, 0, 
	0, 1, 1, 9, 1, 0, 2, 2, 
	3, 0, 0, 1, 4, 3, 2, 2, 
	2, 3, 1, 1, 2, 1, 1, 8, 
	5, 5, 3, 5, 6, 4, 1, 4, 
	4, 4, 1, 6, 3, 5, 5, 5, 
	4, 6, 4, 1, 6, 6, 6, 5, 
	5, 5, 5, 4, 1, 4, 4, 0, 
	5, 3, 5, 3, 6, 5, 5, 5, 
	5, 4, 1, 3, 5, 5, 0, 1, 
	5, 1, 1, 1, 10, 6, 12, 10, 
	6, 4, 6, 6, 6, 5, 1, 1, 
	7, 14, 8, 14, 12, 8, 7, 1, 
	4, 8, 7, 7, 7, 7, 7, 9, 
	8, 7, 8, 7, 7, 9, 7, 7, 
	7, 7, 4, 6, 7, 6, 6, 3, 
	1, 4, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 2, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 2, 0, 3, 0, 0, 
	5, 0, 0, 1, 1, 9, 1, 0, 
	2, 2, 3, 0, 0, 0, 1, 0, 
	1, 0, 2, 0, 0, 0, 14, 0, 
	0, 1, 0, 1, 0, 2, 0, 0, 
	0, 14, 10, 0, 0, 1, 0, 1, 
	0, 2, 0, 0, 0, 0, 2, 2, 
	2, 2, 2, 2, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 1, 2, 0, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 6, 2, 2, 2, 2, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 2, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 3, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 2, 2, 2, 
	2, 2, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 16, 1, 1, 3, 1, 
	3, 1, 4, 2, 2, 2, 2, 1, 
	4, 2, 4, 3, 2, 1, 4, 4, 
	2, 2, 4, 7, 4, 6, 2, 2, 
	2, 2, 2, 4, 7, 4, 6, 2, 
	2, 2, 3, 1, 1, 2, 3, 4, 
	3, 4, 1, 1, 2, 2, 2, 2, 
	2, 2, 1, 4, 2, 2, 2, 2, 
	1, 3, 2, 2, 2, 2, 2, 3, 
	1, 2, 1, 3, 2, 4, 3, 8, 
	4, 3, 3, 5, 6, 3, 1, 2, 
	2, 2, 1, 6, 2, 2, 2, 3, 
	1, 1, 2, 1, 4, 4, 3, 2, 
	2, 2, 3, 1, 1, 2, 1, 2, 
	2, 2, 3, 1, 1, 2, 1, 6, 
	4, 3, 1, 2, 2, 2, 1, 5, 
	6, 6, 6, 5, 2, 2, 2, 3, 
	1, 1, 2, 1, 16, 3, 4, 1, 
	5, 2, 2, 2, 2, 1, 1, 2, 
	4, 2, 2, 2, 1, 1, 4, 3, 
	4, 3, 4, 5, 6, 5, 2, 2, 
	2, 3, 1, 1, 2, 1, 5, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 4, 2, 2, 2, 2, 1, 4, 
	2, 4, 3, 2, 1, 2, 2, 4, 
	7, 4, 6, 4, 1, 2, 2, 2, 
	2, 4, 7, 4, 6, 2, 2, 2, 
	3, 1, 1, 2, 3, 1, 2, 2, 
	2, 2, 2, 2, 1, 5, 2, 2, 
	2, 2, 2, 3, 1, 2, 2, 2, 
	2, 1, 2, 1, 1, 0, 1, 0, 
	8, 8, 8, 8, 9, 9, 9, 8, 
	10, 10, 8, 11, 8, 8, 9, 9, 
	9, 8, 10, 10, 11, 8, 10, 0, 
	1, 0, 1, 0, 2, 0, 0, 0, 
	4, 1, 2, 2, 2, 2, 1, 1, 
	2, 2, 2, 2, 1, 1, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 2, 
	2, 2, 2, 2, 2, 2, 1, 4, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	8, 2, 2, 2, 1, 2, 2, 2, 
	1, 2, 2, 2, 1, 1, 2, 2, 
	5, 2, 3, 3, 4, 3, 4, 3, 
	3, 4, 3, 2, 2, 2, 2, 3, 
	2, 3, 3, 4, 3, 4, 3, 3, 
	4, 3, 8, 2, 2, 2, 3, 2, 
	3, 3, 4, 3, 4, 3, 3, 4, 
	3, 3, 2, 3, 3, 4, 3, 4, 
	3, 3, 4, 3, 5, 2, 3, 3, 
	4, 3, 4, 3, 3, 4, 3, 2, 
	2, 3, 2, 3, 3, 4, 3, 4, 
	3, 3, 4, 3, 3, 2, 3, 3, 
	4, 3, 4, 3, 3, 4, 3, 4, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	8, 2, 2, 2, 1, 2, 2, 2, 
	1, 2, 2, 2, 1, 1, 2, 2, 
	5, 2, 3, 3, 4, 3, 4, 3, 
	3, 4, 3, 2, 2, 2, 2, 3, 
	2, 3, 3, 4, 3, 4, 3, 3, 
	4, 3, 8, 2, 2, 2, 3, 2, 
	3, 3, 4, 3, 4, 3, 3, 4, 
	3, 3, 2, 3, 3, 4, 3, 4, 
	3, 3, 4, 3, 5, 2, 3, 3, 
	4, 3, 4, 3, 3, 4, 3, 2, 
	2, 3, 2, 3, 3, 4, 3, 4, 
	3, 3, 4, 3, 3, 2, 3, 3, 
	4, 3, 4, 3, 3, 4, 3, 10, 
	4, 6, 2, 3, 3, 5, 16, 1, 
	4, 4, 1, 1, 4, 1, 0, 2, 
	14, 1, 3, 11, 9, 40, 0, 0, 
	0, 0, 4, 4, 10, 2, 6, 1, 
	3, 5, 2, 2, 2, 1, 14, 14, 
	10, 9, 3, 2, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 4, 4, 4, 4, 4, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 4, 4, 4, 4, 
	4, 4, 3, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 4, 
	4, 4, 4, 3, 1, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 4, 4, 4, 4, 3, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 4, 4, 4, 5, 9, 14, 
	14, 10, 3, 3, 4, 4, 3, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 6, 4, 4, 4, 3, 
	0, 6, 4, 3, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	4, 3, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 4, 4, 
	4, 4, 4, 3, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	4, 4, 4, 4, 4, 3, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 6, 4, 3, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 4, 4, 4, 3, 1, 0, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 4, 4, 4, 3, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 4, 4, 
	4, 3, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 22, 4, 
	4, 4, 1, 23, 24, 6, 8, 8, 
	4, 2, 1, 1, 4, 2, 1, 1, 
	2, 5, 5
};

static const char _dtext_range_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 3, 3, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 3, 
	3, 0, 0, 0, 0, 0, 3, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 3, 0, 
	0, 0, 0, 0, 0, 3, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 3, 3, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 3, 3, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 3, 3, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 3, 0, 
	0, 0, 0, 0, 0, 3, 0, 0, 
	0, 0, 1, 1, 1, 2, 1, 3, 
	1, 3, 4, 1, 7, 1, 1, 1, 
	2, 1, 3, 1, 3, 4, 1, 7, 
	7, 1, 1, 1, 2, 1, 3, 1, 
	3, 4, 1, 0, 0, 0, 0, 0, 
	0, 6, 1, 6, 1, 1, 6, 1, 
	1, 1, 1, 6, 1, 6, 1, 1, 
	1, 1, 1, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 1, 
	1, 1, 1, 2, 3, 0, 0, 1, 
	1, 1, 0, 3, 3, 1, 1, 1, 
	2, 4, 1, 0, 4, 4, 4, 1, 
	1, 1, 1, 1, 0, 0, 0, 1, 
	3, 0, 3, 3, 1, 1, 1, 1, 
	1, 1, 0, 3, 0, 0, 1, 0, 
	0, 0, 0, 0, 2, 1, 1, 1, 
	1, 0, 1, 1, 1, 1, 0, 0, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 4, 1, 1, 
	1, 1, 0, 1, 1, 1, 1, 3, 
	0, 0, 0, 0, 0, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	0, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 0, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	0, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 0, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 0, 0, 6, 1, 6, 1, 1, 
	6, 1, 1, 1, 1, 6, 1, 6, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	1, 3, 1, 3, 4, 1, 7, 1, 
	1, 1, 2, 1, 3, 1, 3, 4, 
	1, 7, 7, 1, 1, 1, 2, 1, 
	3, 1, 3, 4, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 0, 3, 3, 0, 1, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 1, 
	0, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 0, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 0, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 0, 0, 0, 0, 0, 
	0, 0, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 0, 3, 0, 1, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 0, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 0, 0, 0, 
	0, 0, 0, 0, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 3, 3, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 1, 0, 1, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 3, 3, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 4, 4, 1, 
	11, 11, 12, 12, 12, 12, 12, 17, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 17, 12, 12, 12, 12, 11, 1, 
	1, 2, 1, 3, 1, 3, 4, 1, 
	8, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 3, 3, 0, 3, 0, 0, 0, 
	0, 0, 3, 0, 0, 0, 0, 0, 
	3, 3, 0, 3, 0, 0, 0, 0, 
	0, 3, 0, 0, 0, 0, 0, 3, 
	3, 0, 3, 0, 0, 0, 0, 0, 
	3, 0, 3, 3, 0, 3, 0, 0, 
	0, 0, 0, 3, 0, 3, 3, 0, 
	3, 0, 0, 0, 0, 0, 3, 0, 
	0, 0, 3, 3, 0, 3, 0, 0, 
	0, 0, 0, 3, 0, 3, 3, 0, 
	3, 0, 0, 0, 0, 0, 3, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 3, 3, 0, 3, 0, 0, 0, 
	0, 0, 3, 0, 0, 0, 0, 0, 
	3, 3, 0, 3, 0, 0, 0, 0, 
	0, 3, 0, 0, 0, 0, 0, 3, 
	3, 0, 3, 0, 0, 0, 0, 0, 
	3, 0, 3, 3, 0, 3, 0, 0, 
	0, 0, 0, 3, 0, 3, 3, 0, 
	3, 0, 0, 0, 0, 0, 3, 0, 
	0, 0, 3, 3, 0, 3, 0, 0, 
	0, 0, 0, 3, 0, 3, 3, 0, 
	3, 0, 0, 0, 0, 0, 3, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 1, 1, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 12, 1, 3, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 7, 7, 
	7, 6, 1, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 1, 0, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 1, 0, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 1, 0, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 1, 
	0, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	1, 0, 3, 3, 3, 3, 6, 7, 
	7, 7, 1, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 1, 0, 3, 3, 3, 3, 3, 
	1, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 1, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 1, 0, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 1, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	1, 0, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 1, 
	0, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 1, 0, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 1, 
	0, 3, 3, 3, 3, 3, 1, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	1, 0, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	1, 0, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 1, 0, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 8, 11, 11, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
};

static const short _dtext_index_offsets[] = {
	0, 0, 5, 12, 19, 22, 25, 28, 
	31, 34, 36, 39, 41, 46, 49, 52, 
	55, 58, 60, 67, 70, 73, 76, 79, 
	82, 84, 87, 89, 92, 95, 98, 101, 
	103, 109, 113, 116, 119, 122, 125, 128, 
	131, 134, 137, 140, 142, 147, 152, 155, 
	160, 164, 170, 175, 180, 185, 188, 191, 
	196, 204, 209, 216, 219, 222, 225, 228, 
	231, 236, 244, 249, 256, 259, 262, 265, 
	268, 271, 274, 276, 281, 284, 287, 290, 
	293, 296, 299, 303, 305, 310, 312, 315, 
	324, 333, 338, 343, 346, 351, 355, 361, 
	366, 369, 372, 377, 385, 390, 397, 400, 
	403, 406, 409, 412, 417, 425, 430, 437, 
	440, 443, 446, 449, 452, 455, 457, 460, 
	463, 466, 469, 471, 474, 477, 480, 483, 
	486, 489, 493, 495, 500, 502, 504, 512, 
	515, 518, 522, 526, 530, 535, 543, 548, 
	559, 561, 564, 566, 570, 573, 576, 579, 
	582, 584, 586, 589, 591, 595, 598, 601, 
	604, 607, 609, 618, 620, 622, 624, 626, 
	628, 630, 632, 634, 636, 638, 640, 645, 
	650, 657, 664, 667, 669, 674, 677, 680, 
	683, 686, 689, 692, 696, 701, 703, 706, 
	709, 712, 715, 717, 724, 727, 729, 732, 
	735, 738, 741, 744, 747, 751, 753, 756, 
	759, 762, 765, 767, 769, 774, 779, 782, 
	785, 788, 791, 793, 796, 799, 802, 805, 
	812, 814, 816, 818, 820, 825, 830, 833, 
	836, 839, 842, 844, 847, 850, 853, 856, 
	863, 865, 867, 869, 873, 879, 891, 904, 
	907, 910, 913, 916, 919, 922, 925, 928, 
	931, 933, 936, 939, 942, 945, 948, 950, 
	953, 956, 959, 962, 964, 967, 970, 973, 
	976, 979, 982, 986, 988, 991, 994, 997, 
	1002, 1006, 1012, 1017, 1020, 1023, 1026, 1029, 
	1032, 1035, 1037, 1039, 1042, 1051, 1060, 1072, 
	1083, 1086, 1089, 1092, 1095, 1098, 1100, 1103, 
	1106, 1109, 1112, 1115, 1118, 1122, 1124, 1127, 
	1130, 1133, 1138, 1142, 1148, 1153, 1156, 1159, 
	1162, 1165, 1168, 1171, 1173, 1175, 1177, 1185, 
	1188, 1191, 1195, 1199, 1203, 1208, 1216, 1221, 
	1223, 1225, 1231, 1233, 1235, 1238, 1241, 1244, 
	1248, 1252, 1256, 1261, 1263, 1285, 1287, 1289, 
	1292, 1295, 1298, 1302, 1306, 1310, 1315, 1317, 
	1339, 1357, 1359, 1361, 1364, 1367, 1370, 1374, 
	1378, 1382, 1387, 1389, 1392, 1395, 1398, 1402, 
	1404, 1406, 1415, 1417, 1427, 1429, 1431, 1443, 
	1445, 1447, 1450, 1453, 1469, 1472, 1479, 1483, 
	1487, 1492, 1494, 1496, 1498, 1503, 1508, 1511, 
	1514, 1517, 1521, 1523, 1525, 1529, 1531, 1533, 
	1543, 1550, 1557, 1562, 1570, 1580, 1585, 1587, 
	1593, 1599, 1605, 1607, 1617, 1624, 1631, 1638, 
	1645, 1652, 1663, 1669, 1671, 1682, 1693, 1704, 
	1711, 1718, 1725, 1732, 1738, 1740, 1745, 1750, 
	1752, 1761, 1765, 1774, 1781, 1789, 1796, 1803, 
	1810, 1817, 1823, 1825, 1832, 1838, 1844, 1846, 
	1848, 1854, 1856, 1858, 1860, 1873, 1881, 1895, 
	1907, 1915, 1920, 1928, 1936, 1944, 1951, 1953, 
	1955, 1964, 1980, 1990, 2006, 2020, 2030, 2039, 
	2041, 2046, 2056, 2065, 2074, 2083, 2092, 2101, 
	2112, 2122, 2131, 2141, 2150, 2159, 2173, 2182, 
	2191, 2200, 2209, 2214, 2222, 2231, 2239, 2247, 
	2254, 2256, 2261, 2263, 2265, 2267, 2271, 2275, 
	2279, 2283, 2287, 2291, 2295, 2299, 2303, 2307, 
	2311, 2313, 2317, 2321, 2325, 2329, 2333, 2337, 
	2341, 2345, 2349, 2353, 2357, 2359, 2363, 2367, 
	2371, 2375, 2379, 2383, 2387, 2391, 2395, 2399, 
	2403, 2405, 2409, 2415, 2419, 2423, 2427, 2431, 
	2435, 2439, 2443, 2447, 2451, 2455, 2457, 2461, 
	2465, 2469, 2473, 2477, 2481, 2485, 2489, 2493, 
	2497, 2501, 2503, 2505, 2514, 2516, 2526, 2528, 
	2530, 2542, 2544, 2546, 2549, 2552, 2568, 2571, 
	2578, 2582, 2586, 2591, 2593, 2595, 2597, 2600, 
	2603, 2606, 2610, 2614, 2618, 2623, 2625, 2647, 
	2649, 2651, 2654, 2657, 2660, 2664, 2668, 2672, 
	2677, 2679, 2701, 2719, 2721, 2723, 2726, 2729, 
	2732, 2736, 2740, 2744, 2749, 2751, 2753, 2756, 
	2759, 2762, 2765, 2768, 2771, 2773, 2775, 2779, 
	2783, 2787, 2791, 2795, 2799, 2803, 2807, 2811, 
	2815, 2819, 2821, 2825, 2830, 2833, 2835, 2840, 
	2845, 2850, 2855, 2860, 2865, 2870, 2875, 2880, 
	2883, 2885, 2889, 2893, 2897, 2901, 2905, 2909, 
	2913, 2917, 2921, 2925, 2927, 2931, 2935, 2939, 
	2943, 2947, 2951, 2955, 2959, 2963, 2967, 2971, 
	2973, 2977, 2981, 2985, 2989, 2993, 2997, 3001, 
	3005, 3009, 3013, 3017, 3019, 3023, 3027, 3031, 
	3035, 3039, 3043, 3047, 3051, 3055, 3059, 3063, 
	3065, 3069, 3073, 3077, 3081, 3085, 3089, 3093, 
	3097, 3101, 3105, 3109, 3116, 3119, 3122, 3125, 
	3128, 3130, 3132, 3136, 3140, 3144, 3148, 3152, 
	3156, 3160, 3164, 3168, 3172, 3176, 3179, 3182, 
	3185, 3188, 3191, 3194, 3197, 3200, 3203, 3206, 
	3208, 3210, 3214, 3218, 3222, 3226, 3230, 3234, 
	3238, 3242, 3246, 3250, 3254, 3257, 3260, 3263, 
	3266, 3269, 3272, 3275, 3278, 3281, 3284, 3286, 
	3288, 3292, 3296, 3300, 3304, 3308, 3312, 3316, 
	3320, 3324, 3328, 3332, 3334, 3338, 3341, 3343, 
	3347, 3351, 3355, 3359, 3363, 3367, 3371, 3375, 
	3379, 3383, 3387, 3391, 3395, 3399, 3403, 3407, 
	3411, 3415, 3419, 3423, 3427, 3431, 3434, 3437, 
	3440, 3443, 3446, 3448, 3450, 3454, 3458, 3462, 
	3466, 3470, 3474, 3478, 3482, 3486, 3490, 3494, 
	3496, 3500, 3504, 3508, 3512, 3516, 3520, 3524, 
	3528, 3532, 3536, 3540, 3557, 3559, 3561, 3565, 
	3567, 3571, 3573, 3578, 3581, 3584, 3587, 3590, 
	3592, 3597, 3600, 3605, 3609, 3615, 3620, 3625, 
	3630, 3633, 3636, 3641, 3649, 3654, 3661, 3664, 
	3667, 3670, 3673, 3676, 3681, 3689, 3694, 3701, 
	3704, 3707, 3710, 3714, 3716, 3718, 3722, 3727, 
	3733, 3737, 3742, 3744, 3746, 3749, 3752, 3755, 
	3758, 3761, 3764, 3766, 3771, 3774, 3777, 3780, 
	3783, 3785, 3789, 3792, 3795, 3798, 3801, 3804, 
	3808, 3810, 3813, 3815, 3819, 3822, 3827, 3831, 
	3840, 3845, 3850, 3854, 3860, 3867, 3871, 3873, 
	3876, 3879, 3882, 3884, 3891, 3894, 3897, 3900, 
	3904, 3906, 3908, 3912, 3914, 3920, 3925, 3930, 
	3933, 3936, 3939, 3943, 3945, 3947, 3951, 3953, 
	3956, 3959, 3962, 3966, 3968, 3970, 3974, 3976, 
	3983, 3989, 3993, 3995, 3998, 4001, 4004, 4006, 
	4013, 4021, 4029, 4037, 4044, 4047, 4050, 4053, 
	4057, 4059, 4061, 4065, 4067, 4084, 4088, 4093, 
	4095, 4101, 4104, 4107, 4110, 4113, 4115, 4117, 
	4120, 4125, 4128, 4131, 4134, 4136, 4138, 4143, 
	4148, 4154, 4158, 4163, 4169, 4176, 4182, 4185, 
	4188, 4191, 4195, 4197, 4199, 4203, 4205, 4211, 
	4214, 4217, 4220, 4223, 4226, 4229, 4232, 4235, 
	4237, 4239, 4244, 4247, 4250, 4253, 4256, 4258, 
	4263, 4266, 4271, 4275, 4281, 4286, 4289, 4292, 
	4297, 4305, 4310, 4317, 4322, 4324, 4327, 4330, 
	4333, 4336, 4341, 4349, 4354, 4361, 4364, 4367, 
	4370, 4374, 4376, 4378, 4382, 4387, 4389, 4392, 
	4395, 4398, 4401, 4404, 4407, 4409, 4415, 4418, 
	4421, 4424, 4427, 4430, 4434, 4436, 4439, 4442, 
	4445, 4448, 4450, 4453, 4455, 4457, 4462, 4468, 
	4470, 4490, 4510, 4531, 4552, 4574, 4596, 4618, 
	4644, 4667, 4690, 4711, 4735, 4756, 4777, 4799, 
	4821, 4843, 4869, 4892, 4915, 4939, 4960, 4982, 
	4984, 4987, 4990, 4993, 4997, 5001, 5005, 5010, 
	5012, 5025, 5027, 5030, 5033, 5036, 5039, 5041, 
	5043, 5046, 5049, 5052, 5055, 5057, 5059, 5062, 
	5065, 5068, 5071, 5074, 5077, 5080, 5082, 5084, 
	5087, 5090, 5093, 5096, 5099, 5102, 5105, 5107, 
	5112, 5115, 5118, 5121, 5124, 5127, 5130, 5133, 
	5135, 5144, 5147, 5150, 5153, 5155, 5158, 5161, 
	5164, 5166, 5169, 5172, 5175, 5177, 5179, 5182, 
	5185, 5191, 5197, 5204, 5208, 5216, 5220, 5225, 
	5229, 5233, 5238, 5245, 5248, 5251, 5254, 5257, 
	5261, 5267, 5274, 5278, 5286, 5290, 5295, 5299, 
	5303, 5308, 5315, 5324, 5327, 5330, 5333, 5337, 
	5343, 5350, 5354, 5362, 5366, 5371, 5375, 5379, 
	5384, 5391, 5395, 5401, 5408, 5412, 5420, 5424, 
	5429, 5433, 5437, 5442, 5449, 5455, 5461, 5468, 
	5472, 5480, 5484, 5489, 5493, 5497, 5502, 5509, 
	5512, 5515, 5519, 5525, 5532, 5536, 5544, 5548, 
	5553, 5557, 5561, 5566, 5573, 5577, 5583, 5590, 
	5594, 5602, 5606, 5611, 5615, 5619, 5624, 5631, 
	5636, 5639, 5642, 5645, 5648, 5651, 5654, 5657, 
	5659, 5668, 5671, 5674, 5677, 5679, 5682, 5685, 
	5688, 5690, 5693, 5696, 5699, 5701, 5703, 5706, 
	5709, 5715, 5721, 5728, 5732, 5740, 5744, 5749, 
	5753, 5757, 5762, 5769, 5772, 5775, 5778, 5781, 
	5785, 5791, 5798, 5802, 5810, 5814, 5819, 5823, 
	5827, 5832, 5839, 5848, 5851, 5854, 5857, 5861, 
	5867, 5874, 5878, 5886, 5890, 5895, 5899, 5903, 
	5908, 5915, 5919, 5925, 5932, 5936, 5944, 5948, 
	5953, 5957, 5961, 5966, 5973, 5979, 5985, 5992, 
	5996, 6004, 6008, 6013, 6017, 6021, 6026, 6033, 
	6036, 6039, 6043, 6049, 6056, 6060, 6068, 6072, 
	6077, 6081, 6085, 6090, 6097, 6101, 6107, 6114, 
	6118, 6126, 6130, 6135, 6139, 6143, 6148, 6155, 
	6166, 6171, 6178, 6181, 6185, 6189, 6195, 6212, 
	6215, 6220, 6225, 6228, 6231, 6236, 6239, 6241, 
	6244, 6259, 6261, 6265, 6277, 6287, 6340, 6342, 
	6346, 6348, 6350, 6355, 6360, 6371, 6374, 6381, 
	6383, 6387, 6393, 6396, 6399, 6402, 6404, 6426, 
	6448, 6466, 6482, 6487, 6493, 6497, 6501, 6505, 
	6509, 6513, 6517, 6521, 6525, 6529, 6533, 6537, 
	6541, 6546, 6551, 6559, 6567, 6575, 6583, 6591, 
	6598, 6602, 6606, 6610, 6614, 6618, 6622, 6626, 
	6630, 6634, 6638, 6640, 6641, 6649, 6657, 6665, 
	6672, 6676, 6680, 6684, 6688, 6692, 6696, 6700, 
	6704, 6708, 6712, 6714, 6715, 6723, 6731, 6739, 
	6747, 6755, 6763, 6770, 6774, 6778, 6782, 6786, 
	6790, 6794, 6798, 6802, 6806, 6810, 6812, 6813, 
	6821, 6829, 6837, 6845, 6852, 6857, 6863, 6868, 
	6873, 6878, 6883, 6888, 6893, 6898, 6903, 6908, 
	6911, 6913, 6921, 6929, 6937, 6945, 6952, 6956, 
	6960, 6964, 6968, 6972, 6976, 6980, 6984, 6988, 
	6992, 6994, 6995, 7003, 7011, 7019, 7028, 7044, 
	7066, 7088, 7106, 7111, 7118, 7126, 7134, 7141, 
	7145, 7149, 7153, 7157, 7161, 7165, 7169, 7173, 
	7177, 7181, 7183, 7184, 7194, 7202, 7210, 7218, 
	7225, 7227, 7237, 7245, 7252, 7256, 7260, 7264, 
	7268, 7272, 7276, 7280, 7284, 7288, 7292, 7294, 
	7295, 7303, 7310, 7314, 7318, 7322, 7326, 7330, 
	7334, 7338, 7342, 7346, 7350, 7352, 7353, 7361, 
	7369, 7377, 7385, 7393, 7400, 7404, 7408, 7412, 
	7416, 7420, 7424, 7428, 7432, 7436, 7440, 7442, 
	7443, 7451, 7459, 7467, 7475, 7483, 7490, 7494, 
	7498, 7502, 7506, 7510, 7514, 7518, 7522, 7526, 
	7530, 7532, 7533, 7543, 7551, 7558, 7562, 7566, 
	7570, 7574, 7578, 7582, 7586, 7590, 7594, 7598, 
	7600, 7601, 7605, 7609, 7613, 7617, 7621, 7625, 
	7629, 7633, 7637, 7641, 7643, 7644, 7648, 7652, 
	7656, 7660, 7664, 7668, 7672, 7676, 7680, 7684, 
	7686, 7687, 7695, 7703, 7711, 7718, 7723, 7725, 
	7730, 7735, 7740, 7745, 7750, 7755, 7760, 7765, 
	7770, 7773, 7775, 7783, 7791, 7799, 7806, 7810, 
	7814, 7818, 7822, 7826, 7830, 7834, 7838, 7842, 
	7846, 7848, 7849, 7853, 7857, 7861, 7865, 7869, 
	7873, 7877, 7881, 7885, 7889, 7891, 7892, 7900, 
	7908, 7916, 7923, 7927, 7931, 7935, 7939, 7943, 
	7947, 7951, 7955, 7959, 7963, 7965, 7966, 7989, 
	7994, 7999, 8004, 8006, 8030, 8055, 8070, 8090, 
	8110, 8115, 8118, 8120, 8122, 8127, 8130, 8132, 
	8134, 8137, 8143
};

static const short _dtext_indicies[] = {
	1, 2, 1, 2, 0, 1, 4, 1, 
	4, 5, 6, 3, 7, 8, 9, 7, 
	8, 9, 3, 10, 10, 3, 11, 11, 
	3, 12, 12, 3, 13, 13, 3, 14, 
	14, 3, 15, 3, 16, 16, 3, 17, 
	3, 18, 17, 18, 17, 3, 19, 19, 
	3, 20, 20, 3, 21, 21, 3, 22, 
	22, 3, 23, 3, 24, 25, 26, 24, 
	25, 26, 3, 27, 27, 3, 28, 28, 
	3, 29, 29, 3, 30, 30, 3, 31, 
	31, 3, 15, 3, 32, 32, 3, 17, 
	3, 33, 33, 3, 34, 34, 3, 35, 
	35, 3, 36, 36, 3, 23, 3, 3, 
	38, 3, 3, 38, 37, 39, 39, 40, 
	3, 41, 41, 3, 42, 42, 3, 43, 
	43, 3, 44, 44, 3, 45, 45, 3, 
	46, 46, 3, 47, 47, 3, 48, 48, 
	3, 49, 49, 3, 50, 3, 10, 51, 
	10, 51, 3, 52, 53, 52, 53, 3, 
	54, 54, 3, 55, 55, 56, 57, 3, 
	55, 55, 56, 3, 56, 56, 58, 58, 
	58, 3, 60, 59, 59, 59, 3, 62, 
	63, 62, 63, 61, 65, 66, 65, 66, 
	64, 67, 67, 3, 68, 68, 3, 69, 
	69, 70, 71, 3, 3, 73, 3, 3, 
	73, 74, 75, 72, 3, 3, 3, 77, 
	76, 3, 74, 3, 3, 74, 75, 72, 
	78, 78, 3, 79, 79, 3, 80, 80, 
	3, 81, 81, 3, 82, 82, 3, 83, 
	83, 84, 85, 3, 3, 87, 3, 3, 
	87, 88, 89, 86, 3, 3, 3, 91, 
	90, 3, 88, 3, 3, 88, 89, 86, 
	92, 92, 3, 93, 93, 3, 94, 94, 
	3, 95, 95, 3, 96, 96, 3, 97, 
	97, 3, 98, 3, 100, 101, 100, 101, 
	99, 102, 102, 3, 103, 103, 3, 104, 
	104, 3, 105, 105, 3, 106, 106, 3, 
	107, 107, 3, 108, 109, 109, 3, 108, 
	3, 19, 110, 19, 110, 3, 111, 3, 
	112, 113, 3, 114, 114, 114, 114, 114, 
	114, 114, 114, 3, 115, 115, 115, 116, 
	115, 115, 115, 115, 3, 27, 117, 27, 
	117, 3, 118, 119, 118, 119, 3, 120, 
	120, 3, 121, 121, 122, 57, 3, 121, 
	121, 122, 3, 122, 122, 123, 123, 123, 
	3, 60, 124, 124, 124, 3, 125, 125, 
	3, 126, 126, 3, 127, 127, 128, 71, 
	3, 3, 130, 3, 3, 130, 131, 75, 
	129, 3, 3, 3, 77, 132, 3, 131, 
	3, 3, 131, 75, 129, 133, 133, 3, 
	134, 134, 3, 135, 135, 3, 136, 136, 
	3, 137, 137, 3, 138, 138, 139, 85, 
	3, 3, 141, 3, 3, 141, 142, 89, 
	140, 3, 3, 3, 91, 143, 3, 142, 
	3, 3, 142, 89, 140, 144, 144, 3, 
	145, 145, 3, 146, 146, 3, 147, 147, 
	3, 148, 148, 3, 149, 149, 3, 98, 
	3, 150, 150, 3, 151, 151, 3, 152, 
	152, 3, 153, 153, 3, 50, 3, 154, 
	154, 3, 155, 155, 3, 156, 156, 3, 
	157, 157, 3, 158, 158, 3, 159, 159, 
	3, 160, 108, 160, 3, 108, 3, 33, 
	161, 33, 161, 3, 111, 3, 162, 3, 
	163, 164, 163, 164, 165, 165, 165, 3, 
	167, 167, 166, 169, 169, 168, 169, 169, 
	170, 168, 169, 169, 171, 168, 169, 169, 
	172, 168, 173, 172, 173, 172, 168, 174, 
	175, 174, 175, 176, 176, 176, 3, 177, 
	178, 177, 178, 3, 180, 181, 182, 183, 
	184, 180, 181, 182, 183, 184, 179, 185, 
	179, 182, 182, 179, 186, 179, 187, 188, 
	188, 179, 189, 189, 179, 190, 190, 179, 
	191, 191, 179, 180, 180, 179, 192, 179, 
	193, 179, 194, 194, 179, 195, 179, 196, 
	197, 197, 179, 198, 198, 179, 199, 199, 
	179, 200, 200, 179, 201, 201, 179, 202, 
	179, 203, 204, 205, 206, 203, 204, 205, 
	206, 179, 185, 179, 186, 179, 187, 179, 
	192, 179, 193, 179, 195, 179, 196, 179, 
	202, 179, 208, 207, 209, 207, 211, 210, 
	212, 213, 212, 213, 207, 213, 215, 213, 
	215, 214, 212, 217, 212, 217, 218, 219, 
	216, 220, 221, 222, 220, 221, 222, 216, 
	223, 223, 216, 224, 216, 225, 224, 225, 
	224, 216, 226, 226, 216, 227, 227, 216, 
	228, 228, 216, 229, 229, 216, 230, 230, 
	216, 231, 231, 216, 232, 233, 233, 216, 
	234, 232, 234, 232, 216, 232, 216, 235, 
	235, 216, 236, 236, 216, 237, 237, 216, 
	238, 238, 216, 239, 216, 240, 241, 242, 
	240, 241, 242, 216, 243, 243, 216, 224, 
	216, 244, 244, 216, 245, 245, 216, 246, 
	246, 216, 247, 247, 216, 248, 248, 216, 
	249, 249, 216, 250, 232, 250, 216, 232, 
	216, 251, 251, 216, 252, 252, 216, 253, 
	253, 216, 254, 254, 216, 239, 216, 256, 
	255, 257, 258, 257, 258, 255, 259, 260, 
	259, 260, 207, 261, 261, 207, 262, 262, 
	207, 263, 263, 207, 264, 264, 207, 265, 
	207, 266, 266, 207, 267, 267, 207, 268, 
	268, 207, 269, 269, 207, 270, 271, 272, 
	270, 271, 272, 207, 273, 207, 274, 207, 
	275, 207, 276, 255, 277, 278, 277, 278, 
	255, 279, 280, 279, 280, 207, 281, 281, 
	207, 282, 282, 207, 283, 283, 207, 284, 
	284, 207, 265, 207, 285, 285, 207, 286, 
	286, 207, 287, 287, 207, 269, 269, 207, 
	288, 289, 290, 288, 289, 290, 207, 273, 
	207, 274, 207, 275, 207, 291, 291, 292, 
	216, 216, 294, 216, 216, 294, 293, 295, 
	296, 220, 297, 221, 222, 296, 220, 297, 
	221, 222, 216, 298, 257, 299, 300, 301, 
	258, 298, 257, 299, 300, 301, 258, 216, 
	302, 302, 216, 303, 303, 207, 304, 304, 
	207, 305, 305, 207, 306, 306, 207, 307, 
	307, 207, 308, 308, 207, 309, 309, 207, 
	310, 310, 207, 311, 207, 312, 312, 216, 
	313, 313, 207, 314, 314, 207, 315, 315, 
	207, 316, 316, 207, 317, 207, 318, 318, 
	207, 319, 319, 207, 320, 320, 207, 321, 
	321, 207, 311, 207, 322, 322, 216, 323, 
	323, 207, 324, 324, 207, 325, 325, 207, 
	326, 326, 207, 327, 327, 207, 328, 329, 
	329, 207, 328, 207, 330, 330, 216, 331, 
	331, 216, 332, 332, 216, 333, 333, 334, 
	335, 216, 333, 333, 334, 216, 334, 334, 
	336, 336, 336, 216, 338, 337, 337, 337, 
	216, 339, 339, 216, 340, 340, 216, 341, 
	341, 216, 342, 342, 216, 343, 343, 216, 
	344, 344, 216, 335, 216, 345, 216, 346, 
	347, 216, 348, 348, 348, 348, 348, 348, 
	348, 348, 216, 349, 349, 349, 350, 349, 
	349, 349, 349, 216, 351, 352, 240, 353, 
	241, 242, 352, 240, 353, 241, 242, 216, 
	277, 354, 306, 355, 278, 277, 354, 306, 
	355, 278, 216, 356, 356, 207, 357, 357, 
	207, 358, 358, 207, 359, 359, 207, 360, 
	360, 207, 317, 207, 361, 361, 216, 362, 
	362, 207, 363, 363, 207, 364, 364, 207, 
	365, 365, 207, 366, 366, 207, 367, 328, 
	367, 207, 328, 207, 368, 368, 216, 369, 
	369, 216, 370, 370, 216, 371, 371, 372, 
	335, 216, 371, 371, 372, 216, 372, 372, 
	373, 373, 373, 216, 338, 374, 374, 374, 
	216, 375, 375, 216, 376, 376, 216, 377, 
	377, 216, 378, 378, 216, 379, 379, 216, 
	380, 380, 216, 335, 216, 381, 216, 382, 
	216, 383, 384, 383, 384, 385, 385, 385, 
	216, 387, 387, 386, 389, 389, 388, 389, 
	389, 390, 388, 389, 389, 391, 388, 389, 
	389, 392, 388, 393, 392, 393, 392, 388, 
	394, 395, 394, 395, 396, 396, 396, 216, 
	397, 398, 397, 398, 216, 400, 399, 401, 
	214, 402, 403, 404, 405, 404, 214, 407, 
	406, 408, 406, 409, 408, 406, 407, 407, 
	406, 410, 408, 406, 407, 407, 407, 406, 
	411, 412, 408, 406, 407, 407, 407, 406, 
	407, 407, 407, 407, 406, 413, 406, 414, 
	415, 416, 406, 418, 406, 418, 418, 418, 
	406, 406, 418, 406, 406, 406, 408, 413, 
	417, 406, 406, 418, 407, 419, 406, 420, 
	406, 421, 420, 406, 419, 419, 406, 422, 
	420, 406, 419, 419, 419, 406, 423, 424, 
	420, 406, 419, 419, 419, 406, 419, 419, 
	419, 419, 406, 425, 406, 426, 427, 428, 
	406, 430, 407, 430, 430, 430, 406, 406, 
	431, 406, 406, 406, 420, 425, 429, 406, 
	406, 430, 419, 434, 435, 436, 207, 431, 
	407, 431, 431, 431, 431, 207, 432, 433, 
	437, 207, 207, 431, 438, 438, 207, 432, 
	207, 439, 432, 207, 438, 438, 207, 440, 
	432, 207, 438, 438, 438, 207, 441, 442, 
	432, 207, 438, 438, 438, 207, 438, 438, 
	438, 438, 207, 433, 207, 443, 443, 214, 
	444, 444, 214, 445, 445, 214, 446, 447, 
	447, 214, 448, 214, 449, 214, 453, 453, 
	450, 451, 452, 453, 453, 453, 214, 453, 
	214, 453, 454, 453, 450, 451, 452, 453, 
	453, 453, 214, 450, 214, 451, 214, 457, 
	458, 459, 461, 461, 455, 456, 460, 461, 
	461, 461, 207, 461, 207, 455, 207, 462, 
	455, 207, 463, 461, 207, 457, 458, 459, 
	407, 454, 419, 464, 431, 461, 455, 456, 
	460, 461, 461, 461, 207, 465, 455, 207, 
	463, 461, 463, 461, 463, 461, 207, 466, 
	467, 455, 207, 463, 463, 461, 207, 463, 
	463, 463, 461, 207, 456, 207, 468, 207, 
	446, 214, 469, 469, 470, 470, 214, 214, 
	214, 472, 214, 471, 473, 473, 214, 474, 
	474, 214, 475, 475, 214, 476, 477, 477, 
	214, 478, 214, 479, 214, 214, 214, 214, 
	471, 476, 214, 480, 210, 482, 482, 484, 
	485, 486, 487, 207, 488, 483, 481, 490, 
	490, 492, 493, 494, 491, 489, 495, 495, 
	496, 497, 498, 491, 489, 491, 207, 207, 
	491, 489, 490, 490, 492, 493, 494, 491, 
	499, 489, 500, 501, 502, 504, 502, 505, 
	503, 503, 503, 207, 506, 506, 497, 498, 
	207, 507, 207, 509, 509, 510, 207, 207, 
	508, 512, 512, 513, 207, 207, 511, 514, 
	514, 515, 207, 207, 511, 516, 207, 506, 
	517, 502, 497, 502, 498, 503, 503, 503, 
	207, 502, 502, 502, 503, 503, 503, 207, 
	490, 490, 492, 493, 518, 491, 489, 519, 
	519, 520, 521, 207, 207, 508, 522, 522, 
	523, 524, 207, 207, 508, 512, 512, 513, 
	207, 207, 525, 511, 526, 527, 528, 530, 
	528, 207, 207, 529, 529, 529, 511, 531, 
	531, 532, 207, 207, 511, 533, 207, 531, 
	534, 528, 532, 528, 207, 207, 529, 529, 
	529, 511, 512, 535, 528, 513, 528, 207, 
	207, 529, 529, 529, 511, 514, 536, 528, 
	515, 528, 207, 207, 529, 529, 529, 511, 
	490, 490, 492, 493, 537, 491, 489, 509, 
	509, 538, 510, 207, 207, 508, 512, 512, 
	513, 539, 207, 207, 511, 512, 512, 540, 
	513, 207, 207, 511, 512, 512, 513, 541, 
	207, 511, 542, 207, 543, 543, 544, 493, 
	207, 545, 545, 546, 497, 207, 547, 207, 
	548, 549, 550, 504, 550, 551, 551, 551, 
	207, 552, 552, 497, 207, 552, 553, 550, 
	497, 550, 551, 551, 551, 207, 550, 550, 
	550, 551, 551, 551, 207, 490, 490, 492, 
	554, 493, 555, 491, 489, 509, 509, 556, 
	510, 207, 207, 508, 557, 557, 558, 559, 
	207, 207, 511, 560, 560, 561, 532, 207, 
	207, 511, 490, 490, 492, 493, 562, 491, 
	489, 509, 509, 510, 563, 207, 508, 542, 
	207, 565, 566, 567, 564, 564, 564, 207, 
	568, 568, 569, 493, 494, 207, 570, 570, 
	571, 497, 498, 207, 499, 207, 564, 207, 
	568, 568, 569, 493, 518, 207, 572, 207, 
	565, 207, 573, 210, 207, 573, 573, 575, 
	576, 577, 578, 579, 580, 575, 207, 207, 
	574, 207, 582, 582, 207, 583, 584, 207, 
	581, 207, 585, 585, 586, 587, 588, 589, 
	590, 207, 591, 592, 586, 207, 581, 207, 
	582, 582, 587, 588, 589, 590, 207, 593, 
	584, 207, 581, 207, 582, 582, 594, 595, 
	596, 207, 581, 582, 582, 583, 584, 207, 
	207, 598, 207, 207, 598, 600, 599, 597, 
	207, 602, 207, 207, 602, 604, 603, 601, 
	207, 605, 207, 207, 605, 606, 603, 601, 
	207, 207, 207, 603, 207, 603, 601, 607, 
	207, 608, 207, 207, 609, 207, 207, 609, 
	610, 611, 599, 597, 207, 613, 207, 207, 
	613, 614, 615, 616, 617, 618, 597, 619, 
	620, 614, 599, 612, 207, 622, 207, 207, 
	622, 601, 583, 623, 603, 621, 207, 624, 
	207, 207, 624, 625, 626, 627, 628, 629, 
	601, 591, 630, 625, 603, 621, 207, 622, 
	207, 207, 622, 626, 627, 628, 629, 601, 
	593, 623, 603, 621, 207, 622, 207, 207, 
	622, 631, 595, 632, 603, 621, 207, 622, 
	207, 207, 622, 583, 623, 603, 601, 633, 
	207, 582, 582, 583, 634, 207, 207, 622, 
	207, 207, 622, 601, 635, 623, 603, 621, 
	207, 598, 207, 207, 598, 636, 600, 599, 
	597, 207, 602, 207, 207, 602, 637, 604, 
	603, 601, 207, 602, 207, 207, 602, 638, 
	604, 603, 601, 207, 602, 207, 207, 602, 
	639, 604, 603, 601, 207, 602, 207, 207, 
	602, 631, 604, 603, 601, 207, 622, 207, 
	207, 622, 640, 601, 641, 623, 603, 621, 
	207, 622, 207, 207, 622, 601, 595, 623, 
	603, 621, 207, 598, 207, 207, 598, 642, 
	600, 599, 597, 207, 622, 207, 207, 622, 
	601, 643, 623, 603, 621, 207, 598, 207, 
	207, 598, 644, 600, 599, 597, 207, 602, 
	207, 207, 602, 631, 604, 603, 601, 207, 
	598, 207, 207, 598, 645, 646, 647, 600, 
	599, 642, 642, 642, 597, 207, 602, 207, 
	207, 602, 631, 604, 603, 601, 207, 622, 
	207, 207, 622, 595, 623, 603, 601, 207, 
	602, 207, 207, 602, 648, 604, 603, 601, 
	207, 602, 207, 207, 602, 649, 604, 603, 
	601, 582, 582, 583, 650, 207, 207, 582, 
	582, 207, 635, 584, 207, 581, 207, 582, 
	582, 651, 207, 641, 584, 207, 581, 207, 
	582, 582, 207, 595, 584, 207, 581, 207, 
	582, 582, 207, 643, 584, 207, 581, 652, 
	653, 654, 594, 594, 594, 207, 594, 207, 
	582, 582, 595, 584, 207, 655, 207, 652, 
	207, 656, 210, 657, 658, 658, 210, 659, 
	659, 659, 207, 660, 660, 660, 207, 661, 
	661, 661, 207, 662, 662, 662, 207, 663, 
	663, 663, 207, 664, 664, 664, 207, 665, 
	665, 665, 207, 666, 666, 666, 207, 667, 
	667, 667, 207, 668, 668, 668, 210, 669, 
	210, 670, 671, 671, 210, 672, 672, 672, 
	207, 673, 673, 673, 207, 674, 674, 674, 
	207, 675, 675, 675, 207, 676, 676, 676, 
	207, 677, 677, 677, 207, 678, 678, 678, 
	207, 679, 679, 679, 207, 680, 680, 680, 
	207, 681, 681, 681, 210, 682, 210, 683, 
	684, 684, 210, 685, 685, 685, 207, 686, 
	686, 686, 207, 687, 687, 687, 207, 688, 
	688, 688, 207, 689, 689, 689, 207, 690, 
	690, 690, 207, 691, 691, 691, 207, 692, 
	692, 692, 207, 693, 693, 693, 207, 694, 
	694, 694, 210, 695, 210, 696, 697, 697, 
	210, 699, 699, 699, 699, 699, 698, 700, 
	700, 700, 207, 701, 701, 701, 207, 702, 
	702, 702, 207, 703, 703, 703, 207, 704, 
	704, 704, 207, 705, 705, 705, 207, 706, 
	706, 706, 207, 707, 707, 707, 207, 708, 
	708, 708, 207, 709, 709, 709, 210, 710, 
	210, 711, 712, 712, 210, 713, 713, 713, 
	207, 714, 714, 714, 207, 715, 715, 715, 
	207, 716, 716, 716, 207, 717, 717, 717, 
	207, 718, 718, 718, 207, 719, 719, 719, 
	207, 720, 720, 720, 207, 721, 721, 721, 
	207, 722, 722, 722, 210, 723, 210, 724, 
	210, 728, 728, 725, 726, 727, 728, 728, 
	728, 210, 728, 210, 728, 729, 728, 725, 
	726, 727, 728, 728, 728, 210, 725, 210, 
	726, 210, 732, 733, 734, 736, 736, 730, 
	731, 735, 736, 736, 736, 207, 736, 207, 
	730, 207, 737, 730, 207, 738, 736, 207, 
	732, 733, 734, 739, 729, 740, 741, 742, 
	736, 730, 731, 735, 736, 736, 736, 207, 
	743, 730, 207, 738, 736, 738, 736, 738, 
	736, 207, 744, 745, 730, 207, 738, 738, 
	736, 207, 738, 738, 738, 736, 207, 731, 
	207, 739, 746, 747, 746, 748, 747, 746, 
	739, 739, 746, 749, 747, 746, 739, 739, 
	739, 746, 750, 751, 747, 746, 739, 739, 
	739, 746, 739, 739, 739, 739, 746, 752, 
	746, 753, 754, 755, 746, 757, 746, 757, 
	757, 757, 746, 746, 757, 746, 746, 746, 
	747, 752, 756, 746, 746, 757, 739, 740, 
	746, 758, 746, 759, 758, 746, 740, 740, 
	746, 760, 758, 746, 740, 740, 740, 746, 
	761, 762, 758, 746, 740, 740, 740, 746, 
	740, 740, 740, 740, 746, 763, 746, 764, 
	765, 766, 746, 768, 739, 768, 768, 768, 
	746, 746, 742, 746, 746, 746, 758, 763, 
	767, 746, 746, 768, 740, 771, 772, 773, 
	207, 742, 739, 742, 742, 742, 742, 207, 
	769, 770, 774, 207, 207, 742, 775, 775, 
	207, 769, 207, 776, 769, 207, 775, 775, 
	207, 777, 769, 207, 775, 775, 775, 207, 
	778, 779, 769, 207, 775, 775, 775, 207, 
	775, 775, 775, 775, 207, 770, 207, 780, 
	207, 781, 781, 210, 782, 782, 210, 783, 
	783, 210, 784, 784, 210, 785, 785, 210, 
	786, 786, 210, 787, 210, 788, 210, 789, 
	790, 790, 210, 791, 791, 791, 207, 792, 
	792, 792, 207, 793, 793, 793, 207, 794, 
	794, 794, 207, 795, 795, 795, 207, 796, 
	796, 796, 207, 797, 797, 797, 207, 798, 
	798, 798, 207, 799, 799, 799, 207, 800, 
	800, 800, 210, 801, 210, 802, 803, 803, 
	210, 804, 805, 806, 806, 210, 807, 807, 
	210, 808, 210, 804, 809, 810, 810, 210, 
	804, 811, 812, 812, 210, 804, 813, 814, 
	814, 210, 804, 815, 816, 816, 210, 804, 
	817, 818, 818, 210, 804, 819, 820, 820, 
	210, 804, 821, 822, 822, 210, 804, 823, 
	824, 824, 210, 804, 825, 826, 826, 210, 
	804, 825, 210, 804, 210, 826, 826, 826, 
	210, 824, 824, 824, 210, 822, 822, 822, 
	210, 820, 820, 820, 210, 818, 818, 818, 
	210, 816, 816, 816, 210, 814, 814, 814, 
	210, 812, 812, 812, 210, 810, 810, 810, 
	210, 806, 806, 806, 210, 827, 210, 828, 
	829, 829, 210, 830, 830, 830, 207, 831, 
	831, 831, 207, 832, 832, 832, 207, 833, 
	833, 833, 207, 834, 834, 834, 207, 835, 
	835, 835, 207, 836, 836, 836, 207, 837, 
	837, 837, 207, 838, 838, 838, 207, 839, 
	839, 839, 210, 840, 210, 841, 842, 842, 
	210, 843, 843, 843, 207, 844, 844, 844, 
	207, 845, 845, 845, 207, 846, 846, 846, 
	207, 847, 847, 847, 207, 848, 848, 848, 
	207, 849, 849, 849, 207, 850, 850, 850, 
	207, 851, 851, 851, 207, 852, 852, 852, 
	210, 853, 210, 854, 855, 855, 210, 856, 
	856, 856, 207, 857, 857, 857, 207, 858, 
	858, 858, 207, 859, 859, 859, 207, 860, 
	860, 860, 207, 861, 861, 861, 207, 862, 
	862, 862, 207, 863, 863, 863, 207, 864, 
	864, 864, 207, 865, 865, 865, 210, 866, 
	210, 867, 868, 868, 210, 869, 869, 869, 
	207, 870, 870, 870, 207, 871, 871, 871, 
	207, 872, 872, 872, 207, 873, 873, 873, 
	207, 874, 874, 874, 207, 875, 875, 875, 
	207, 876, 876, 876, 207, 877, 877, 877, 
	207, 878, 878, 878, 210, 879, 880, 881, 
	879, 880, 881, 210, 882, 882, 210, 883, 
	883, 210, 884, 884, 210, 885, 885, 210, 
	886, 210, 887, 210, 888, 889, 889, 210, 
	890, 890, 890, 207, 891, 891, 891, 207, 
	892, 892, 892, 207, 893, 893, 893, 207, 
	894, 894, 894, 207, 895, 895, 895, 207, 
	896, 896, 896, 207, 897, 897, 897, 207, 
	898, 898, 898, 207, 899, 899, 899, 210, 
	900, 900, 210, 901, 901, 210, 902, 902, 
	210, 903, 903, 210, 904, 904, 210, 905, 
	905, 210, 906, 906, 210, 907, 907, 210, 
	908, 908, 210, 909, 909, 210, 910, 210, 
	911, 210, 912, 913, 913, 210, 914, 914, 
	914, 207, 915, 915, 915, 207, 916, 916, 
	916, 207, 917, 917, 917, 207, 918, 918, 
	918, 207, 919, 919, 919, 207, 920, 920, 
	920, 207, 921, 921, 921, 207, 922, 922, 
	922, 207, 923, 923, 923, 210, 924, 924, 
	210, 925, 925, 210, 926, 926, 210, 927, 
	927, 210, 928, 928, 210, 929, 929, 210, 
	930, 930, 210, 931, 931, 210, 932, 932, 
	210, 933, 933, 210, 934, 210, 935, 210, 
	936, 937, 937, 210, 938, 938, 938, 207, 
	939, 939, 939, 207, 940, 940, 940, 207, 
	941, 941, 941, 207, 942, 942, 942, 207, 
	943, 943, 943, 207, 944, 944, 944, 207, 
	945, 945, 945, 207, 946, 946, 946, 207, 
	947, 947, 947, 210, 948, 210, 949, 950, 
	950, 210, 952, 952, 951, 953, 951, 954, 
	954, 954, 207, 955, 955, 955, 207, 956, 
	956, 956, 207, 957, 957, 957, 207, 958, 
	958, 958, 207, 959, 959, 959, 207, 960, 
	960, 960, 207, 961, 961, 961, 207, 962, 
	962, 962, 207, 963, 963, 963, 210, 964, 
	965, 965, 210, 966, 967, 967, 210, 968, 
	968, 968, 207, 969, 969, 969, 207, 970, 
	970, 970, 207, 971, 971, 971, 207, 972, 
	972, 972, 207, 973, 973, 973, 207, 974, 
	974, 974, 207, 975, 975, 975, 207, 976, 
	976, 976, 207, 977, 977, 977, 210, 978, 
	978, 210, 979, 979, 210, 980, 980, 210, 
	981, 981, 210, 982, 982, 210, 983, 210, 
	984, 210, 985, 986, 986, 210, 987, 987, 
	987, 207, 988, 988, 988, 207, 989, 989, 
	989, 207, 990, 990, 990, 207, 991, 991, 
	991, 207, 992, 992, 992, 207, 993, 993, 
	993, 207, 994, 994, 994, 207, 995, 995, 
	995, 207, 996, 996, 996, 210, 997, 210, 
	998, 999, 999, 210, 1000, 1000, 1000, 207, 
	1001, 1001, 1001, 207, 1002, 1002, 1002, 207, 
	1003, 1003, 1003, 207, 1004, 1004, 1004, 207, 
	1005, 1005, 1005, 207, 1006, 1006, 1006, 207, 
	1007, 1007, 1007, 207, 1008, 1008, 1008, 207, 
	1009, 1009, 1009, 210, 1010, 277, 354, 1011, 
	306, 1012, 278, 1013, 1010, 277, 354, 1011, 
	306, 1012, 278, 1013, 214, 1014, 214, 1015, 
	214, 361, 1016, 361, 214, 1017, 214, 1018, 
	1019, 1018, 214, 1020, 214, 1021, 1022, 1021, 
	1022, 214, 1023, 1023, 214, 1024, 1024, 214, 
	1025, 1025, 214, 1026, 1026, 214, 1027, 214, 
	1028, 1029, 1028, 1029, 214, 1030, 1030, 214, 
	1031, 1031, 1032, 1033, 214, 1031, 1031, 1032, 
	214, 1032, 1032, 1034, 1034, 1034, 214, 1036, 
	1035, 1035, 1035, 214, 1038, 1039, 1038, 1039, 
	1037, 1041, 1042, 1041, 1042, 1040, 1043, 1043, 
	214, 1044, 1044, 214, 1045, 1045, 1046, 1047, 
	214, 214, 1049, 214, 214, 1049, 1050, 1051, 
	1048, 214, 214, 214, 1053, 1052, 214, 1050, 
	214, 214, 1050, 1051, 1048, 1054, 1054, 214, 
	1055, 1055, 214, 1056, 1056, 214, 1057, 1057, 
	214, 1058, 1058, 214, 1059, 1059, 1060, 1061, 
	214, 214, 1063, 214, 214, 1063, 1064, 1065, 
	1062, 214, 214, 214, 1067, 1066, 214, 1064, 
	214, 214, 1064, 1065, 1062, 1068, 1068, 214, 
	1069, 1069, 214, 1070, 1070, 214, 1071, 1072, 
	1072, 214, 1073, 214, 1074, 214, 214, 214, 
	214, 1075, 214, 214, 1076, 214, 1075, 214, 
	214, 1077, 1076, 214, 1075, 214, 214, 214, 
	1078, 214, 214, 214, 1080, 1079, 1071, 214, 
	1081, 214, 1082, 1082, 214, 1083, 1083, 214, 
	1084, 1084, 214, 1085, 1085, 214, 1086, 1086, 
	214, 1087, 1087, 214, 1088, 214, 1090, 1091, 
	1090, 1091, 1089, 1092, 1092, 214, 1093, 1093, 
	214, 1094, 1094, 214, 1095, 1095, 214, 1096, 
	214, 1097, 1098, 1097, 214, 1099, 1099, 214, 
	1100, 1100, 214, 1101, 1101, 214, 1102, 1102, 
	214, 1103, 1103, 214, 1104, 1105, 1104, 214, 
	1105, 214, 1106, 1106, 214, 1107, 214, 1108, 
	1109, 1108, 214, 1110, 1110, 214, 1111, 1111, 
	1112, 1113, 214, 1111, 1111, 1112, 214, 1112, 
	1112, 1114, 1115, 1116, 1115, 1117, 1117, 214, 
	1118, 1118, 1119, 1119, 214, 214, 214, 1121, 
	214, 1120, 1122, 1122, 1123, 214, 214, 1125, 
	214, 214, 1125, 1124, 214, 1127, 214, 214, 
	1127, 1128, 1126, 1129, 1129, 1130, 214, 1131, 
	214, 1132, 1132, 214, 1133, 1133, 214, 1134, 
	1134, 214, 1135, 214, 214, 1127, 214, 214, 
	1127, 1128, 1124, 1136, 1136, 214, 1137, 1137, 
	214, 1138, 1138, 214, 1139, 1140, 1140, 214, 
	1141, 214, 1142, 214, 214, 214, 214, 1120, 
	1139, 214, 214, 1121, 1121, 1144, 214, 1143, 
	1145, 1145, 1146, 1146, 214, 214, 214, 1121, 
	214, 1147, 1148, 1148, 214, 1149, 1149, 214, 
	1150, 1150, 214, 1151, 1152, 1152, 214, 1153, 
	214, 1154, 214, 214, 214, 214, 1147, 1151, 
	214, 1155, 1155, 214, 1156, 1156, 214, 1157, 
	1157, 214, 1158, 1159, 1159, 214, 1160, 214, 
	1161, 214, 214, 214, 214, 1143, 1158, 214, 
	1113, 1113, 1162, 1162, 1163, 1163, 214, 214, 
	1165, 1165, 1166, 214, 1164, 1167, 1167, 1168, 
	214, 1169, 214, 1170, 1170, 214, 1171, 1171, 
	214, 1172, 1172, 214, 1173, 214, 214, 1165, 
	1165, 1174, 1166, 214, 1164, 214, 1165, 1165, 
	1175, 1166, 1175, 214, 1164, 214, 1165, 1165, 
	1176, 1166, 1176, 214, 1164, 214, 1165, 1165, 
	1177, 1166, 1177, 214, 1164, 214, 1165, 1165, 
	1166, 1173, 214, 1164, 1178, 1178, 214, 1179, 
	1179, 214, 1180, 1180, 214, 1181, 1182, 1182, 
	214, 1183, 214, 1184, 214, 214, 214, 214, 
	1164, 1181, 214, 1185, 257, 1186, 1187, 300, 
	1188, 258, 1189, 1185, 257, 1186, 1187, 300, 
	1188, 258, 1189, 214, 1014, 302, 302, 214, 
	1187, 312, 1187, 312, 214, 1015, 214, 1016, 
	322, 1190, 322, 1190, 214, 1191, 1191, 214, 
	1192, 1192, 214, 1193, 1193, 214, 1194, 1194, 
	214, 1014, 214, 1017, 214, 1195, 1195, 214, 
	1195, 1195, 1196, 1196, 214, 1197, 1197, 214, 
	1198, 1198, 214, 1199, 1199, 214, 1200, 214, 
	1201, 214, 1202, 1202, 1203, 1203, 214, 214, 
	214, 1205, 214, 1204, 214, 214, 1205, 1206, 
	214, 1204, 214, 214, 214, 1207, 214, 214, 
	214, 1209, 1208, 214, 214, 214, 1210, 1209, 
	1208, 214, 214, 214, 1209, 1211, 1211, 1208, 
	214, 214, 214, 1209, 1212, 1208, 1213, 1213, 
	214, 1214, 1214, 214, 1215, 1215, 214, 1216, 
	1217, 1217, 214, 1218, 214, 1219, 214, 214, 
	214, 214, 1204, 1216, 214, 1019, 1220, 1221, 
	1220, 1221, 214, 1222, 1222, 214, 1223, 1223, 
	214, 1224, 1224, 214, 1225, 1225, 214, 1226, 
	1226, 214, 1227, 1227, 214, 1228, 1228, 214, 
	1229, 1229, 214, 1096, 214, 1020, 214, 1230, 
	1231, 1230, 1231, 214, 1232, 1232, 214, 1233, 
	1233, 214, 1234, 1234, 214, 1235, 1235, 214, 
	1027, 214, 1236, 1237, 1236, 1237, 214, 1238, 
	1238, 214, 1239, 1239, 1240, 1033, 214, 1239, 
	1239, 1240, 214, 1240, 1240, 1241, 1241, 1241, 
	214, 1036, 1242, 1242, 1242, 214, 1243, 1243, 
	214, 1244, 1244, 214, 1245, 1245, 1246, 1047, 
	214, 214, 1248, 214, 214, 1248, 1249, 1051, 
	1247, 214, 214, 214, 1053, 1250, 214, 1249, 
	214, 214, 1249, 1051, 1247, 1251, 1252, 1251, 
	1252, 214, 1081, 214, 1253, 1253, 214, 1254, 
	1254, 214, 1255, 1255, 214, 1256, 1256, 214, 
	1257, 1257, 1258, 1061, 214, 214, 1260, 214, 
	214, 1260, 1261, 1065, 1259, 214, 214, 214, 
	1067, 1262, 214, 1261, 214, 214, 1261, 1065, 
	1259, 1263, 1263, 214, 1264, 1264, 214, 1265, 
	1265, 214, 1266, 1267, 1267, 214, 1268, 214, 
	1269, 214, 214, 214, 214, 1270, 214, 214, 
	1271, 214, 1270, 1266, 214, 1272, 1272, 214, 
	1273, 1273, 214, 1274, 1274, 214, 1275, 1275, 
	214, 1276, 1276, 214, 1277, 1277, 214, 1088, 
	214, 1098, 1278, 1279, 1278, 1279, 214, 1280, 
	1280, 214, 1281, 1281, 214, 1282, 1282, 214, 
	1283, 1283, 214, 1284, 1284, 214, 1105, 1285, 
	1285, 214, 1105, 214, 1286, 1286, 214, 1287, 
	1287, 214, 1288, 1288, 214, 1289, 1289, 214, 
	1019, 214, 1290, 1290, 214, 1107, 214, 1109, 
	214, 1291, 1291, 1291, 1291, 214, 1293, 1292, 
	1292, 1292, 1292, 214, 1294, 214, 1298, 1299, 
	1300, 1294, 1303, 1294, 1294, 1302, 1295, 1296, 
	1297, 1301, 1295, 1302, 1302, 1294, 1302, 1302, 
	1302, 207, 1306, 1307, 1308, 1295, 1295, 1295, 
	1295, 1310, 1295, 1304, 1305, 1309, 1295, 1310, 
	1310, 1295, 1310, 1310, 1310, 207, 1306, 1307, 
	1308, 1295, 1295, 1295, 1295, 1310, 1310, 1295, 
	1304, 1305, 1309, 1295, 1310, 1310, 1295, 1310, 
	1310, 1310, 207, 1306, 1307, 1308, 1295, 1295, 
	1295, 1295, 1310, 1304, 1295, 1304, 1305, 1309, 
	1295, 1310, 1310, 1295, 1310, 1310, 1310, 207, 
	1311, 1306, 1307, 1308, 1295, 1295, 1295, 1295, 
	1310, 1304, 1295, 1304, 1305, 1309, 1295, 1310, 
	1310, 1295, 1310, 1310, 1310, 207, 1295, 1306, 
	1307, 1308, 1295, 1295, 1295, 1295, 1310, 1310, 
	1295, 1304, 1305, 1309, 1295, 1310, 1310, 1295, 
	1310, 1310, 1310, 207, 1312, 1306, 1307, 1308, 
	1295, 1295, 1295, 1295, 1310, 1304, 1295, 1304, 
	1305, 1309, 1295, 1310, 1310, 1295, 1310, 1310, 
	1310, 207, 1306, 1307, 1308, 1295, 1295, 1295, 
	1295, 1310, 1295, 1310, 1295, 1310, 1295, 1310, 
	1295, 1304, 1305, 1309, 1295, 1310, 1310, 1295, 
	1310, 1310, 1310, 207, 1313, 1314, 1306, 1307, 
	1308, 1295, 1295, 1295, 1295, 1310, 1304, 1295, 
	1304, 1305, 1309, 1295, 1310, 1310, 1295, 1310, 
	1310, 1310, 207, 1295, 1295, 1306, 1307, 1308, 
	1295, 1295, 1295, 1295, 1310, 1310, 1295, 1304, 
	1305, 1309, 1295, 1310, 1310, 1295, 1310, 1310, 
	1310, 207, 1306, 1307, 1308, 1295, 1295, 1295, 
	1295, 1310, 1305, 1295, 1304, 1305, 1309, 1295, 
	1310, 1310, 1295, 1310, 1310, 1310, 207, 1295, 
	1295, 1295, 1306, 1307, 1308, 1295, 1295, 1295, 
	1295, 1310, 1310, 1295, 1304, 1305, 1309, 1295, 
	1310, 1310, 1295, 1310, 1310, 1310, 207, 1306, 
	1307, 1308, 1295, 1295, 1295, 1295, 1310, 1302, 
	1295, 1304, 1305, 1309, 1295, 1310, 1310, 1295, 
	1310, 1310, 1310, 207, 1306, 1307, 1308, 1295, 
	1295, 1295, 1295, 1310, 1296, 1295, 1304, 1305, 
	1309, 1295, 1310, 1310, 1295, 1310, 1310, 1310, 
	207, 1315, 1306, 1307, 1308, 1295, 1295, 1295, 
	1295, 1310, 1296, 1295, 1304, 1305, 1309, 1295, 
	1310, 1310, 1295, 1310, 1310, 1310, 207, 1294, 
	1306, 1307, 1308, 1295, 1295, 1295, 1295, 1310, 
	1302, 1295, 1304, 1305, 1309, 1295, 1310, 1310, 
	1295, 1310, 1310, 1310, 207, 1316, 1306, 1307, 
	1308, 1295, 1295, 1295, 1295, 1310, 1296, 1295, 
	1304, 1305, 1309, 1295, 1310, 1310, 1295, 1310, 
	1310, 1310, 207, 1306, 1307, 1308, 1295, 1295, 
	1295, 1295, 1310, 1294, 1302, 1294, 1302, 1294, 
	1302, 1295, 1304, 1305, 1309, 1295, 1310, 1310, 
	1295, 1310, 1310, 1310, 207, 1317, 1318, 1306, 
	1307, 1308, 1295, 1295, 1295, 1295, 1310, 1296, 
	1295, 1304, 1305, 1309, 1295, 1310, 1310, 1295, 
	1310, 1310, 1310, 207, 1294, 1294, 1306, 1307, 
	1308, 1295, 1295, 1295, 1295, 1310, 1302, 1295, 
	1304, 1305, 1309, 1295, 1310, 1310, 1295, 1310, 
	1310, 1310, 207, 1294, 1294, 1294, 1306, 1307, 
	1308, 1295, 1295, 1295, 1295, 1310, 1302, 1295, 
	1304, 1305, 1309, 1295, 1310, 1310, 1295, 1310, 
	1310, 1310, 207, 1306, 1307, 1308, 1295, 1295, 
	1295, 1295, 1310, 1297, 1295, 1304, 1305, 1309, 
	1295, 1310, 1310, 1295, 1310, 1310, 1310, 207, 
	1298, 1299, 1300, 1294, 1303, 1294, 1294, 1294, 
	1294, 1302, 1295, 1296, 1297, 1301, 1295, 1302, 
	1302, 1294, 1302, 1302, 1302, 207, 1319, 214, 
	1320, 1319, 214, 1294, 1294, 214, 1321, 1319, 
	214, 1294, 1294, 1294, 214, 1322, 1323, 1319, 
	214, 1294, 1294, 1294, 214, 1294, 1294, 1294, 
	1294, 214, 1324, 214, 1325, 1326, 1327, 1294, 
	1319, 1324, 1328, 1294, 1294, 1294, 1294, 1294, 
	214, 1330, 1329, 1331, 1331, 1329, 1332, 1332, 
	1329, 1333, 1333, 1329, 1334, 1334, 1329, 1335, 
	1329, 1336, 1329, 1337, 1337, 1329, 1338, 1338, 
	1329, 1339, 1339, 1329, 1340, 1340, 1329, 1335, 
	1329, 1342, 1341, 1343, 1343, 1341, 1344, 1344, 
	1341, 1345, 1345, 1341, 1346, 1346, 1341, 1347, 
	1347, 1341, 1348, 1348, 1341, 1349, 1349, 1341, 
	1350, 1341, 1351, 1341, 1352, 1352, 1341, 1353, 
	1353, 1341, 1354, 1354, 1341, 1355, 1355, 1341, 
	1356, 1356, 1341, 1357, 1357, 1341, 1358, 1358, 
	1341, 1350, 1341, 1360, 1361, 1360, 1361, 1359, 
	1362, 1362, 1359, 1363, 1363, 1359, 1364, 1364, 
	1359, 1365, 1365, 1359, 1366, 1366, 1359, 1367, 
	1367, 1359, 1368, 1368, 1359, 1369, 1359, 1370, 
	1371, 1372, 1373, 1370, 1371, 1372, 1373, 1359, 
	1374, 1374, 1359, 1375, 1375, 1359, 1376, 1376, 
	1359, 1377, 1359, 1378, 1378, 1359, 1379, 1379, 
	1359, 1380, 1380, 1359, 1381, 1359, 1382, 1382, 
	1359, 1383, 1383, 1359, 1384, 1384, 1359, 1385, 
	1359, 1386, 1359, 1387, 1387, 1359, 1388, 1388, 
	1359, 1389, 1389, 1390, 1391, 1391, 1359, 1389, 
	1389, 1392, 1392, 1392, 1359, 1393, 1393, 1395, 
	1394, 1394, 1394, 1359, 1396, 1396, 1397, 1359, 
	1397, 1397, 1398, 1399, 1400, 1400, 1400, 1359, 
	1359, 1359, 1359, 1401, 1359, 1359, 1359, 1403, 
	1402, 1404, 1404, 1405, 1359, 1359, 1359, 1359, 
	1406, 1359, 1359, 1359, 1403, 1407, 1408, 1408, 
	1410, 1409, 1409, 1409, 1359, 1411, 1411, 1359, 
	1412, 1412, 1359, 1413, 1413, 1359, 1414, 1414, 
	1359, 1415, 1415, 1416, 1359, 1415, 1415, 1417, 
	1417, 1417, 1359, 1418, 1418, 1420, 1419, 1419, 
	1419, 1359, 1421, 1421, 1422, 1359, 1422, 1422, 
	1423, 1424, 1425, 1425, 1425, 1359, 1359, 1359, 
	1359, 1426, 1359, 1359, 1359, 1428, 1427, 1429, 
	1429, 1430, 1359, 1359, 1359, 1359, 1431, 1359, 
	1359, 1359, 1428, 1432, 1433, 1433, 1435, 1434, 
	1434, 1434, 1359, 1436, 1437, 1438, 1439, 1436, 
	1437, 1438, 1439, 1359, 1440, 1440, 1359, 1441, 
	1441, 1359, 1442, 1442, 1359, 1443, 1443, 1444, 
	1359, 1443, 1443, 1445, 1445, 1445, 1359, 1446, 
	1446, 1448, 1447, 1447, 1447, 1359, 1449, 1449, 
	1450, 1359, 1450, 1450, 1451, 1452, 1453, 1453, 
	1453, 1359, 1359, 1359, 1359, 1454, 1359, 1359, 
	1359, 1456, 1455, 1457, 1457, 1458, 1359, 1359, 
	1359, 1359, 1459, 1359, 1359, 1359, 1456, 1460, 
	1461, 1461, 1463, 1462, 1462, 1462, 1359, 1464, 
	1464, 1465, 1359, 1464, 1464, 1466, 1466, 1466, 
	1359, 1467, 1467, 1469, 1468, 1468, 1468, 1359, 
	1470, 1470, 1471, 1359, 1471, 1471, 1472, 1473, 
	1474, 1474, 1474, 1359, 1359, 1359, 1359, 1475, 
	1359, 1359, 1359, 1477, 1476, 1478, 1478, 1479, 
	1359, 1359, 1359, 1359, 1480, 1359, 1359, 1359, 
	1477, 1481, 1482, 1482, 1484, 1483, 1483, 1483, 
	1359, 1485, 1485, 1486, 1487, 1487, 1359, 1485, 
	1485, 1488, 1488, 1488, 1359, 1489, 1489, 1491, 
	1490, 1490, 1490, 1359, 1492, 1492, 1493, 1359, 
	1493, 1493, 1494, 1495, 1496, 1496, 1496, 1359, 
	1359, 1359, 1359, 1497, 1359, 1359, 1359, 1499, 
	1498, 1500, 1500, 1501, 1359, 1359, 1359, 1359, 
	1502, 1359, 1359, 1359, 1499, 1503, 1504, 1504, 
	1506, 1505, 1505, 1505, 1359, 1507, 1507, 1359, 
	1508, 1508, 1359, 1509, 1509, 1510, 1359, 1509, 
	1509, 1511, 1511, 1511, 1359, 1512, 1512, 1514, 
	1513, 1513, 1513, 1359, 1515, 1515, 1516, 1359, 
	1516, 1516, 1517, 1518, 1519, 1519, 1519, 1359, 
	1359, 1359, 1359, 1520, 1359, 1359, 1359, 1522, 
	1521, 1523, 1523, 1524, 1359, 1359, 1359, 1359, 
	1525, 1359, 1359, 1359, 1522, 1526, 1527, 1527, 
	1529, 1528, 1528, 1528, 1359, 1530, 1530, 1531, 
	1359, 1530, 1530, 1532, 1532, 1532, 1359, 1533, 
	1533, 1535, 1534, 1534, 1534, 1359, 1536, 1536, 
	1537, 1359, 1537, 1537, 1538, 1539, 1540, 1540, 
	1540, 1359, 1359, 1359, 1359, 1541, 1359, 1359, 
	1359, 1543, 1542, 1544, 1544, 1545, 1359, 1359, 
	1359, 1359, 1546, 1359, 1359, 1359, 1543, 1547, 
	1548, 1548, 1550, 1549, 1549, 1549, 1359, 1551, 
	1552, 1551, 1552, 1359, 1553, 1553, 1359, 1554, 
	1554, 1359, 1555, 1555, 1359, 1556, 1556, 1359, 
	1557, 1557, 1359, 1558, 1558, 1359, 1559, 1559, 
	1359, 1369, 1359, 1560, 1561, 1562, 1563, 1560, 
	1561, 1562, 1563, 1359, 1564, 1564, 1359, 1565, 
	1565, 1359, 1566, 1566, 1359, 1377, 1359, 1567, 
	1567, 1359, 1568, 1568, 1359, 1569, 1569, 1359, 
	1381, 1359, 1570, 1570, 1359, 1571, 1571, 1359, 
	1572, 1572, 1359, 1385, 1359, 1386, 1359, 1573, 
	1573, 1359, 1574, 1574, 1359, 1575, 1575, 1576, 
	1390, 1576, 1359, 1575, 1575, 1577, 1577, 1577, 
	1359, 1578, 1578, 1580, 1579, 1579, 1579, 1359, 
	1581, 1581, 1582, 1359, 1582, 1582, 1583, 1584, 
	1585, 1585, 1585, 1359, 1359, 1359, 1359, 1586, 
	1359, 1359, 1359, 1588, 1587, 1589, 1589, 1405, 
	1359, 1359, 1359, 1359, 1590, 1359, 1359, 1359, 
	1588, 1591, 1592, 1592, 1410, 1593, 1593, 1593, 
	1359, 1594, 1594, 1359, 1595, 1595, 1359, 1596, 
	1596, 1359, 1597, 1597, 1359, 1598, 1598, 1416, 
	1359, 1598, 1598, 1599, 1599, 1599, 1359, 1600, 
	1600, 1602, 1601, 1601, 1601, 1359, 1603, 1603, 
	1604, 1359, 1604, 1604, 1605, 1606, 1607, 1607, 
	1607, 1359, 1359, 1359, 1359, 1608, 1359, 1359, 
	1359, 1610, 1609, 1611, 1611, 1430, 1359, 1359, 
	1359, 1359, 1612, 1359, 1359, 1359, 1610, 1613, 
	1614, 1614, 1435, 1615, 1615, 1615, 1359, 1616, 
	1617, 1618, 1619, 1616, 1617, 1618, 1619, 1359, 
	1620, 1620, 1359, 1621, 1621, 1359, 1622, 1622, 
	1359, 1623, 1623, 1444, 1359, 1623, 1623, 1624, 
	1624, 1624, 1359, 1625, 1625, 1627, 1626, 1626, 
	1626, 1359, 1628, 1628, 1629, 1359, 1629, 1629, 
	1630, 1631, 1632, 1632, 1632, 1359, 1359, 1359, 
	1359, 1633, 1359, 1359, 1359, 1635, 1634, 1636, 
	1636, 1458, 1359, 1359, 1359, 1359, 1637, 1359, 
	1359, 1359, 1635, 1638, 1639, 1639, 1463, 1640, 
	1640, 1640, 1359, 1641, 1641, 1465, 1359, 1641, 
	1641, 1642, 1642, 1642, 1359, 1643, 1643, 1645, 
	1644, 1644, 1644, 1359, 1646, 1646, 1647, 1359, 
	1647, 1647, 1648, 1649, 1650, 1650, 1650, 1359, 
	1359, 1359, 1359, 1651, 1359, 1359, 1359, 1653, 
	1652, 1654, 1654, 1479, 1359, 1359, 1359, 1359, 
	1655, 1359, 1359, 1359, 1653, 1656, 1657, 1657, 
	1484, 1658, 1658, 1658, 1359, 1659, 1659, 1660, 
	1486, 1660, 1359, 1659, 1659, 1661, 1661, 1661, 
	1359, 1662, 1662, 1664, 1663, 1663, 1663, 1359, 
	1665, 1665, 1666, 1359, 1666, 1666, 1667, 1668, 
	1669, 1669, 1669, 1359, 1359, 1359, 1359, 1670, 
	1359, 1359, 1359, 1672, 1671, 1673, 1673, 1501, 
	1359, 1359, 1359, 1359, 1674, 1359, 1359, 1359, 
	1672, 1675, 1676, 1676, 1506, 1677, 1677, 1677, 
	1359, 1678, 1678, 1359, 1679, 1679, 1359, 1680, 
	1680, 1510, 1359, 1680, 1680, 1681, 1681, 1681, 
	1359, 1682, 1682, 1684, 1683, 1683, 1683, 1359, 
	1685, 1685, 1686, 1359, 1686, 1686, 1687, 1688, 
	1689, 1689, 1689, 1359, 1359, 1359, 1359, 1690, 
	1359, 1359, 1359, 1692, 1691, 1693, 1693, 1524, 
	1359, 1359, 1359, 1359, 1694, 1359, 1359, 1359, 
	1692, 1695, 1696, 1696, 1529, 1697, 1697, 1697, 
	1359, 1698, 1698, 1531, 1359, 1698, 1698, 1699, 
	1699, 1699, 1359, 1700, 1700, 1702, 1701, 1701, 
	1701, 1359, 1703, 1703, 1704, 1359, 1704, 1704, 
	1705, 1706, 1707, 1707, 1707, 1359, 1359, 1359, 
	1359, 1708, 1359, 1359, 1359, 1710, 1709, 1711, 
	1711, 1545, 1359, 1359, 1359, 1359, 1712, 1359, 
	1359, 1359, 1710, 1713, 1714, 1714, 1550, 1715, 
	1715, 1715, 1359, 1, 1717, 1, 1717, 1718, 
	1719, 1720, 1721, 1722, 1720, 1716, 1, 2, 
	1, 2, 1723, 1, 4, 1, 4, 5, 
	6, 1724, 18, 18, 1725, 39, 39, 40, 
	1724, 1726, 1726, 1726, 1727, 1726, 38, 1726, 
	1726, 38, 37, 1728, 1729, 1730, 8, 1731, 
	45, 1732, 1733, 1728, 1729, 1730, 8, 1731, 
	45, 1732, 1733, 1724, 50, 50, 1734, 62, 
	63, 62, 63, 1735, 65, 66, 65, 66, 
	1736, 1738, 1738, 1737, 85, 85, 1739, 100, 
	101, 100, 101, 1740, 108, 108, 1741, 1742, 
	1724, 1744, 1744, 1743, 1745, 1746, 25, 1747, 
	1748, 1749, 1750, 1745, 1746, 25, 1747, 1748, 
	1749, 1750, 1724, 1751, 1724, 1753, 1754, 1755, 
	1752, 1757, 201, 1758, 194, 1759, 1760, 201, 
	1758, 194, 1759, 1760, 1756, 1761, 1762, 1763, 
	1764, 1765, 1762, 1763, 1764, 1765, 1756, 1770, 
	1771, 1772, 1773, 1771, 1774, 1777, 1778, 1779, 
	1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 
	1788, 1789, 1790, 1777, 1778, 1779, 1780, 1781, 
	1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 
	1791, 1792, 1793, 1766, 1766, 1766, 1794, 1766, 
	1767, 1768, 1769, 1766, 1775, 1766, 1766, 1775, 
	1766, 1775, 1766, 1776, 208, 1795, 209, 211, 
	1797, 1796, 209, 1795, 211, 1795, 212, 213, 
	212, 213, 207, 213, 215, 213, 215, 1795, 
	212, 217, 1799, 217, 1800, 1801, 1802, 1803, 
	1804, 1802, 1798, 225, 225, 1805, 212, 213, 
	1799, 213, 1807, 1808, 1806, 1810, 1809, 1811, 
	1811, 1811, 1812, 1811, 294, 1811, 1811, 294, 
	293, 311, 311, 1813, 317, 317, 1814, 1816, 
	1816, 1815, 1795, 1817, 414, 415, 416, 1818, 
	418, 1818, 418, 418, 418, 1818, 1818, 418, 
	1818, 1818, 1818, 408, 413, 417, 1818, 1818, 
	418, 407, 426, 427, 428, 1818, 430, 407, 
	430, 430, 430, 1818, 1818, 431, 1818, 1818, 
	1818, 420, 425, 429, 1818, 1818, 430, 419, 
	434, 435, 436, 1818, 431, 407, 431, 431, 
	431, 431, 1818, 432, 433, 437, 1818, 1818, 
	431, 438, 457, 458, 459, 407, 454, 419, 
	464, 431, 461, 455, 456, 460, 461, 461, 
	461, 1818, 407, 419, 431, 468, 1818, 1820, 
	1821, 1819, 1819, 1819, 1796, 1823, 1823, 1823, 
	1822, 1825, 1825, 1825, 1824, 1827, 1827, 1827, 
	1826, 1829, 1829, 1829, 1828, 1830, 1830, 1830, 
	1822, 1831, 1831, 1831, 1824, 1833, 1833, 1833, 
	1832, 1835, 1835, 1835, 1834, 1837, 1837, 1837, 
	1836, 1839, 1839, 1839, 1838, 1840, 1840, 1840, 
	1836, 1841, 1841, 1841, 1838, 1842, 1840, 1840, 
	1840, 1836, 608, 1837, 1837, 1837, 1836, 1843, 
	1820, 1843, 1821, 1819, 1819, 1819, 1796, 1844, 
	1820, 1844, 1821, 1819, 1819, 1819, 1796, 1845, 
	1820, 1845, 1821, 1819, 1819, 1819, 1796, 1846, 
	1820, 1846, 1821, 1819, 1819, 1819, 1796, 1847, 
	1820, 1847, 1821, 1819, 1819, 1819, 1796, 1848, 
	1820, 1821, 1819, 1819, 1819, 1796, 1850, 668, 
	668, 1849, 1851, 667, 667, 1849, 1852, 666, 
	666, 1849, 1853, 665, 665, 1849, 1854, 664, 
	664, 1849, 1855, 663, 663, 1849, 1856, 662, 
	662, 1849, 1857, 661, 661, 1849, 1858, 660, 
	660, 1849, 1859, 659, 659, 1849, 1859, 1849, 
	1849, 1860, 1820, 1860, 1821, 1819, 1819, 1819, 
	1796, 1861, 1820, 1861, 1821, 1819, 1819, 1819, 
	1796, 1862, 1820, 1862, 1821, 1819, 1819, 1819, 
	1796, 1863, 1820, 1821, 1819, 1819, 1819, 1796, 
	1865, 681, 681, 1864, 1866, 680, 680, 1864, 
	1867, 679, 679, 1864, 1868, 678, 678, 1864, 
	1869, 677, 677, 1864, 1870, 676, 676, 1864, 
	1871, 675, 675, 1864, 1872, 674, 674, 1864, 
	1873, 673, 673, 1864, 1874, 672, 672, 1864, 
	1874, 1864, 1864, 1875, 1820, 1875, 1821, 1819, 
	1819, 1819, 1796, 1876, 1820, 1876, 1821, 1819, 
	1819, 1819, 1796, 1877, 1820, 1877, 1821, 1819, 
	1819, 1819, 1796, 1878, 1820, 1878, 1821, 1819, 
	1819, 1819, 1796, 1879, 1820, 1879, 1821, 1819, 
	1819, 1819, 1796, 1880, 1820, 1880, 1821, 1819, 
	1819, 1819, 1796, 1881, 1820, 1821, 1819, 1819, 
	1819, 1796, 1883, 694, 694, 1882, 1884, 693, 
	693, 1882, 1885, 692, 692, 1882, 1886, 691, 
	691, 1882, 1887, 690, 690, 1882, 1888, 689, 
	689, 1882, 1889, 688, 688, 1882, 1890, 687, 
	687, 1882, 1891, 686, 686, 1882, 1892, 685, 
	685, 1882, 1892, 1882, 1882, 1893, 1820, 1893, 
	1821, 1819, 1819, 1819, 1796, 1894, 1820, 1894, 
	1821, 1819, 1819, 1819, 1796, 1895, 1820, 1895, 
	1821, 1819, 1819, 1819, 1796, 1896, 1820, 1896, 
	1821, 1819, 1819, 1819, 1796, 1897, 1820, 1821, 
	1819, 1819, 1819, 1796, 1899, 1900, 709, 709, 
	1898, 1902, 1902, 1902, 1902, 1902, 1901, 1899, 
	1903, 708, 708, 1898, 1899, 1904, 707, 707, 
	1898, 1899, 1905, 706, 706, 1898, 1899, 1906, 
	705, 705, 1898, 1899, 1907, 704, 704, 1898, 
	1899, 1908, 703, 703, 1898, 1899, 1909, 702, 
	702, 1898, 1899, 1910, 701, 701, 1898, 1899, 
	1911, 700, 700, 1898, 1899, 1911, 1898, 1899, 
	1898, 1912, 1820, 1912, 1821, 1819, 1819, 1819, 
	1796, 1913, 1820, 1913, 1821, 1819, 1819, 1819, 
	1796, 1914, 1820, 1914, 1821, 1819, 1819, 1819, 
	1796, 1915, 1820, 1915, 1821, 1819, 1819, 1819, 
	1796, 1916, 1820, 1821, 1819, 1819, 1819, 1796, 
	1918, 722, 722, 1917, 1919, 721, 721, 1917, 
	1920, 720, 720, 1917, 1921, 719, 719, 1917, 
	1922, 718, 718, 1917, 1923, 717, 717, 1917, 
	1924, 716, 716, 1917, 1925, 715, 715, 1917, 
	1926, 714, 714, 1917, 1927, 713, 713, 1917, 
	1927, 1917, 1917, 1928, 1820, 1928, 1821, 1819, 
	1819, 1819, 1796, 1929, 1820, 1929, 1821, 1819, 
	1819, 1819, 1796, 1930, 1820, 1930, 1821, 1819, 
	1819, 1819, 1796, 1931, 1932, 1820, 1932, 1821, 
	1819, 1819, 1819, 1796, 732, 733, 734, 739, 
	729, 740, 741, 742, 736, 730, 731, 735, 
	736, 736, 736, 1933, 753, 754, 755, 1933, 
	757, 1933, 757, 757, 757, 1933, 1933, 757, 
	1933, 1933, 1933, 747, 752, 756, 1933, 1933, 
	757, 739, 764, 765, 766, 1933, 768, 739, 
	768, 768, 768, 1933, 1933, 742, 1933, 1933, 
	1933, 758, 763, 767, 1933, 1933, 768, 740, 
	771, 772, 773, 1933, 742, 739, 742, 742, 
	742, 742, 1933, 769, 770, 774, 1933, 1933, 
	742, 775, 739, 740, 742, 780, 1933, 1931, 
	1820, 1821, 1819, 1819, 1819, 1796, 1934, 1820, 
	1934, 1821, 1819, 1819, 1819, 1796, 1935, 1820, 
	1935, 1821, 1819, 1819, 1819, 1796, 1936, 1820, 
	1821, 1819, 1819, 1819, 1796, 1938, 800, 800, 
	1937, 1939, 799, 799, 1937, 1940, 798, 798, 
	1937, 1941, 797, 797, 1937, 1942, 796, 796, 
	1937, 1943, 795, 795, 1937, 1944, 794, 794, 
	1937, 1945, 793, 793, 1937, 1946, 792, 792, 
	1937, 1947, 791, 791, 1937, 1947, 1937, 1937, 
	1948, 1949, 1820, 1948, 1949, 1821, 1819, 1819, 
	1819, 1796, 1950, 1820, 1950, 1821, 1819, 1819, 
	1819, 1796, 1951, 1820, 1951, 1821, 1819, 1819, 
	1819, 1796, 1952, 1820, 1952, 1821, 1819, 1819, 
	1819, 1796, 1953, 1820, 1821, 1819, 1819, 1819, 
	1796, 1955, 1954, 1956, 1957, 1820, 1956, 1957, 
	1821, 1819, 1819, 1819, 1796, 1958, 1820, 1958, 
	1821, 1819, 1819, 1819, 1796, 1959, 1820, 1821, 
	1819, 1819, 1819, 1796, 1961, 839, 839, 1960, 
	1962, 838, 838, 1960, 1963, 837, 837, 1960, 
	1964, 836, 836, 1960, 1965, 835, 835, 1960, 
	1966, 834, 834, 1960, 1967, 833, 833, 1960, 
	1968, 832, 832, 1960, 1969, 831, 831, 1960, 
	1970, 830, 830, 1960, 1970, 1960, 1960, 1971, 
	1820, 1971, 1821, 1819, 1819, 1819, 1796, 1972, 
	1820, 1821, 1819, 1819, 1819, 1796, 1974, 852, 
	852, 1973, 1975, 851, 851, 1973, 1976, 850, 
	850, 1973, 1977, 849, 849, 1973, 1978, 848, 
	848, 1973, 1979, 847, 847, 1973, 1980, 846, 
	846, 1973, 1981, 845, 845, 1973, 1982, 844, 
	844, 1973, 1983, 843, 843, 1973, 1983, 1973, 
	1973, 1984, 1820, 1984, 1821, 1819, 1819, 1819, 
	1796, 1985, 1820, 1985, 1821, 1819, 1819, 1819, 
	1796, 1986, 1820, 1986, 1821, 1819, 1819, 1819, 
	1796, 1987, 1820, 1987, 1821, 1819, 1819, 1819, 
	1796, 1988, 1820, 1988, 1821, 1819, 1819, 1819, 
	1796, 1989, 1820, 1821, 1819, 1819, 1819, 1796, 
	1991, 865, 865, 1990, 1992, 864, 864, 1990, 
	1993, 863, 863, 1990, 1994, 862, 862, 1990, 
	1995, 861, 861, 1990, 1996, 860, 860, 1990, 
	1997, 859, 859, 1990, 1998, 858, 858, 1990, 
	1999, 857, 857, 1990, 2000, 856, 856, 1990, 
	2000, 1990, 1990, 2001, 1820, 2001, 1821, 1819, 
	1819, 1819, 1796, 2002, 1820, 2002, 1821, 1819, 
	1819, 1819, 1796, 2003, 1820, 2003, 1821, 1819, 
	1819, 1819, 1796, 2004, 1820, 2004, 1821, 1819, 
	1819, 1819, 1796, 2005, 1820, 2005, 1821, 1819, 
	1819, 1819, 1796, 2006, 1820, 1821, 1819, 1819, 
	1819, 1796, 2008, 878, 878, 2007, 2009, 877, 
	877, 2007, 2010, 876, 876, 2007, 2011, 875, 
	875, 2007, 2012, 874, 874, 2007, 2013, 873, 
	873, 2007, 2014, 872, 872, 2007, 2015, 871, 
	871, 2007, 2016, 870, 870, 2007, 2017, 869, 
	869, 2007, 2017, 2007, 2007, 2018, 2019, 1820, 
	2018, 2019, 1821, 1819, 1819, 1819, 1796, 2020, 
	1820, 2020, 1821, 1819, 1819, 1819, 1796, 2021, 
	1820, 1821, 1819, 1819, 1819, 1796, 2023, 899, 
	899, 2022, 2024, 898, 898, 2022, 2025, 897, 
	897, 2022, 2026, 896, 896, 2022, 2027, 895, 
	895, 2022, 2028, 894, 894, 2022, 2029, 893, 
	893, 2022, 2030, 892, 892, 2022, 2031, 891, 
	891, 2022, 2032, 890, 890, 2022, 2032, 2022, 
	2022, 2034, 923, 923, 2033, 2035, 922, 922, 
	2033, 2036, 921, 921, 2033, 2037, 920, 920, 
	2033, 2038, 919, 919, 2033, 2039, 918, 918, 
	2033, 2040, 917, 917, 2033, 2041, 916, 916, 
	2033, 2042, 915, 915, 2033, 2043, 914, 914, 
	2033, 2043, 2033, 2033, 2045, 947, 947, 2044, 
	2046, 946, 946, 2044, 2047, 945, 945, 2044, 
	2048, 944, 944, 2044, 2049, 943, 943, 2044, 
	2050, 942, 942, 2044, 2051, 941, 941, 2044, 
	2052, 940, 940, 2044, 2053, 939, 939, 2044, 
	2054, 938, 938, 2044, 2054, 2044, 2044, 2055, 
	1820, 2055, 1821, 1819, 1819, 1819, 1796, 2056, 
	1820, 2056, 1821, 1819, 1819, 1819, 1796, 2057, 
	1820, 2057, 1821, 1819, 1819, 1819, 1796, 2058, 
	1820, 1821, 1819, 1819, 1819, 1796, 2060, 2061, 
	963, 963, 2059, 2063, 2062, 2060, 2064, 962, 
	962, 2059, 2060, 2065, 961, 961, 2059, 2060, 
	2066, 960, 960, 2059, 2060, 2067, 959, 959, 
	2059, 2060, 2068, 958, 958, 2059, 2060, 2069, 
	957, 957, 2059, 2060, 2070, 956, 956, 2059, 
	2060, 2071, 955, 955, 2059, 2060, 2072, 954, 
	954, 2059, 2060, 2072, 2059, 2060, 2059, 2073, 
	1820, 2073, 1821, 1819, 1819, 1819, 1796, 2074, 
	1820, 2074, 1821, 1819, 1819, 1819, 1796, 2075, 
	1820, 2075, 1821, 1819, 1819, 1819, 1796, 2076, 
	1820, 1821, 1819, 1819, 1819, 1796, 2078, 977, 
	977, 2077, 2079, 976, 976, 2077, 2080, 975, 
	975, 2077, 2081, 974, 974, 2077, 2082, 973, 
	973, 2077, 2083, 972, 972, 2077, 2084, 971, 
	971, 2077, 2085, 970, 970, 2077, 2086, 969, 
	969, 2077, 2087, 968, 968, 2077, 2087, 2077, 
	2077, 2089, 996, 996, 2088, 2090, 995, 995, 
	2088, 2091, 994, 994, 2088, 2092, 993, 993, 
	2088, 2093, 992, 992, 2088, 2094, 991, 991, 
	2088, 2095, 990, 990, 2088, 2096, 989, 989, 
	2088, 2097, 988, 988, 2088, 2098, 987, 987, 
	2088, 2098, 2088, 2088, 2099, 1820, 2099, 1821, 
	1819, 1819, 1819, 1796, 2100, 1820, 2100, 1821, 
	1819, 1819, 1819, 1796, 2101, 1820, 2101, 1821, 
	1819, 1819, 1819, 1796, 2102, 1820, 1821, 1819, 
	1819, 1819, 1796, 2104, 1009, 1009, 2103, 2105, 
	1008, 1008, 2103, 2106, 1007, 1007, 2103, 2107, 
	1006, 1006, 2103, 2108, 1005, 1005, 2103, 2109, 
	1004, 1004, 2103, 2110, 1003, 1003, 2103, 2111, 
	1002, 1002, 2103, 2112, 1001, 1001, 2103, 2113, 
	1000, 1000, 2103, 2113, 2103, 2103, 2114, 2115, 
	2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 
	2124, 480, 2115, 2116, 2117, 2118, 2119, 2120, 
	2121, 2122, 2123, 2124, 1795, 1038, 1039, 1038, 
	1039, 2125, 1041, 1042, 1041, 1042, 2126, 1090, 
	1091, 1090, 1091, 2127, 573, 1795, 2128, 2129, 
	2130, 2131, 2132, 2133, 1251, 2134, 1225, 2135, 
	2136, 2137, 2129, 2130, 2131, 2132, 2133, 1251, 
	2134, 1225, 2135, 2136, 2137, 1795, 2128, 2129, 
	2130, 2131, 2132, 2133, 1251, 2134, 1225, 2135, 
	2136, 2137, 2129, 2130, 2131, 2132, 2133, 1251, 
	2134, 1225, 2135, 2136, 2137, 2138, 1795, 2141, 
	2142, 2143, 2146, 2146, 2145, 2139, 2140, 2144, 
	2145, 2145, 2145, 2145, 2145, 1795, 1306, 1307, 
	1308, 1295, 1295, 1295, 1295, 1310, 1295, 1304, 
	1305, 1309, 1295, 1310, 1310, 1295, 1310, 1310, 
	1310, 2147, 1298, 1299, 1300, 1294, 1303, 1294, 
	1294, 1302, 1295, 1296, 1297, 1301, 1295, 1302, 
	1302, 1294, 1302, 1302, 1302, 2147, 2149, 2150, 
	2151, 2152, 2148, 2154, 2155, 2153, 1330, 2153, 
	1336, 2153, 2157, 2158, 2159, 2160, 2156, 2162, 
	2163, 2161, 1342, 2161, 1351, 2161, 2165, 2166, 
	2164, 2168, 2169, 2170, 2169, 2170, 2167, 2171, 
	2172, 2173, 2172, 2173, 2167, 0
};

static const short _dtext_trans_targs[] = {
	1367, 1368, 1, 1367, 2, 3, 18, 4, 
	10, 13, 5, 6, 7, 8, 9, 1367, 
	11, 12, 1370, 14, 15, 16, 17, 1367, 
	19, 25, 27, 20, 21, 22, 23, 24, 
	26, 28, 29, 30, 31, 1372, 1373, 32, 
	33, 35, 36, 37, 38, 39, 40, 41, 
	42, 43, 1375, 45, 46, 53, 47, 48, 
	49, 1377, 50, 50, 1376, 1367, 1367, 51, 
	1367, 1367, 52, 54, 55, 56, 58, 1367, 
	57, 56, 58, 1367, 57, 1367, 60, 61, 
	62, 63, 64, 65, 67, 1379, 66, 65, 
	67, 1378, 66, 1378, 69, 70, 71, 72, 
	73, 74, 1380, 1367, 1367, 75, 77, 78, 
	79, 80, 81, 82, 1381, 83, 85, 1367, 
	87, 1383, 88, 88, 1383, 90, 91, 96, 
	92, 93, 94, 95, 95, 97, 98, 99, 
	101, 100, 99, 101, 100, 103, 104, 105, 
	106, 107, 108, 110, 109, 108, 110, 109, 
	112, 113, 114, 115, 116, 117, 119, 120, 
	121, 122, 124, 125, 126, 127, 128, 129, 
	130, 132, 134, 135, 134, 141, 136, 137, 
	136, 137, 138, 139, 140, 1367, 135, 142, 
	141, 135, 142, 1386, 144, 145, 146, 147, 
	152, 1386, 1386, 1386, 148, 149, 150, 151, 
	1386, 1386, 155, 1386, 1386, 157, 158, 159, 
	160, 153, 1386, 163, 164, 165, 166, 1389, 
	1391, 171, 1389, 172, 1394, 174, 1389, 175, 
	1389, 176, 177, 195, 178, 181, 190, 179, 
	180, 1397, 182, 183, 184, 185, 186, 187, 
	188, 189, 1389, 191, 192, 193, 194, 1389, 
	196, 198, 206, 197, 199, 200, 201, 202, 
	203, 204, 205, 207, 208, 209, 210, 1389, 
	212, 213, 223, 214, 219, 215, 216, 217, 
	218, 1399, 220, 221, 222, 1389, 224, 225, 
	226, 1389, 1389, 1389, 228, 229, 239, 230, 
	235, 231, 232, 233, 234, 236, 237, 238, 
	240, 241, 242, 244, 243, 1400, 1401, 246, 
	276, 283, 247, 257, 263, 268, 248, 249, 
	250, 251, 252, 253, 254, 255, 256, 1402, 
	258, 259, 260, 261, 262, 1403, 264, 265, 
	266, 267, 269, 270, 271, 272, 273, 274, 
	1389, 275, 277, 278, 279, 280, 281, 1389, 
	282, 282, 1389, 284, 285, 286, 287, 288, 
	289, 291, 292, 1404, 293, 293, 1404, 295, 
	310, 317, 296, 302, 297, 298, 299, 300, 
	301, 303, 304, 305, 306, 307, 308, 309, 
	311, 312, 313, 314, 315, 316, 316, 318, 
	319, 320, 321, 322, 323, 325, 326, 327, 
	326, 333, 328, 329, 328, 329, 330, 331, 
	332, 1389, 327, 334, 333, 327, 334, 335, 
	336, 337, 1406, 1407, 371, 396, 1389, 1406, 
	338, 341, 343, 345, 346, 339, 340, 342, 
	344, 347, 348, 1407, 349, 352, 354, 356, 
	357, 350, 351, 353, 355, 358, 359, 360, 
	361, 362, 363, 365, 367, 370, 1408, 364, 
	366, 368, 369, 372, 373, 374, 375, 395, 
	376, 377, 378, 380, 381, 379, 382, 383, 
	384, 385, 388, 390, 393, 1409, 386, 387, 
	394, 389, 391, 392, 1410, 397, 398, 397, 
	1389, 399, 400, 401, 402, 405, 403, 404, 
	407, 408, 407, 410, 421, 431, 444, 448, 
	451, 408, 409, 410, 411, 414, 415, 409, 
	411, 414, 415, 412, 413, 419, 420, 412, 
	414, 415, 413, 1412, 416, 415, 418, 416, 
	417, 418, 417, 418, 1414, 419, 422, 423, 
	424, 427, 423, 424, 427, 425, 426, 428, 
	429, 425, 427, 426, 427, 1416, 428, 430, 
	430, 432, 433, 434, 435, 436, 437, 438, 
	439, 438, 439, 440, 441, 442, 443, 440, 
	441, 442, 421, 445, 446, 447, 424, 427, 
	447, 424, 449, 450, 452, 455, 456, 457, 
	453, 454, 453, 454, 458, 460, 461, 463, 
	464, 499, 500, 502, 503, 461, 462, 466, 
	471, 462, 463, 464, 499, 500, 502, 493, 
	471, 493, 465, 472, 498, 467, 466, 469, 
	470, 467, 468, 469, 470, 468, 470, 1418, 
	1420, 473, 466, 479, 474, 473, 476, 477, 
	481, 487, 490, 493, 479, 474, 475, 479, 
	475, 476, 477, 481, 487, 490, 479, 478, 
	480, 1422, 1424, 482, 483, 484, 485, 486, 
	488, 489, 478, 491, 492, 494, 495, 496, 
	497, 494, 1425, 501, 504, 505, 506, 507, 
	509, 1432, 519, 1443, 510, 511, 512, 513, 
	514, 515, 516, 517, 518, 521, 1448, 531, 
	1459, 522, 523, 524, 525, 526, 527, 528, 
	529, 530, 533, 1467, 543, 1478, 534, 535, 
	536, 537, 538, 539, 540, 541, 542, 545, 
	1484, 556, 1389, 1485, 1496, 547, 548, 549, 
	550, 551, 552, 553, 554, 555, 558, 1502, 
	568, 1513, 559, 560, 561, 562, 563, 564, 
	565, 566, 567, 570, 571, 572, 574, 575, 
	573, 576, 577, 578, 579, 582, 584, 587, 
	1518, 580, 581, 1519, 1520, 621, 610, 583, 
	585, 586, 1389, 588, 591, 593, 595, 596, 
	589, 590, 592, 594, 597, 598, 599, 602, 
	604, 606, 607, 600, 601, 603, 605, 608, 
	609, 611, 612, 613, 615, 617, 620, 1521, 
	614, 616, 618, 619, 1522, 623, 624, 625, 
	626, 627, 628, 629, 630, 1527, 640, 1538, 
	631, 632, 633, 634, 635, 636, 637, 638, 
	639, 642, 643, 666, 644, 646, 665, 645, 
	1544, 647, 664, 648, 663, 649, 662, 650, 
	661, 651, 660, 652, 659, 653, 658, 654, 
	657, 655, 656, 668, 1548, 678, 1559, 669, 
	670, 671, 672, 673, 674, 675, 676, 677, 
	680, 1562, 690, 1573, 681, 682, 683, 684, 
	685, 686, 687, 688, 689, 692, 1580, 702, 
	1591, 693, 694, 695, 696, 697, 698, 699, 
	700, 701, 704, 1598, 714, 1609, 705, 706, 
	707, 708, 709, 710, 711, 712, 713, 716, 
	733, 756, 717, 718, 719, 720, 721, 722, 
	1613, 732, 1624, 723, 724, 725, 726, 727, 
	728, 729, 730, 731, 734, 735, 736, 737, 
	738, 739, 740, 741, 742, 743, 744, 745, 
	1625, 755, 1636, 746, 747, 748, 749, 750, 
	751, 752, 753, 754, 757, 758, 759, 760, 
	761, 762, 763, 764, 765, 766, 767, 768, 
	1637, 778, 1648, 769, 770, 771, 772, 773, 
	774, 775, 776, 777, 780, 1653, 792, 1389, 
	782, 1654, 1665, 783, 784, 785, 786, 787, 
	788, 789, 790, 791, 794, 805, 1670, 804, 
	1681, 795, 796, 797, 798, 799, 800, 801, 
	802, 803, 806, 807, 808, 809, 810, 811, 
	812, 1682, 822, 1693, 813, 814, 815, 816, 
	817, 818, 819, 820, 821, 824, 1698, 834, 
	1709, 825, 826, 827, 828, 829, 830, 831, 
	832, 833, 836, 837, 838, 839, 1389, 1389, 
	1389, 1389, 841, 1389, 1389, 843, 848, 844, 
	845, 846, 847, 1389, 849, 856, 850, 851, 
	852, 1712, 853, 853, 1711, 1389, 1389, 854, 
	1389, 1389, 855, 857, 858, 859, 861, 1389, 
	860, 859, 861, 1389, 860, 1389, 863, 864, 
	865, 866, 867, 868, 870, 1389, 869, 868, 
	870, 1389, 869, 1389, 872, 873, 874, 875, 
	882, 876, 877, 878, 879, 880, 881, 881, 
	1389, 1389, 885, 886, 887, 888, 889, 890, 
	1713, 1389, 1389, 891, 893, 894, 895, 896, 
	1389, 898, 1389, 899, 900, 901, 902, 903, 
	904, 1389, 906, 1389, 908, 1389, 909, 910, 
	911, 951, 912, 932, 933, 943, 913, 924, 
	913, 914, 914, 915, 916, 923, 916, 917, 
	918, 917, 918, 919, 920, 921, 922, 1389, 
	925, 926, 927, 928, 931, 929, 930, 932, 
	915, 934, 935, 934, 936, 937, 938, 939, 
	942, 940, 941, 944, 945, 946, 947, 950, 
	948, 949, 952, 964, 952, 953, 959, 953, 
	954, 955, 956, 957, 958, 1389, 960, 961, 
	962, 963, 965, 966, 967, 968, 971, 969, 
	970, 973, 974, 975, 976, 982, 977, 978, 
	979, 980, 981, 984, 985, 986, 987, 988, 
	989, 990, 991, 998, 991, 992, 993, 994, 
	994, 995, 996, 997, 1389, 999, 1000, 1001, 
	1002, 1005, 1003, 1004, 1007, 1016, 1008, 1009, 
	1010, 1011, 1012, 1013, 1014, 1015, 1018, 1023, 
	1019, 1020, 1021, 1022, 1024, 1029, 1025, 1026, 
	1027, 1028, 1028, 1030, 1031, 1032, 1034, 1033, 
	1032, 1034, 1033, 1036, 1037, 1038, 1039, 1040, 
	1041, 1042, 1044, 1043, 1042, 1044, 1043, 1046, 
	1047, 1048, 1049, 1053, 1050, 1051, 1052, 1389, 
	1055, 1056, 1057, 1058, 1059, 1060, 1062, 1069, 
	1063, 1064, 1065, 1066, 1067, 1068, 1070, 1071, 
	1072, 1073, 1075, 1078, 1078, 1389, 1080, 1081, 
	1092, 1093, 1094, 1096, 1098, 1101, 1719, 1102, 
	1082, 1083, 1084, 1086, 1088, 1090, 1718, 1085, 
	1087, 1089, 1091, 1095, 1097, 1099, 1100, 1079, 
	1105, 1107, 1109, 1110, 1103, 1104, 1106, 1108, 
	1111, 1720, 1114, 1115, 1116, 1117, 1118, 1720, 
	1120, 1121, 1122, 1123, 1124, 1724, 1126, 1127, 
	1128, 1129, 1130, 1131, 1132, 1133, 1724, 1135, 
	1136, 1137, 1138, 1139, 1140, 1141, 1142, 1728, 
	1144, 1152, 1145, 1146, 1147, 1148, 1149, 1150, 
	1151, 1728, 1153, 1157, 1161, 1165, 1154, 1155, 
	1156, 1728, 1158, 1159, 1160, 1728, 1162, 1163, 
	1164, 1728, 1728, 1167, 1168, 1169, 1728, 1179, 
	1170, 1171, 1170, 1172, 1171, 1172, 1173, 1176, 
	1178, 1174, 1174, 1175, 1169, 1728, 1177, 1177, 
	1169, 1178, 1728, 1180, 1181, 1182, 1183, 1184, 
	1728, 1185, 1186, 1185, 1187, 1186, 1187, 1188, 
	1191, 1193, 1189, 1189, 1190, 1184, 1728, 1192, 
	1192, 1184, 1193, 1728, 1195, 1209, 1220, 1244, 
	1196, 1197, 1198, 1199, 1728, 1200, 1201, 1200, 
	1202, 1201, 1202, 1203, 1206, 1208, 1204, 1204, 
	1205, 1199, 1728, 1207, 1207, 1199, 1208, 1728, 
	1210, 1728, 1211, 1212, 1211, 1213, 1212, 1213, 
	1214, 1217, 1219, 1215, 1215, 1216, 1210, 1728, 
	1218, 1218, 1210, 1219, 1728, 1221, 1728, 1231, 
	1222, 1223, 1222, 1224, 1223, 1224, 1225, 1228, 
	1230, 1226, 1226, 1227, 1221, 1728, 1229, 1229, 
	1221, 1230, 1728, 1232, 1233, 1234, 1728, 1235, 
	1236, 1235, 1237, 1236, 1237, 1238, 1241, 1243, 
	1239, 1239, 1240, 1234, 1728, 1242, 1242, 1234, 
	1243, 1728, 1245, 1728, 1246, 1247, 1246, 1248, 
	1247, 1248, 1249, 1252, 1254, 1250, 1250, 1251, 
	1245, 1728, 1253, 1253, 1245, 1254, 1728, 1256, 
	1264, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 
	1265, 1269, 1273, 1277, 1266, 1267, 1268, 1270, 
	1271, 1272, 1274, 1275, 1276, 1279, 1280, 1281, 
	1291, 1282, 1283, 1282, 1284, 1283, 1284, 1285, 
	1288, 1290, 1286, 1286, 1287, 1281, 1289, 1289, 
	1281, 1290, 1292, 1293, 1294, 1295, 1296, 1297, 
	1298, 1297, 1299, 1298, 1299, 1300, 1303, 1305, 
	1301, 1301, 1302, 1296, 1304, 1304, 1296, 1305, 
	1307, 1321, 1332, 1356, 1308, 1309, 1310, 1311, 
	1312, 1313, 1312, 1314, 1313, 1314, 1315, 1318, 
	1320, 1316, 1316, 1317, 1311, 1319, 1319, 1311, 
	1320, 1322, 1323, 1324, 1323, 1325, 1324, 1325, 
	1326, 1329, 1331, 1327, 1327, 1328, 1322, 1330, 
	1330, 1322, 1331, 1333, 1343, 1334, 1335, 1334, 
	1336, 1335, 1336, 1337, 1340, 1342, 1338, 1338, 
	1339, 1333, 1341, 1341, 1333, 1342, 1344, 1345, 
	1346, 1347, 1348, 1347, 1349, 1348, 1349, 1350, 
	1353, 1355, 1351, 1351, 1352, 1346, 1354, 1354, 
	1346, 1355, 1357, 1358, 1359, 1358, 1360, 1359, 
	1360, 1361, 1364, 1366, 1362, 1362, 1363, 1357, 
	1365, 1365, 1357, 1366, 1367, 1369, 1371, 1374, 
	1382, 1384, 1385, 1367, 1367, 1367, 1367, 1372, 
	34, 44, 59, 68, 76, 84, 1367, 1367, 
	1367, 1367, 1378, 1367, 1367, 1367, 86, 1367, 
	1383, 89, 102, 111, 118, 123, 131, 133, 
	1386, 1386, 1387, 1388, 1386, 143, 154, 156, 
	161, 162, 167, 168, 169, 170, 1389, 1390, 
	1392, 1393, 1394, 1395, 1396, 1389, 1405, 1411, 
	0, 1426, 1444, 1460, 1479, 1497, 1514, 1524, 
	1539, 1574, 1592, 1610, 1666, 1694, 1710, 1714, 
	1715, 1716, 1717, 1389, 1389, 173, 1389, 1398, 
	243, 245, 290, 294, 324, 1389, 1389, 211, 
	227, 1389, 1389, 1389, 1400, 1389, 1389, 1389, 
	1404, 335, 1389, 1411, 406, 459, 1389, 1413, 
	1389, 1413, 1389, 1415, 1389, 1415, 1417, 1417, 
	1389, 1419, 1389, 1419, 1389, 1421, 1389, 1421, 
	1423, 1423, 1420, 1427, 1428, 1429, 1430, 1431, 
	508, 1389, 1433, 1434, 1435, 1436, 1437, 1438, 
	1439, 1440, 1441, 1442, 1445, 1446, 1447, 520, 
	1389, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 
	1456, 1457, 1458, 1461, 1462, 1463, 1464, 1465, 
	1466, 532, 1389, 1468, 1469, 1470, 1471, 1472, 
	1473, 1474, 1475, 1476, 1477, 1480, 1481, 1482, 
	1483, 544, 1389, 546, 1486, 1389, 1485, 1487, 
	1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 
	1498, 1499, 1500, 1501, 557, 1389, 1503, 1504, 
	1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 
	1515, 1516, 1517, 569, 1523, 1389, 1525, 1526, 
	622, 1389, 1528, 1529, 1530, 1531, 1532, 1533, 
	1534, 1535, 1536, 1537, 1540, 1545, 1541, 1542, 
	1543, 641, 1389, 1544, 1546, 1560, 1547, 667, 
	1389, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 
	1556, 1557, 1558, 1561, 679, 1389, 1563, 1564, 
	1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 
	1575, 1576, 1577, 1578, 1579, 691, 1389, 1581, 
	1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 
	1590, 1593, 1594, 1595, 1596, 1597, 703, 1389, 
	1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 
	1607, 1608, 1611, 1649, 1612, 715, 1389, 1614, 
	1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 
	1623, 1389, 1626, 1627, 1628, 1629, 1630, 1631, 
	1632, 1633, 1634, 1635, 1389, 1638, 1639, 1640, 
	1641, 1642, 1643, 1644, 1645, 1646, 1647, 1650, 
	1651, 1652, 779, 1389, 781, 1655, 1389, 1654, 
	1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 
	1664, 1667, 1668, 1669, 793, 1389, 1671, 1672, 
	1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 
	1389, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 
	1690, 1691, 1692, 1695, 1696, 1697, 823, 1389, 
	1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 
	1707, 1708, 835, 840, 842, 862, 871, 883, 
	884, 892, 897, 905, 907, 1389, 1389, 1389, 
	972, 983, 1006, 1017, 1035, 1045, 1054, 1061, 
	1074, 1076, 1077, 1079, 1103, 1104, 1106, 1108, 
	1111, 1080, 1112, 1389, 1720, 1720, 1721, 1722, 
	1723, 1720, 1113, 1119, 1724, 1724, 1725, 1726, 
	1727, 1724, 1125, 1134, 1728, 1729, 1730, 1728, 
	1143, 1166, 1194, 1255, 1278, 1306
};

static const short _dtext_trans_actions[] = {
	267, 25, 0, 269, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 235, 
	0, 0, 0, 0, 0, 0, 0, 231, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 5, 5, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 25, 1, 0, 427, 263, 223, 0, 
	261, 221, 0, 0, 0, 0, 0, 227, 
	1, 1, 1, 510, 0, 340, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	1, 271, 0, 3, 0, 0, 0, 0, 
	0, 0, 25, 265, 229, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 233, 
	3, 514, 5, 0, 7, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 1, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 271, 271, 1, 5, 343, 
	0, 7, 0, 0, 0, 225, 3, 3, 
	0, 0, 0, 49, 0, 0, 0, 0, 
	0, 29, 33, 37, 0, 0, 0, 0, 
	41, 27, 0, 31, 35, 0, 0, 0, 
	0, 0, 39, 0, 0, 0, 0, 169, 
	496, 0, 165, 0, 487, 0, 167, 0, 
	163, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 93, 0, 0, 0, 0, 107, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 161, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 83, 0, 0, 
	0, 111, 109, 75, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 5, 5, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	97, 0, 0, 0, 0, 0, 0, 101, 
	1, 0, 283, 0, 0, 0, 0, 0, 
	0, 1, 3, 514, 5, 0, 7, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 271, 
	271, 1, 5, 343, 0, 7, 0, 0, 
	0, 91, 3, 3, 0, 0, 0, 0, 
	3, 0, 646, 659, 5, 0, 151, 430, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 650, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 650, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 650, 0, 0, 
	0, 0, 0, 0, 650, 5, 5, 0, 
	361, 0, 0, 0, 0, 0, 0, 0, 
	0, 5, 5, 5, 5, 5, 5, 5, 
	5, 0, 7, 0, 7, 7, 7, 0, 
	0, 0, 0, 9, 11, 11, 0, 0, 
	11, 11, 0, 0, 13, 388, 388, 0, 
	15, 15, 0, 0, 0, 0, 7, 522, 
	352, 522, 388, 13, 388, 9, 385, 385, 
	0, 0, 385, 0, 0, 0, 0, 15, 
	0, 7, 13, 0, 0, 0, 0, 7, 
	7, 0, 0, 9, 11, 11, 0, 0, 
	0, 0, 0, 7, 13, 355, 7, 355, 
	0, 0, 7, 0, 0, 0, 0, 0, 
	7, 7, 0, 0, 0, 0, 5, 5, 
	5, 5, 5, 5, 5, 0, 7, 7, 
	7, 0, 0, 0, 0, 0, 0, 0, 
	0, 7, 0, 7, 7, 9, 382, 9, 
	382, 0, 11, 0, 11, 0, 0, 0, 
	0, 518, 346, 518, 9, 382, 9, 9, 
	9, 9, 9, 9, 382, 0, 349, 349, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	349, 0, 7, 7, 9, 0, 0, 0, 
	0, 7, 9, 7, 9, 9, 9, 9, 
	0, 0, 7, 0, 0, 0, 0, 0, 
	0, 598, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 618, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 582, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	586, 1, 149, 5, 25, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 574, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	484, 0, 0, 25, 484, 0, 0, 0, 
	0, 0, 153, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 484, 
	0, 0, 0, 0, 484, 0, 0, 0, 
	0, 0, 0, 0, 0, 626, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 3, 0, 0, 0, 
	5, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 590, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 570, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 630, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 622, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	606, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	610, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	614, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 578, 1, 147, 
	0, 5, 25, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 594, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 602, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 634, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 59, 63, 
	67, 71, 0, 57, 85, 0, 0, 0, 
	0, 0, 0, 77, 0, 0, 0, 0, 
	0, 25, 1, 0, 427, 157, 89, 0, 
	155, 87, 0, 0, 0, 0, 0, 81, 
	1, 1, 1, 502, 0, 280, 0, 0, 
	0, 0, 0, 0, 0, 105, 1, 1, 
	1, 506, 0, 286, 0, 0, 0, 0, 
	0, 0, 0, 0, 3, 0, 5, 0, 
	364, 61, 0, 0, 0, 0, 0, 0, 
	25, 159, 99, 0, 0, 0, 0, 0, 
	103, 0, 65, 0, 0, 0, 0, 0, 
	0, 95, 0, 73, 0, 69, 0, 0, 
	0, 0, 0, 5, 0, 5, 5, 5, 
	0, 7, 0, 0, 1, 1, 0, 3, 
	3, 0, 0, 0, 0, 0, 0, 51, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	7, 5, 5, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 0, 3, 3, 0, 
	0, 0, 0, 0, 0, 55, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 0, 3, 0, 5, 
	0, 7, 0, 0, 53, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 274, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 277, 0, 0, 
	0, 0, 0, 0, 0, 0, 642, 0, 
	0, 0, 0, 0, 0, 0, 642, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 179, 0, 0, 0, 0, 0, 171, 
	0, 0, 0, 0, 0, 189, 0, 0, 
	0, 0, 0, 0, 0, 0, 181, 0, 
	0, 0, 0, 0, 0, 0, 0, 219, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 193, 0, 0, 0, 0, 0, 0, 
	0, 213, 0, 0, 0, 203, 0, 0, 
	0, 199, 209, 0, 0, 0, 195, 0, 
	1, 3, 0, 3, 0, 0, 0, 0, 
	5, 5, 0, 7, 19, 406, 5, 0, 
	358, 0, 530, 0, 0, 0, 0, 0, 
	191, 1, 3, 0, 3, 0, 0, 0, 
	0, 5, 5, 0, 7, 19, 403, 5, 
	0, 358, 0, 526, 0, 0, 0, 0, 
	0, 0, 0, 0, 201, 1, 3, 0, 
	3, 0, 0, 0, 0, 5, 5, 0, 
	7, 19, 412, 5, 0, 358, 0, 538, 
	0, 211, 1, 3, 0, 3, 0, 0, 
	0, 0, 5, 5, 0, 7, 19, 421, 
	5, 0, 358, 0, 550, 0, 205, 0, 
	1, 3, 0, 3, 0, 0, 0, 0, 
	5, 5, 0, 7, 19, 415, 5, 0, 
	358, 0, 542, 0, 0, 0, 197, 1, 
	3, 0, 3, 0, 0, 0, 0, 5, 
	5, 0, 7, 19, 409, 5, 0, 358, 
	0, 534, 0, 207, 1, 3, 0, 3, 
	0, 0, 0, 0, 5, 5, 0, 7, 
	19, 418, 5, 0, 358, 0, 546, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 3, 0, 3, 0, 0, 0, 
	0, 5, 5, 0, 7, 19, 5, 0, 
	358, 0, 0, 0, 0, 0, 0, 1, 
	3, 0, 3, 0, 0, 0, 0, 5, 
	5, 0, 7, 19, 5, 0, 358, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 3, 0, 3, 0, 0, 0, 0, 
	5, 5, 0, 7, 19, 5, 0, 358, 
	0, 0, 1, 3, 0, 3, 0, 0, 
	0, 0, 5, 5, 0, 7, 19, 5, 
	0, 358, 0, 0, 0, 1, 3, 0, 
	3, 0, 0, 0, 0, 5, 5, 0, 
	7, 19, 5, 0, 358, 0, 0, 0, 
	0, 1, 3, 0, 3, 0, 0, 0, 
	0, 5, 5, 0, 7, 19, 5, 0, 
	358, 0, 0, 1, 3, 0, 3, 0, 
	0, 0, 0, 5, 5, 0, 7, 19, 
	5, 0, 358, 0, 237, 25, 424, 25, 
	25, 25, 25, 257, 259, 255, 379, 0, 
	0, 0, 0, 0, 0, 0, 241, 247, 
	245, 251, 0, 249, 253, 243, 1, 239, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	45, 43, 25, 25, 47, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 115, 0, 
	499, 499, 493, 499, 490, 113, 499, 638, 
	0, 638, 638, 638, 638, 638, 638, 638, 
	638, 638, 638, 638, 638, 638, 654, 654, 
	499, 499, 499, 145, 143, 0, 141, 487, 
	1, 0, 0, 0, 0, 137, 139, 0, 
	0, 123, 79, 376, 0, 133, 135, 131, 
	0, 1, 117, 496, 3, 3, 562, 17, 
	397, 0, 566, 17, 400, 0, 17, 0, 
	558, 13, 394, 0, 554, 13, 391, 0, 
	13, 0, 388, 496, 496, 496, 496, 496, 
	0, 310, 454, 454, 454, 454, 454, 454, 
	454, 454, 0, 0, 496, 496, 496, 0, 
	325, 469, 469, 469, 469, 469, 469, 469, 
	469, 0, 0, 496, 496, 496, 496, 496, 
	496, 0, 298, 442, 442, 442, 442, 442, 
	442, 442, 442, 0, 0, 496, 496, 496, 
	496, 0, 301, 3, 445, 367, 0, 445, 
	445, 445, 445, 445, 445, 445, 25, 25, 
	496, 496, 496, 496, 0, 292, 436, 436, 
	436, 436, 436, 436, 436, 436, 0, 0, 
	496, 496, 496, 0, 496, 119, 496, 496, 
	0, 331, 475, 475, 475, 475, 475, 475, 
	475, 475, 0, 0, 496, 496, 496, 496, 
	496, 0, 373, 0, 496, 496, 496, 0, 
	304, 448, 448, 448, 448, 448, 448, 448, 
	448, 0, 0, 496, 0, 289, 433, 433, 
	433, 433, 433, 433, 433, 433, 0, 0, 
	496, 496, 496, 496, 496, 0, 334, 478, 
	478, 478, 478, 478, 478, 478, 478, 0, 
	0, 496, 496, 496, 496, 496, 0, 328, 
	472, 472, 472, 472, 472, 472, 472, 472, 
	0, 0, 496, 496, 496, 0, 316, 460, 
	460, 460, 460, 460, 460, 460, 460, 0, 
	0, 319, 463, 463, 463, 463, 463, 463, 
	463, 463, 0, 0, 322, 466, 466, 466, 
	466, 466, 466, 466, 466, 0, 0, 496, 
	496, 496, 0, 295, 3, 439, 370, 0, 
	439, 439, 439, 439, 439, 439, 439, 25, 
	25, 496, 496, 496, 0, 307, 451, 451, 
	451, 451, 451, 451, 451, 451, 0, 0, 
	313, 457, 457, 457, 457, 457, 457, 457, 
	457, 0, 0, 496, 496, 496, 0, 337, 
	481, 481, 481, 481, 481, 481, 481, 481, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 127, 125, 129, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 1, 
	1, 1, 1, 121, 175, 173, 25, 25, 
	25, 177, 0, 0, 185, 183, 25, 25, 
	25, 187, 0, 0, 215, 25, 25, 217, 
	0, 0, 0, 0, 0, 0
};

static const short _dtext_to_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 21, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 21, 0, 0, 21, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	21, 0, 0, 0, 21, 0, 0, 0, 
	21, 0, 0
};

static const short _dtext_from_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 23, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 23, 0, 0, 23, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	23, 0, 0, 0, 23, 0, 0, 0, 
	23, 0, 0
};

static const short _dtext_eof_trans[] = {
	0, 1, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 62, 65, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 100, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 208, 208, 211, 208, 215, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 256, 256, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 256, 256, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 217, 217, 217, 217, 217, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 217, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 217, 208, 208, 208, 
	208, 208, 208, 208, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	208, 208, 208, 208, 208, 208, 217, 208, 
	208, 208, 208, 208, 208, 208, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 215, 
	215, 215, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 407, 407, 407, 407, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 211, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 211, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 211, 211, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 211, 
	211, 211, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 211, 211, 211, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 211, 
	211, 211, 699, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 211, 211, 211, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 211, 211, 
	211, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 211, 211, 211, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 211, 211, 
	211, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 211, 211, 211, 952, 952, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	211, 211, 211, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 211, 211, 
	211, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 211, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 1038, 1041, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 1090, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 215, 
	215, 215, 215, 215, 215, 215, 215, 215, 
	215, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 
	1330, 1330, 1330, 1330, 1330, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 
	1360, 1360, 1360, 1360, 1360, 1360, 1360, 0, 
	1724, 1725, 1726, 1725, 1727, 1727, 1725, 1735, 
	1736, 1737, 1738, 1740, 1741, 1742, 1725, 1744, 
	1725, 1725, 0, 1757, 1757, 0, 1796, 1797, 
	1796, 1796, 208, 1796, 1799, 1806, 1807, 1810, 
	1812, 1812, 1814, 1815, 1816, 1796, 1819, 1819, 
	1819, 1819, 1819, 1797, 1823, 1825, 1827, 1829, 
	1823, 1825, 1833, 1835, 1837, 1839, 1837, 1839, 
	1837, 1837, 1797, 1797, 1797, 1797, 1797, 1797, 
	1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850, 
	1850, 1850, 1850, 1850, 1797, 1797, 1797, 1797, 
	1865, 1865, 1865, 1865, 1865, 1865, 1865, 1865, 
	1865, 1865, 1865, 1865, 1797, 1797, 1797, 1797, 
	1797, 1797, 1797, 1883, 1883, 1883, 1883, 1883, 
	1883, 1883, 1883, 1883, 1883, 1883, 1883, 1797, 
	1797, 1797, 1797, 1797, 1899, 1902, 1899, 1899, 
	1899, 1899, 1899, 1899, 1899, 1899, 1899, 1899, 
	1899, 1797, 1797, 1797, 1797, 1797, 1918, 1918, 
	1918, 1918, 1918, 1918, 1918, 1918, 1918, 1918, 
	1918, 1918, 1797, 1797, 1797, 1797, 1934, 1934, 
	1934, 1934, 1934, 1797, 1797, 1797, 1797, 1938, 
	1938, 1938, 1938, 1938, 1938, 1938, 1938, 1938, 
	1938, 1938, 1938, 1797, 1797, 1797, 1797, 1797, 
	1955, 1797, 1797, 1797, 1961, 1961, 1961, 1961, 
	1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961, 
	1797, 1797, 1974, 1974, 1974, 1974, 1974, 1974, 
	1974, 1974, 1974, 1974, 1974, 1974, 1797, 1797, 
	1797, 1797, 1797, 1797, 1991, 1991, 1991, 1991, 
	1991, 1991, 1991, 1991, 1991, 1991, 1991, 1991, 
	1797, 1797, 1797, 1797, 1797, 1797, 2008, 2008, 
	2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 
	2008, 2008, 1797, 1797, 1797, 2023, 2023, 2023, 
	2023, 2023, 2023, 2023, 2023, 2023, 2023, 2023, 
	2023, 2034, 2034, 2034, 2034, 2034, 2034, 2034, 
	2034, 2034, 2034, 2034, 2034, 2045, 2045, 2045, 
	2045, 2045, 2045, 2045, 2045, 2045, 2045, 2045, 
	2045, 1797, 1797, 1797, 1797, 2060, 2063, 2060, 
	2060, 2060, 2060, 2060, 2060, 2060, 2060, 2060, 
	2060, 2060, 1797, 1797, 1797, 1797, 2078, 2078, 
	2078, 2078, 2078, 2078, 2078, 2078, 2078, 2078, 
	2078, 2078, 2089, 2089, 2089, 2089, 2089, 2089, 
	2089, 2089, 2089, 2089, 2089, 2089, 1797, 1797, 
	1797, 1797, 2104, 2104, 2104, 2104, 2104, 2104, 
	2104, 2104, 2104, 2104, 2104, 2104, 1796, 2126, 
	2127, 2128, 1796, 1796, 1796, 1796, 2148, 2148, 
	0, 2154, 2154, 2154, 0, 2162, 2162, 2162, 
	0, 2168, 2168
};

static const int dtext_start = 1367;
static const int dtext_first_final = 1367;
static const int dtext_error = 0;

static const int dtext_en_basic_inline = 1386;
static const int dtext_en_inline = 1389;
static const int dtext_en_code = 1720;
static const int dtext_en_nodtext = 1724;
static const int dtext_en_table = 1728;
static const int dtext_en_main = 1367;


#line 788 "ext/dtext/dtext.cpp.rl"

static void dstack_push(StateMachine * sm, element_t element) {
  sm->dstack.push_back(element);
}

static element_t dstack_pop(StateMachine * sm) {
  if (sm->dstack.empty()) {
    g_debug("dstack pop empty stack");
    return DSTACK_EMPTY;
  } else {
    auto element = sm->dstack.back();
    sm->dstack.pop_back();
    return element;
  }
}

static element_t dstack_peek(const StateMachine * sm) {
  return sm->dstack.empty() ? DSTACK_EMPTY : sm->dstack.back();
}

static bool dstack_check(const StateMachine * sm, element_t expected_element) {
  return dstack_peek(sm) == expected_element;
}

// Return true if the given tag is currently open.
static bool dstack_is_open(const StateMachine * sm, element_t element) {
  return std::find(sm->dstack.begin(), sm->dstack.end(), element) != sm->dstack.end();
}

static int dstack_count(const StateMachine * sm, element_t element) {
  return std::count(sm->dstack.begin(), sm->dstack.end(), element);
}

static bool is_internal_url(StateMachine * sm, const std::string_view url) {
  if (url.starts_with("/")) {
    return true;
  } else if (sm->options.domain.empty() || url.empty()) {
    return false;
  } else {
    // Matches the domain name part of a URL.
    static const std::regex url_regex("^https?://(?:[^/?#]*@)?([^/?#:]+)", std::regex_constants::icase);

    std::match_results<std::string_view::const_iterator> matches;
    std::regex_search(url.begin(), url.end(), matches, url_regex);
    return matches[1] == sm->options.domain;
  }
}

static void append(StateMachine * sm, const auto c) {
  sm->output += c;
}

static void append(StateMachine * sm, const char * a, const char * b) {
  append(sm, std::string_view(a, b));
}

static void append_html_escaped(StateMachine * sm, char s) {
  switch (s) {
    case '<': append(sm, "&lt;"); break;
    case '>': append(sm, "&gt;"); break;
    case '&': append(sm, "&amp;"); break;
    case '"': append(sm, "&quot;"); break;
    default:  append(sm, s);
  }
}

static void append_html_escaped(StateMachine * sm, const std::string_view string) {
  for (const unsigned char c : string) {
    append_html_escaped(sm, c);
  }
}

static void append_uri_escaped(StateMachine * sm, const std::string_view string) {
  static const char hex[] = "0123456789ABCDEF";

  for (const unsigned char c : string) {
    if ((c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == '-' || c == '_' || c == '.' || c == '~') {
      append(sm, c);
    } else {
      append(sm, '%');
      append(sm, hex[c >> 4]);
      append(sm, hex[c & 0x0F]);
    }
  }
}

static void append_relative_url(StateMachine * sm, const auto url) {
  if ((url[0] == '/' || url[0] == '#') && !sm->options.base_url.empty()) {
    append_html_escaped(sm, sm->options.base_url);
  }

  append_html_escaped(sm, url);
}

static void append_absolute_link(StateMachine * sm, const std::string_view url, const std::string_view title, bool internal_url, bool escape_title) {
  if (internal_url) {
    append(sm, "<a class=\"dtext-link\" href=\"");
  } else if (url == title) {
    append(sm, "<a rel=\"external nofollow noreferrer\" class=\"dtext-link dtext-external-link\" href=\"");
  } else {
    append(sm, "<a rel=\"external nofollow noreferrer\" class=\"dtext-link dtext-external-link dtext-named-external-link\" href=\"");
  }

  append_html_escaped(sm, url);
  append(sm, "\">");

  if (escape_title) {
    append_html_escaped(sm, title);
  } else {
    append(sm, title);
  }

  append(sm, "</a>");
}

static void append_mention(StateMachine * sm, const std::string_view name) {
  append(sm, "<a class=\"dtext-link dtext-user-mention-link\" data-user-name=\"");
  append_html_escaped(sm, name);
  append(sm, "\" href=\"");
  append_relative_url(sm, "/users?name=");
  append_uri_escaped(sm, name);
  append(sm, "\">@");
  append_html_escaped(sm, name);
  append(sm, "</a>");
}

static void append_id_link(StateMachine * sm, const char * title, const char * id_name, const char * url, const std::string_view id) {
  if (url[0] == '/') {
    append(sm, "<a class=\"dtext-link dtext-id-link dtext-");
    append(sm, id_name);
    append(sm, "-id-link\" href=\"");
    append_relative_url(sm, url);
  } else {
    append(sm, "<a rel=\"external nofollow noreferrer\" class=\"dtext-link dtext-id-link dtext-");
    append(sm, id_name);
    append(sm, "-id-link\" href=\"");
    append_html_escaped(sm, url);
  }

  append_uri_escaped(sm, id);
  append(sm, "\">");
  append(sm, title);
  append(sm, " #");
  append_html_escaped(sm, id);
  append(sm, "</a>");
}

static void append_bare_unnamed_url(StateMachine * sm, const std::string_view url) {
  auto [trimmed_url, leftovers] = trim_url(url);
  append_unnamed_url(sm, trimmed_url);
  append_html_escaped(sm, leftovers);
}

static void append_unnamed_url(StateMachine * sm, const std::string_view url) {
  DText::URL parsed_url(url);

  if (sm->options.internal_domains.find(std::string(parsed_url.domain)) != sm->options.internal_domains.end()) {
    append_internal_url(sm, parsed_url);
  } else {
    append_absolute_link(sm, url, url, parsed_url.domain == sm->options.domain);
  }
}

static void append_internal_url(StateMachine * sm, const DText::URL& url) {
  auto path_components = url.path_components();
  auto query = url.query;
  auto fragment = url.fragment;

  if (path_components.size() == 2) {
    auto controller = path_components.at(0);
    auto id = path_components.at(1);

    if (!id.empty() && std::all_of(id.begin(), id.end(), ::isdigit)) {
      if (controller == "post" && fragment.empty()) {
        // https://danbooru.donmai.us/posts/6000000#comment_2288996
        return append_id_link(sm, "post", "post", "/posts/", id);
      } else if (controller == "pool" && query.empty()) {
        // https://danbooru.donmai.us/pools/903?page=2
        return append_id_link(sm, "pool", "pool", "/pools/", id);
      } else if (controller == "comment") {
        return append_id_link(sm, "comment", "comment", "/comments/", id);
      } else if (controller == "forum") {
        return append_id_link(sm, "forum", "forum-post", "/forums/", id);
      } else if (controller == "forum" && query.empty() && fragment.empty()) {
        // https://danbooru.donmai.us/forum_topics/1234?page=2
        // https://danbooru.donmai.us/forum_topics/1234#forum_post_5678
        return append_id_link(sm, "topic", "forum-topic", "/forums/", id);
      } else if (controller == "user") {
        return append_id_link(sm, "user", "user", "/users/", id);
      } else if (controller == "artist") {
        return append_id_link(sm, "artist", "artist", "/artists/", id);
      } else if (controller == "wiki" && fragment.empty()) {
        // http://danbooru.donmai.us/wiki_pages/10933#dtext-self-upload
        return append_id_link(sm, "wiki", "wiki-page", "/wiki/", id);
      }
    } else if (controller == "wiki" && fragment.empty()) {
      return append_wiki_link(sm, {}, id, {}, id, {});
    }
  } else if (path_components.size() >= 3) {
    // http://danbooru.donmai.us/post/show/1234/touhou
    auto controller = path_components.at(0);
    auto action = path_components.at(1);
    auto id = path_components.at(2);

    if (!id.empty() && std::all_of(id.begin(), id.end(), ::isdigit)) {
      if (controller == "post" && action == "show") {
        return append_id_link(sm, "post", "post", "/posts/", id);
      }
    }
  }

  append_absolute_link(sm, url.url, url.url, url.domain == sm->options.domain);
}

static void append_named_url(StateMachine * sm, const std::string_view url, const std::string_view title) {
  auto parsed_title = sm->parse_basic_inline(title);

  // protocol-relative url; treat `//example.com` like `http://example.com`
  if (url.size() > 2 && url.starts_with("//")) {
    auto full_url = "http:" + std::string(url);
    append_absolute_link(sm, full_url, parsed_title, is_internal_url(sm, full_url), false);
  } else if (url[0] == '/' || url[0] == '#') {
    append(sm, "<a class=\"dtext-link\" href=\"");
    append_relative_url(sm, url);
    append(sm, "\">");
    append(sm, parsed_title);
    append(sm, "</a>");
  } else if (url == title) {
    append_unnamed_url(sm, url);
  } else {
    append_absolute_link(sm, url, parsed_title, is_internal_url(sm, url), false);
  }
}

static void append_bare_named_url(StateMachine * sm, const std::string_view url, std::string_view title) {
  auto [trimmed_url, leftovers] = trim_url(url);
  append_named_url(sm, trimmed_url, title);
  append_html_escaped(sm, leftovers);
}

static void append_post_search_link(StateMachine * sm, const std::string_view prefix, const std::string_view search, const std::string_view title, const std::string_view suffix) {
  auto normalized_title = std::string(title);

  append(sm, "<a class=\"dtext-link dtext-post-search-link\" href=\"");
  append_relative_url(sm, "/post?tags=");
  append_uri_escaped(sm, search);
  append(sm, "\">");

  // 19{{60s}} -> {{60s|1960s}}
  if (!prefix.empty()) {
    normalized_title.insert(0, prefix);
  }

  // {{pokemon_(creature)|}} -> {{pokemon_(creature)|pokemon}}
  if (title.empty()) {
    std::regex_replace(std::back_inserter(normalized_title), search.begin(), search.end(), tag_qualifier_regex, "");
  }

  // {{cat}}s -> {{cat|cats}}
  if (!suffix.empty()) {
    normalized_title.append(suffix);
  }

  append_html_escaped(sm, normalized_title);
  append(sm, "</a>");

  clear_matches(sm);
}

static void append_wiki_link(StateMachine * sm, const std::string_view prefix, const std::string_view tag, const std::string_view anchor, const std::string_view title, const std::string_view suffix) {
  auto normalized_tag = std::string(tag);
  auto title_string = std::string(title);

  // "Kantai Collection" -> "kantai_collection"
  std::transform(normalized_tag.cbegin(), normalized_tag.cend(), normalized_tag.begin(), [](unsigned char c) { return c == ' ' ? '_' : std::tolower(c); });

  // [[2019]] -> [[~2019]]
  if (std::all_of(normalized_tag.cbegin(), normalized_tag.cend(), ::isdigit)) {
    normalized_tag.insert(0, "~");
  }

  // Pipe trick: [[Kaga (Kantai Collection)|]] -> [[kaga_(kantai_collection)|Kaga]]
  if (title_string.empty()) {
    std::regex_replace(std::back_inserter(title_string), tag.cbegin(), tag.cend(), tag_qualifier_regex, "");
  }

  // 19[[60s]] -> [[60s|1960s]]
  if (!prefix.empty()) {
    title_string.insert(0, prefix);
  }

  // [[cat]]s -> [[cat|cats]]
  if (!suffix.empty()) {
    title_string.append(suffix);
  }

  append(sm, "<a class=\"dtext-link dtext-wiki-link\" href=\"");
  append_relative_url(sm, "/wiki/");
  append_uri_escaped(sm, normalized_tag);

  if (!anchor.empty()) {
    std::string normalized_anchor(anchor);
    std::transform(normalized_anchor.begin(), normalized_anchor.end(), normalized_anchor.begin(), [](char c) { return isalnum(c) ? tolower(c) : '-'; });
    append_html_escaped(sm, "#dtext-");
    append_html_escaped(sm, normalized_anchor);
  }

  append(sm, "\">");
  append_html_escaped(sm, title_string);
  append(sm, "</a>");

  sm->wiki_pages.insert(std::string(tag));

  clear_matches(sm);
}

static void append_paged_link(StateMachine * sm, const char * title, const char * tag, const char * href, const char * param) {
  append(sm, tag);
  append_relative_url(sm, href);
  append(sm, sm->a1, sm->a2);
  append(sm, param);
  append(sm, sm->b1, sm->b2);
  append(sm, "\">");
  append(sm, title);
  append(sm, sm->a1, sm->a2);
  append(sm, "/p");
  append(sm, sm->b1, sm->b2);
  append(sm, "</a>");
}

static void append_dmail_key_link(StateMachine * sm) {
  append(sm, "<a class=\"dtext-link dtext-id-link dtext-dmail-id-link\" href=\"");
  append_relative_url(sm, "/dmails/");
  append(sm, sm->a1, sm->a2);
  append(sm, "?key=");
  append_uri_escaped(sm, { sm->b1, sm->b2 });
  append(sm, "\">");
  append(sm, "dmail #");
  append(sm, sm->a1, sm->a2);
  append(sm, "</a>");
}

static void append_code_fence(StateMachine * sm, const std::string_view code, const std::string_view language) {
  if (language.empty()) {
    append_block(sm, "<pre>");
    append_html_escaped(sm, code);
    append_block(sm, "</pre>");
  } else {
    append_block(sm, "<pre class=\"language-");
    append_html_escaped(sm, language);
    append_block(sm, "\">");
    append_html_escaped(sm, code);
    append_block(sm, "</pre>");
  }
}

static void append_inline_code(StateMachine * sm, const std::string_view language = {}) {
  if (language.empty()) {
    dstack_open_element(sm, INLINE_CODE, "<code>");
  } else {
    dstack_open_element(sm, INLINE_CODE, "<code class=\"language-");
    append_html_escaped(sm, language);
    append(sm, "\">");
  }
}

static void append_block_code(StateMachine * sm, const std::string_view language = {}) {
  dstack_close_leaf_blocks(sm);

  if (language.empty()) {
    dstack_open_element(sm, BLOCK_CODE, "<pre>");
  } else {
    dstack_open_element(sm, BLOCK_CODE, "<pre class=\"language-");
    append_html_escaped(sm, language);
    append(sm, "\">");
  }
}

static void append_header(StateMachine * sm, char header, const std::string_view id) {
  static element_t blocks[] = { BLOCK_H1, BLOCK_H2, BLOCK_H3, BLOCK_H4, BLOCK_H5, BLOCK_H6 };
  element_t block = blocks[header - '1'];

  if (id.empty()) {
    dstack_open_element(sm, block, "<h");
    append_block(sm, header);
    append_block(sm, ">");
  } else {
    auto normalized_id = std::string(id);
    std::transform(id.begin(), id.end(), normalized_id.begin(), [](char c) { return isalnum(c) ? tolower(c) : '-'; });

    dstack_open_element(sm, block, "<h");
    append_block(sm, header);
    append_block(sm, " id=\"dtext-");
    append_block(sm, normalized_id);
    append_block(sm, "\">");
  }

  sm->header_mode = true;
}

static void append_block(StateMachine * sm, const auto s) {
  if (!sm->options.f_inline) {
    append(sm, s);
  }
}

static void append_block_html_escaped(StateMachine * sm, const std::string_view string) {
  if (!sm->options.f_inline) {
    append_html_escaped(sm, string);
  }
}

static void append_closing_p(StateMachine * sm) {
  g_debug("append closing p");

  if (sm->output.size() > 4 && sm->output.ends_with("<br>")) {
    g_debug("trim last <br>");
    sm->output.resize(sm->output.size() - 4);
  }

  if (sm->output.size() > 3 && sm->output.ends_with("<p>")) {
    g_debug("trim last <p>");
    sm->output.resize(sm->output.size() - 3);
    return;
  }

  append_block(sm, "</p>");
}

static void dstack_open_element(StateMachine * sm, element_t type, const char * html) {
  g_debug("opening %s", html);

  dstack_push(sm, type);

  if (type >= INLINE) {
    append(sm, html);
  } else {
    append_block(sm, html);
  }
}

static void dstack_open_element(StateMachine * sm, element_t type, std::string_view tag_name, const StateMachine::TagAttributes& tag_attributes) {
  dstack_push(sm, type);
  append_block(sm, "<");
  append_block(sm, tag_name);

  auto& permitted_names = permitted_attribute_names.at(tag_name);
  for (auto& [name, value] : tag_attributes) {
    if (permitted_names.find(name) != permitted_names.end()) {
      auto validate_value = permitted_attribute_values.at(name);

      if (validate_value(value)) {
        append_block(sm, " ");
        append_block_html_escaped(sm, name);
        append_block(sm, "=\"");
        append_block_html_escaped(sm, value);
        append_block(sm, "\"");
      }
    }
  }

  append_block(sm, ">");
  clear_tag_attributes(sm);
}

static bool dstack_close_element(StateMachine * sm, element_t type) {
  if (dstack_check(sm, type)) {
    dstack_rewind(sm);
    return true;
  } else if (type >= INLINE && dstack_peek(sm) >= INLINE) {
    g_debug("out-of-order close %s; closing %s instead", element_names[type], element_names[dstack_peek(sm)]);
    dstack_rewind(sm);
    return true;
  } else if (type >= INLINE) {
    g_debug("out-of-order closing %s", element_names[type]);
    append_html_escaped(sm, { sm->ts, sm->te });
    return false;
  } else {
    g_debug("out-of-order closing %s", element_names[type]);
    append_block_html_escaped(sm, { sm->ts, sm->te });
    return false;
  }
}

// Close the last open tag.
static void dstack_rewind(StateMachine * sm) {
  element_t element = dstack_pop(sm);
  g_debug("dstack rewind %s", element_names[element]);

  switch(element) {
    case BLOCK_P: append_closing_p(sm); break;
    case INLINE_SPOILER: append(sm, "</span>"); break;
    case BLOCK_SPOILER: append_block(sm, "</div>"); break;
    case BLOCK_QUOTE: append_block(sm, "</blockquote>"); break;
    case BLOCK_EXPAND: append_block(sm, "</div></details>"); break;
    case BLOCK_NODTEXT: append_block(sm, "</p>"); break;
    case BLOCK_CODE: append_block(sm, "</pre>"); break;
    case BLOCK_TD: append_block(sm, "</td>"); break;
    case BLOCK_TH: append_block(sm, "</th>"); break;

    case INLINE_NODTEXT: break;
    case INLINE_B: append(sm, "</strong>"); break;
    case INLINE_I: append(sm, "</em>"); break;
    case INLINE_U: append(sm, "</u>"); break;
    case INLINE_S: append(sm, "</s>"); break;
    case INLINE_TN: append(sm, "</span>"); break;
    case INLINE_CENTER: append(sm, "</div>"); break;
    case INLINE_COLOR: append(sm, "</span>"); break;
    case INLINE_CODE: append(sm, "</code>"); break;

    case BLOCK_TN: append_closing_p(sm); break;
    case BLOCK_CENTER: append_closing_p(sm); break;
    case BLOCK_COLOR: append_closing_p(sm); break;
    case BLOCK_TABLE: append_block(sm, "</table>"); break;
    case BLOCK_COLGROUP: append_block(sm, "</colgroup>"); break;
    case BLOCK_THEAD: append_block(sm, "</thead>"); break;
    case BLOCK_TBODY: append_block(sm, "</tbody>"); break;
    case BLOCK_TR: append_block(sm, "</tr>"); break;
    case BLOCK_UL: append_block(sm, "</ul>"); break;
    case BLOCK_LI: append_block(sm, "</li>"); break;
    case BLOCK_H6: append_block(sm, "</h6>"); sm->header_mode = false; break;
    case BLOCK_H5: append_block(sm, "</h5>"); sm->header_mode = false; break;
    case BLOCK_H4: append_block(sm, "</h4>"); sm->header_mode = false; break;
    case BLOCK_H3: append_block(sm, "</h3>"); sm->header_mode = false; break;
    case BLOCK_H2: append_block(sm, "</h2>"); sm->header_mode = false; break;
    case BLOCK_H1: append_block(sm, "</h1>"); sm->header_mode = false; break;

    // Should never happen.
    case INLINE: break;
    case DSTACK_EMPTY: break;
  } 
}

// container blocks: [spoiler], [quote], [expand], [tn], [center], [color]
// leaf blocks: [nodtext], [code], [table], [td]?, [th]?, <h1>, <p>, <li>, <ul>
static void dstack_close_leaf_blocks(StateMachine * sm) {
  g_debug("dstack close leaf blocks");

  while (!sm->dstack.empty() && !dstack_check(sm, BLOCK_QUOTE) && !dstack_check(sm, BLOCK_SPOILER) && !dstack_check(sm, BLOCK_EXPAND) && !dstack_check(sm, BLOCK_TN) && !dstack_check(sm, BLOCK_CENTER) && !dstack_check(sm, BLOCK_COLOR)) {
    dstack_rewind(sm);
  }
}

// Close all open tags up to and including the given tag.
static void dstack_close_until(StateMachine * sm, element_t element) {
  while (!sm->dstack.empty() && !dstack_check(sm, element)) {
    dstack_rewind(sm);
  }

  dstack_rewind(sm);
}

// Close all remaining open tags.
static void dstack_close_all(StateMachine * sm) {
  while (!sm->dstack.empty()) {
    dstack_rewind(sm);
  }
}

static void dstack_open_list(StateMachine * sm, int depth) {
  g_debug("open list");

  if (dstack_is_open(sm, BLOCK_LI)) {
    dstack_close_until(sm, BLOCK_LI);
  } else {
    dstack_close_leaf_blocks(sm);
  }

  while (dstack_count(sm, BLOCK_UL) < depth) {
    dstack_open_element(sm, BLOCK_UL, "<ul>");
  }

  while (dstack_count(sm, BLOCK_UL) > depth) {
    dstack_close_until(sm, BLOCK_UL);
  }

  dstack_open_element(sm, BLOCK_LI, "<li>");
}

static void dstack_close_list(StateMachine * sm) {
  while (dstack_is_open(sm, BLOCK_UL)) {
    dstack_close_until(sm, BLOCK_UL);
  }
}

static void save_tag_attribute(StateMachine * sm, const std::string_view name, const std::string_view value) {
  sm->tag_attributes[name] = value;
}

static void clear_tag_attributes(StateMachine * sm) {
  sm->tag_attributes.clear();
}

static void clear_matches(StateMachine * sm) {
  sm->a1 = NULL;
  sm->a2 = NULL;
  sm->b1 = NULL;
  sm->b2 = NULL;
  sm->c1 = NULL;
  sm->c2 = NULL;
  sm->d1 = NULL;
  sm->d2 = NULL;
  sm->e1 = NULL;
  sm->e2 = NULL;
}

// True if a mention is allowed to start after this character.
static bool is_mention_boundary(unsigned char c) {
  switch (c) {
    case '\0': return true;
    case '\r': return true;
    case '\n': return true;
    case ' ':  return true;
    case '/':  return true;
    case '"':  return true;
    case '\'': return true;
    case '(':  return true;
    case ')':  return true;
    case '[':  return true;
    case ']':  return true;
    case '{':  return true;
    case '}':  return true;
    default:   return false;
  }
}

// Trim trailing unbalanced ')' characters from the URL.
static std::tuple<std::string_view, std::string_view> trim_url(const std::string_view url) {
  std::string_view trimmed = url;

  while (!trimmed.empty() && trimmed.back() == ')' && std::count(trimmed.begin(), trimmed.end(), ')') > std::count(trimmed.begin(), trimmed.end(), '(')) {
    trimmed.remove_suffix(1);
  }

  return { trimmed, { trimmed.end(), url.end() } };
}

// Replace CRLF sequences with LF.
static void replace_newlines(const std::string_view input, std::string& output) {
  size_t pos, last = 0;

  while (std::string::npos != (pos = input.find("\r\n", last))) {
    output.append(input, last, pos - last);
    output.append("\n");
    last = pos + 2;
  }

  output.append(input, last, pos - last);
}

StateMachine::StateMachine(const auto string, int initial_state, const DTextOptions options) : options(options) {
  // Add null bytes to the beginning and end of the string as start and end of string markers.
  input.reserve(string.size());
  input.append(1, '\0');
  replace_newlines(string, input);
  input.append(1, '\0');

  output.reserve(string.size() * 1.5);
  stack.reserve(16);
  dstack.reserve(16);

  p = input.c_str();
  pb = input.c_str();
  pe = input.c_str() + input.size();
  eof = pe;
  cs = initial_state;
}

std::string StateMachine::parse_inline(const std::string_view dtext) {
  StateMachine sm(dtext, dtext_en_inline, options);
  return sm.parse();
}

std::string StateMachine::parse_basic_inline(const std::string_view dtext) {
  StateMachine sm(dtext, dtext_en_basic_inline, options);
  return sm.parse();
}

StateMachine::ParseResult StateMachine::parse_dtext(const std::string_view dtext, DTextOptions options) {
  StateMachine sm(dtext, dtext_en_main, options);
  return { sm.parse(), sm.wiki_pages };
}

std::string StateMachine::parse() {
  StateMachine* sm = this;
  g_debug("parse '%.*s'", (int)(sm->input.size() - 2), sm->input.c_str() + 1);

  
#line 5744 "ext/dtext/dtext.cpp"
	{
	( sm->top) = 0;
	( sm->ts) = 0;
	( sm->te) = 0;
	( sm->act) = 0;
	}

#line 1476 "ext/dtext/dtext.cpp.rl"
  
#line 5750 "ext/dtext/dtext.cpp"
	{
	int _klen;
	unsigned int _trans;
	short _widec;
	const unsigned char *_acts;
	unsigned int _nacts;
	const short *_keys;

	if ( ( sm->p) == ( sm->pe) )
		goto _test_eof;
	if (  sm->cs == 0 )
		goto _out;
_resume:
	_acts = _dtext_actions + _dtext_from_state_actions[ sm->cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 12:
#line 1 "NONE"
	{( sm->ts) = ( sm->p);}
	break;
#line 5770 "ext/dtext/dtext.cpp"
		}
	}

	_widec = (*( sm->p));
	_klen = _dtext_cond_lengths[ sm->cs];
	_keys = _dtext_cond_keys + (_dtext_cond_offsets[ sm->cs]*2);
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( _widec < _mid[0] )
				_upper = _mid - 2;
			else if ( _widec > _mid[1] )
				_lower = _mid + 2;
			else {
				switch ( _dtext_cond_spaces[_dtext_cond_offsets[ sm->cs] + ((_mid - _keys)>>1)] ) {
	case 0: {
		_widec = (short)(128 + ((*( sm->p)) - -128));
		if ( 
#line 82 "ext/dtext/dtext.cpp.rl"
 is_mention_boundary(p[-1])  ) _widec += 256;
		break;
	}
	case 1: {
		_widec = (short)(640 + ((*( sm->p)) - -128));
		if ( 
#line 83 "ext/dtext/dtext.cpp.rl"
 sm->options.f_mentions  ) _widec += 256;
		break;
	}
	case 2: {
		_widec = (short)(2688 + ((*( sm->p)) - -128));
		if ( 
#line 84 "ext/dtext/dtext.cpp.rl"
 dstack_is_open(sm, BLOCK_QUOTE)  ) _widec += 256;
		break;
	}
	case 3: {
		_widec = (short)(3200 + ((*( sm->p)) - -128));
		if ( 
#line 85 "ext/dtext/dtext.cpp.rl"
 dstack_is_open(sm, BLOCK_EXPAND)  ) _widec += 256;
		break;
	}
	case 4: {
		_widec = (short)(2176 + ((*( sm->p)) - -128));
		if ( 
#line 86 "ext/dtext/dtext.cpp.rl"
 dstack_is_open(sm, BLOCK_COLOR)  ) _widec += 256;
		break;
	}
	case 5: {
		_widec = (short)(1152 + ((*( sm->p)) - -128));
		if ( 
#line 82 "ext/dtext/dtext.cpp.rl"
 is_mention_boundary(p[-1])  ) _widec += 256;
		if ( 
#line 83 "ext/dtext/dtext.cpp.rl"
 sm->options.f_mentions  ) _widec += 512;
		break;
	}
				}
				break;
			}
		}
	}

	_keys = _dtext_trans_keys + _dtext_key_offsets[ sm->cs];
	_trans = _dtext_index_offsets[ sm->cs];

	_klen = _dtext_single_lengths[ sm->cs];
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( _widec < *_mid )
				_upper = _mid - 1;
			else if ( _widec > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _dtext_range_lengths[ sm->cs];
	if ( _klen > 0 ) {
		const short *_lower = _keys;
		const short *_mid;
		const short *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( _widec < _mid[0] )
				_upper = _mid - 2;
			else if ( _widec > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _dtext_indicies[_trans];
_eof_trans:
	 sm->cs = _dtext_trans_targs[_trans];

	if ( _dtext_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _dtext_actions + _dtext_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
#line 71 "ext/dtext/dtext.cpp.rl"
	{ sm->a1 = sm->p; }
	break;
	case 1:
#line 72 "ext/dtext/dtext.cpp.rl"
	{ sm->a2 = sm->p; }
	break;
	case 2:
#line 73 "ext/dtext/dtext.cpp.rl"
	{ sm->b1 = sm->p; }
	break;
	case 3:
#line 74 "ext/dtext/dtext.cpp.rl"
	{ sm->b2 = sm->p; }
	break;
	case 4:
#line 75 "ext/dtext/dtext.cpp.rl"
	{ sm->c1 = sm->p; }
	break;
	case 5:
#line 76 "ext/dtext/dtext.cpp.rl"
	{ sm->c2 = sm->p; }
	break;
	case 6:
#line 77 "ext/dtext/dtext.cpp.rl"
	{ sm->d1 = sm->p; }
	break;
	case 7:
#line 78 "ext/dtext/dtext.cpp.rl"
	{ sm->d2 = sm->p; }
	break;
	case 8:
#line 79 "ext/dtext/dtext.cpp.rl"
	{ sm->e1 = sm->p; }
	break;
	case 9:
#line 80 "ext/dtext/dtext.cpp.rl"
	{ sm->e2 = sm->p; }
	break;
	case 10:
#line 87 "ext/dtext/dtext.cpp.rl"
	{ save_tag_attribute(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 }); }
	break;
	case 13:
#line 1 "NONE"
	{( sm->te) = ( sm->p)+1;}
	break;
	case 14:
#line 282 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_B, "<strong>"); }}
	break;
	case 15:
#line 283 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_B); }}
	break;
	case 16:
#line 284 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_I, "<em>"); }}
	break;
	case 17:
#line 285 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_I); }}
	break;
	case 18:
#line 286 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_S, "<s>"); }}
	break;
	case 19:
#line 287 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_S); }}
	break;
	case 20:
#line 288 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_U, "<u>"); }}
	break;
	case 21:
#line 289 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_U); }}
	break;
	case 22:
#line 290 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;}
	break;
	case 23:
#line 291 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ append_html_escaped(sm, (*( sm->p))); }}
	break;
	case 24:
#line 291 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_html_escaped(sm, (*( sm->p))); }}
	break;
	case 25:
#line 291 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{ append_html_escaped(sm, (*( sm->p))); }}
	break;
	case 26:
#line 295 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 11;}
	break;
	case 27:
#line 296 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 12;}
	break;
	case 28:
#line 297 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 13;}
	break;
	case 29:
#line 298 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 14;}
	break;
	case 30:
#line 299 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 15;}
	break;
	case 31:
#line 300 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 16;}
	break;
	case 32:
#line 301 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 17;}
	break;
	case 33:
#line 302 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 18;}
	break;
	case 34:
#line 303 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 19;}
	break;
	case 35:
#line 304 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 20;}
	break;
	case 36:
#line 305 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 21;}
	break;
	case 37:
#line 306 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 22;}
	break;
	case 38:
#line 307 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 23;}
	break;
	case 39:
#line 308 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 24;}
	break;
	case 40:
#line 309 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 25;}
	break;
	case 41:
#line 310 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 26;}
	break;
	case 42:
#line 311 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 27;}
	break;
	case 43:
#line 334 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 35;}
	break;
	case 44:
#line 346 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 38;}
	break;
	case 45:
#line 354 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 40;}
	break;
	case 46:
#line 545 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 76;}
	break;
	case 47:
#line 563 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 77;}
	break;
	case 48:
#line 581 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 79;}
	break;
	case 49:
#line 583 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 80;}
	break;
	case 50:
#line 587 "ext/dtext/dtext.cpp.rl"
	{( sm->act) = 81;}
	break;
	case 51:
#line 338 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_named_url(sm, { sm->b1, sm->b2 }, { sm->a1, sm->a2 });
  }}
	break;
	case 52:
#line 342 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_named_url(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 });
  }}
	break;
	case 53:
#line 350 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_unnamed_url(sm, { sm->a1, sm->a2 });
  }}
	break;
	case 54:
#line 358 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("delimited mention: <@%.*s>", (int)(sm->a2 - sm->a1), sm->a1);
    append_mention(sm, { sm->a1, sm->a2 });
  }}
	break;
	case 55:
#line 369 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_B, "<strong>"); }}
	break;
	case 56:
#line 370 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_B); }}
	break;
	case 57:
#line 371 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_I, "<em>"); }}
	break;
	case 58:
#line 372 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_I); }}
	break;
	case 59:
#line 373 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_S, "<s>"); }}
	break;
	case 60:
#line 374 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_S); }}
	break;
	case 61:
#line 375 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_open_element(sm,  INLINE_U, "<u>"); }}
	break;
	case 62:
#line 376 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{ dstack_close_element(sm, INLINE_U); }}
	break;
	case 63:
#line 378 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, INLINE_TN, "<span class=\"tn\">");
  }}
	break;
	case 64:
#line 382 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [/tn]");

    if (dstack_check(sm, INLINE_TN)) {
      dstack_close_element(sm, INLINE_TN);
    } else if (dstack_close_element(sm, BLOCK_TN)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }}
	break;
	case 65:
#line 392 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [center]");
    dstack_open_element(sm, INLINE_CENTER, "<div class=\"center\">");
  }}
	break;
	case 66:
#line 397 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [/center]");

    if (dstack_check(sm, INLINE_CENTER)) {
      dstack_close_element(sm, INLINE_CENTER);
    } else if (dstack_close_element(sm, BLOCK_CENTER)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }}
	break;
	case 67:
#line 407 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [color]");
    dstack_open_element(sm, INLINE_COLOR, "<span style=\"color:#FF761C;\">");
  }}
	break;
	case 68:
#line 412 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [color=]");
    dstack_open_element(sm, INLINE_COLOR, "<span style=\"color:");
    append_html_escaped(sm, { sm->a1, sm->a2 });
    append(sm, "\">");
  }}
	break;
	case 69:
#line 419 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [/color]");

    if (dstack_check(sm, INLINE_COLOR)) {
      dstack_close_element(sm, INLINE_COLOR);
    } else if (dstack_close_element(sm, BLOCK_COLOR)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }}
	break;
	case 70:
#line 429 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    if (sm->header_mode) {
      append_html_escaped(sm, "<br>");
    } else {
      append(sm, "<br>");
    };
  }}
	break;
	case 71:
#line 437 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_inline_code(sm);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1720;goto _again;}}
  }}
	break;
	case 72:
#line 442 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_inline_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1720;goto _again;}}
  }}
	break;
	case 73:
#line 447 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 74:
#line 453 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 75:
#line 459 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, INLINE_SPOILER, "<span class=\"spoiler\">");
  }}
	break;
	case 76:
#line 463 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    if (dstack_is_open(sm, INLINE_SPOILER)) {
      dstack_close_element(sm, INLINE_SPOILER);
    } else if (dstack_is_open(sm, BLOCK_SPOILER)) {
      dstack_close_until(sm, BLOCK_SPOILER);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else {
      append_html_escaped(sm, { sm->ts, sm->te });
    }
  }}
	break;
	case 77:
#line 474 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, INLINE_NODTEXT, "");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1724;goto _again;}}
  }}
	break;
	case 78:
#line 482 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 79:
#line 494 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [quote]");
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 80:
#line 507 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("inline [expand]");
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 81:
#line 520 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 82:
#line 526 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    if (dstack_close_element(sm, BLOCK_TH)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }}
	break;
	case 83:
#line 532 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    if (dstack_close_element(sm, BLOCK_TD)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }}
	break;
	case 84:
#line 577 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append(sm, ' ');
  }}
	break;
	case 85:
#line 587 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 86:
#line 295 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "post", "post", "/posts/", { sm->a1, sm->a2 }); }}
	break;
	case 87:
#line 296 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "forum", "forum-post", "/forums/", { sm->a1, sm->a2 }); }}
	break;
	case 88:
#line 297 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "topic", "forum-topic", "/forums/", { sm->a1, sm->a2 }); }}
	break;
	case 89:
#line 298 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "comment", "comment", "/comments/", { sm->a1, sm->a2 }); }}
	break;
	case 90:
#line 299 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "dmail", "dmail", "/dmails/", { sm->a1, sm->a2 }); }}
	break;
	case 91:
#line 300 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "pool", "pool", "/pools/", { sm->a1, sm->a2 }); }}
	break;
	case 92:
#line 301 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "user", "user", "/users/", { sm->a1, sm->a2 }); }}
	break;
	case 93:
#line 302 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "artist", "artist", "/artists/", { sm->a1, sm->a2 }); }}
	break;
	case 94:
#line 303 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "user report", "user-report", "/user_flags/", { sm->a1, sm->a2 }); }}
	break;
	case 95:
#line 304 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "tag alias", "tag-alias", "https://beta.sankakucomplex.com/tag_aliases?id[0]=", { sm->a1, sm->a2 }); }}
	break;
	case 96:
#line 305 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "tag implication", "tag-implication", "https://beta.sankakucomplex.com/tag_implications?id[0]=", { sm->a1, sm->a2 }); }}
	break;
	case 97:
#line 306 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "tag translation", "tag-translation", "https://beta.sankakucomplex.com/tag_translations?id[0]=", { sm->a1, sm->a2 }); }}
	break;
	case 98:
#line 307 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "book", "book", "https://beta.sankakucomplex.com/books/", { sm->a1, sm->a2 }); }}
	break;
	case 99:
#line 308 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "series", "series", "https://beta.sankakucomplex.com/series/", { sm->a1, sm->a2 }); }}
	break;
	case 100:
#line 309 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "mod action", "mod-action", "/mod_actions?id=", { sm->a1, sm->a2 }); }}
	break;
	case 101:
#line 310 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "record", "user-record", "/user_records?id=", { sm->a1, sm->a2 }); }}
	break;
	case 102:
#line 311 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_id_link(sm, "wiki", "wiki-page", "/wiki/", { sm->a1, sm->a2 }); }}
	break;
	case 103:
#line 313 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_dmail_key_link(sm); }}
	break;
	case 104:
#line 315 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_paged_link(sm, "topic #", "<a class=\"dtext-link dtext-id-link dtext-forum-topic-id-link\" href=\"", "/forums/", "?page="); }}
	break;
	case 105:
#line 316 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{ append_paged_link(sm, "pixiv #", "<a rel=\"external nofollow noreferrer\" class=\"dtext-link dtext-id-link dtext-pixiv-id-link\" href=\"", "https://www.pixiv.net/artworks/", "#"); }}
	break;
	case 106:
#line 318 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_post_search_link(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 }, { sm->b1, sm->b2 }, { sm->d1, sm->d2 });
  }}
	break;
	case 107:
#line 322 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_post_search_link(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 }, { sm->c1, sm->c2 }, { sm->d1, sm->d2 });
  }}
	break;
	case 108:
#line 326 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_wiki_link(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 }, { sm->c1, sm->c2 }, { sm->b1, sm->b2 }, { sm->e1, sm->e2 });
  }}
	break;
	case 109:
#line 330 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_wiki_link(sm, { sm->a1, sm->a2 }, { sm->b1, sm->b2 }, { sm->c1, sm->c2 }, { sm->d1, sm->d2 }, { sm->e1, sm->e2 });
  }}
	break;
	case 110:
#line 334 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_bare_named_url(sm, { sm->b1, sm->b2 + 1 }, { sm->a1, sm->a2 });
  }}
	break;
	case 111:
#line 346 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_bare_unnamed_url(sm, { sm->ts, sm->te });
  }}
	break;
	case 112:
#line 354 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_mention(sm, { sm->a1, sm->a2 + 1 });
  }}
	break;
	case 113:
#line 363 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline list");
    {( sm->p) = (( sm->ts + 1))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 114:
#line 397 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline [/center]");

    if (dstack_check(sm, INLINE_CENTER)) {
      dstack_close_element(sm, INLINE_CENTER);
    } else if (dstack_close_element(sm, BLOCK_CENTER)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }}
	break;
	case 115:
#line 437 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_inline_code(sm);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1720;goto _again;}}
  }}
	break;
	case 116:
#line 442 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_inline_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1720;goto _again;}}
  }}
	break;
	case 117:
#line 474 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    dstack_open_element(sm, INLINE_NODTEXT, "");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1724;goto _again;}}
  }}
	break;
	case 118:
#line 488 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 119:
#line 501 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline [/quote]");
    dstack_close_until(sm, BLOCK_QUOTE);
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 120:
#line 514 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline [/expand]");
    dstack_close_until(sm, BLOCK_EXPAND);
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 121:
#line 538 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline [hr] (pos: %ld)", sm->ts - sm->pb);
    dstack_close_leaf_blocks(sm);
    {( sm->p) = (( sm->ts))-1;}
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 122:
#line 545 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline newline2");

    if (dstack_check(sm, BLOCK_P)) {
      dstack_rewind(sm);
    } else if (sm->header_mode) {
      dstack_close_leaf_blocks(sm);
    } else {
      dstack_close_list(sm);
    }

    if (sm->options.f_inline) {
      append(sm, " ");
    }

    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 123:
#line 563 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("inline newline");

    if (sm->header_mode) {
      dstack_close_leaf_blocks(sm);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else if (dstack_is_open(sm, BLOCK_UL)) {
      dstack_close_list(sm);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else {
      append(sm, "<br>");
    }
  }}
	break;
	case 124:
#line 583 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append(sm, std::string_view { sm->ts, sm->te });
  }}
	break;
	case 125:
#line 587 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 126:
#line 297 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{ append_id_link(sm, "topic", "forum-topic", "/forums/", { sm->a1, sm->a2 }); }}
	break;
	case 127:
#line 299 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{ append_id_link(sm, "dmail", "dmail", "/dmails/", { sm->a1, sm->a2 }); }}
	break;
	case 128:
#line 334 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_bare_named_url(sm, { sm->b1, sm->b2 + 1 }, { sm->a1, sm->a2 });
  }}
	break;
	case 129:
#line 346 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_bare_unnamed_url(sm, { sm->ts, sm->te });
  }}
	break;
	case 130:
#line 437 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_inline_code(sm);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1720;goto _again;}}
  }}
	break;
	case 131:
#line 442 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_inline_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1720;goto _again;}}
  }}
	break;
	case 132:
#line 474 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    dstack_open_element(sm, INLINE_NODTEXT, "");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1724;goto _again;}}
  }}
	break;
	case 133:
#line 545 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    g_debug("inline newline2");

    if (dstack_check(sm, BLOCK_P)) {
      dstack_rewind(sm);
    } else if (sm->header_mode) {
      dstack_close_leaf_blocks(sm);
    } else {
      dstack_close_list(sm);
    }

    if (sm->options.f_inline) {
      append(sm, " ");
    }

    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 134:
#line 563 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    g_debug("inline newline");

    if (sm->header_mode) {
      dstack_close_leaf_blocks(sm);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else if (dstack_is_open(sm, BLOCK_UL)) {
      dstack_close_list(sm);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else {
      append(sm, "<br>");
    }
  }}
	break;
	case 135:
#line 583 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append(sm, std::string_view { sm->ts, sm->te });
  }}
	break;
	case 136:
#line 587 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 137:
#line 1 "NONE"
	{	switch( ( sm->act) ) {
	case 11:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "post", "post", "/posts/", { sm->a1, sm->a2 }); }
	break;
	case 12:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "forum", "forum-post", "/forums/", { sm->a1, sm->a2 }); }
	break;
	case 13:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "topic", "forum-topic", "/forums/", { sm->a1, sm->a2 }); }
	break;
	case 14:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "comment", "comment", "/comments/", { sm->a1, sm->a2 }); }
	break;
	case 15:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "dmail", "dmail", "/dmails/", { sm->a1, sm->a2 }); }
	break;
	case 16:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "pool", "pool", "/pools/", { sm->a1, sm->a2 }); }
	break;
	case 17:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "user", "user", "/users/", { sm->a1, sm->a2 }); }
	break;
	case 18:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "artist", "artist", "/artists/", { sm->a1, sm->a2 }); }
	break;
	case 19:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "user report", "user-report", "/user_flags/", { sm->a1, sm->a2 }); }
	break;
	case 20:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "tag alias", "tag-alias", "https://beta.sankakucomplex.com/tag_aliases?id[0]=", { sm->a1, sm->a2 }); }
	break;
	case 21:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "tag implication", "tag-implication", "https://beta.sankakucomplex.com/tag_implications?id[0]=", { sm->a1, sm->a2 }); }
	break;
	case 22:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "tag translation", "tag-translation", "https://beta.sankakucomplex.com/tag_translations?id[0]=", { sm->a1, sm->a2 }); }
	break;
	case 23:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "book", "book", "https://beta.sankakucomplex.com/books/", { sm->a1, sm->a2 }); }
	break;
	case 24:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "series", "series", "https://beta.sankakucomplex.com/series/", { sm->a1, sm->a2 }); }
	break;
	case 25:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "mod action", "mod-action", "/mod_actions?id=", { sm->a1, sm->a2 }); }
	break;
	case 26:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "record", "user-record", "/user_records?id=", { sm->a1, sm->a2 }); }
	break;
	case 27:
	{{( sm->p) = ((( sm->te)))-1;} append_id_link(sm, "wiki", "wiki-page", "/wiki/", { sm->a1, sm->a2 }); }
	break;
	case 35:
	{{( sm->p) = ((( sm->te)))-1;}
    append_bare_named_url(sm, { sm->b1, sm->b2 + 1 }, { sm->a1, sm->a2 });
  }
	break;
	case 38:
	{{( sm->p) = ((( sm->te)))-1;}
    append_bare_unnamed_url(sm, { sm->ts, sm->te });
  }
	break;
	case 40:
	{{( sm->p) = ((( sm->te)))-1;}
    append_mention(sm, { sm->a1, sm->a2 + 1 });
  }
	break;
	case 76:
	{{( sm->p) = ((( sm->te)))-1;}
    g_debug("inline newline2");

    if (dstack_check(sm, BLOCK_P)) {
      dstack_rewind(sm);
    } else if (sm->header_mode) {
      dstack_close_leaf_blocks(sm);
    } else {
      dstack_close_list(sm);
    }

    if (sm->options.f_inline) {
      append(sm, " ");
    }

    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }
	break;
	case 77:
	{{( sm->p) = ((( sm->te)))-1;}
    g_debug("inline newline");

    if (sm->header_mode) {
      dstack_close_leaf_blocks(sm);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else if (dstack_is_open(sm, BLOCK_UL)) {
      dstack_close_list(sm);
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    } else {
      append(sm, "<br>");
    }
  }
	break;
	case 80:
	{{( sm->p) = ((( sm->te)))-1;}
    append(sm, std::string_view { sm->ts, sm->te });
  }
	break;
	case 81:
	{{( sm->p) = ((( sm->te)))-1;}
    append_html_escaped(sm, (*( sm->p)));
  }
	break;
	default:
	{{( sm->p) = ((( sm->te)))-1;}}
	break;
	}
	}
	break;
	case 138:
#line 593 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_rewind(sm);
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 139:
#line 598 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;}
	break;
	case 140:
#line 600 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 141:
#line 600 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 142:
#line 600 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 143:
#line 606 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_rewind(sm);
    { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
  }}
	break;
	case 144:
#line 611 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;}
	break;
	case 145:
#line 613 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 146:
#line 613 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 147:
#line 613 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_html_escaped(sm, (*( sm->p)));
  }}
	break;
	case 148:
#line 619 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_COLGROUP, "colgroup", sm->tag_attributes);
  }}
	break;
	case 149:
#line 623 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_element(sm, BLOCK_COLGROUP);
  }}
	break;
	case 150:
#line 627 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_COL, "col", sm->tag_attributes);
    dstack_pop(sm); // XXX [col] has no end tag
  }}
	break;
	case 151:
#line 632 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_THEAD, "thead", sm->tag_attributes);
  }}
	break;
	case 152:
#line 636 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_element(sm, BLOCK_THEAD);
  }}
	break;
	case 153:
#line 640 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_TBODY, "tbody", sm->tag_attributes);
  }}
	break;
	case 154:
#line 644 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_element(sm, BLOCK_TBODY);
  }}
	break;
	case 155:
#line 648 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_TH, "th", sm->tag_attributes);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1389;goto _again;}}
  }}
	break;
	case 156:
#line 653 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_TR, "tr", sm->tag_attributes);
  }}
	break;
	case 157:
#line 657 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_element(sm, BLOCK_TR);
  }}
	break;
	case 158:
#line 661 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_TD, "td", sm->tag_attributes);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1389;goto _again;}}
  }}
	break;
	case 159:
#line 666 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    if (dstack_close_element(sm, BLOCK_TABLE)) {
      { sm->cs = ( (sm->stack.data()))[--( sm->top)]; goto _again;}
    }
  }}
	break;
	case 160:
#line 672 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;}
	break;
	case 161:
#line 672 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;}
	break;
	case 162:
#line 672 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}}
	break;
	case 163:
#line 691 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_block_code(sm);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1720;goto _again;}}
  }}
	break;
	case 164:
#line 696 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_block_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1720;goto _again;}}
  }}
	break;
	case 165:
#line 701 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    append_code_fence(sm, { sm->b1, sm->b2 }, { sm->a1, sm->a2 });
  }}
	break;
	case 166:
#line 720 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("block [color]");
    dstack_open_element(sm, BLOCK_COLOR, "<p style=\"color:#FF761C;\">");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1389;goto _again;}}
  }}
	break;
	case 167:
#line 726 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("block [color=]");
    dstack_open_element(sm, BLOCK_COLOR, "<p style=\"color:");
    append_block_html_escaped(sm, { sm->a1, sm->a2 });
    append_block(sm, "\">");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1389;goto _again;}}
  }}
	break;
	case 168:
#line 734 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_NODTEXT, "<p>");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1724;goto _again;}}
  }}
	break;
	case 169:
#line 740 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_TABLE, "<table class=\"highlightable\">");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1728;goto _again;}}
  }}
	break;
	case 170:
#line 746 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    dstack_open_element(sm, BLOCK_TN, "<p class=\"tn\">");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1389;goto _again;}}
  }}
	break;
	case 171:
#line 751 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("block [center]");
    dstack_open_element(sm, BLOCK_CENTER, "<p class=\"center\">");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1389;goto _again;}}
  }}
	break;
	case 172:
#line 773 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p)+1;{
    g_debug("block char");
    ( sm->p)--;

    if (sm->dstack.empty() || dstack_check(sm, BLOCK_QUOTE) || dstack_check(sm, BLOCK_SPOILER) || dstack_check(sm, BLOCK_EXPAND)) {
      dstack_open_element(sm, BLOCK_P, "<p>");
    }

    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1389;goto _again;}}
  }}
	break;
	case 173:
#line 676 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_header(sm, *sm->a1, { sm->b1, sm->b2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1389;goto _again;}}
  }}
	break;
	case 174:
#line 681 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_QUOTE, "<blockquote>");
  }}
	break;
	case 175:
#line 686 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_SPOILER, "<div class=\"spoiler\">");
  }}
	break;
	case 176:
#line 691 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_block_code(sm);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1720;goto _again;}}
  }}
	break;
	case 177:
#line 696 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    append_block_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1720;goto _again;}}
  }}
	break;
	case 178:
#line 705 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_EXPAND, "<details>");
    append_block(sm, "<summary>Show</summary><div>");
  }}
	break;
	case 179:
#line 711 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("block [expand=]");
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_EXPAND, "<details>");
    append_block(sm, "<summary>");
    append_block_html_escaped(sm, { sm->a1, sm->a2 });
    append_block(sm, "</summary><div>");
  }}
	break;
	case 180:
#line 734 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_NODTEXT, "<p>");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1724;goto _again;}}
  }}
	break;
	case 181:
#line 757 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("write '<hr>' (pos: %ld)", sm->ts - sm->pb);
    append_block(sm, "<hr>");
  }}
	break;
	case 182:
#line 762 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("block list");
    dstack_open_list(sm, sm->a2 - sm->a1);
    {( sm->p) = (( sm->b1))-1;}
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1389;goto _again;}}
  }}
	break;
	case 183:
#line 769 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("block blank line(s)");
  }}
	break;
	case 184:
#line 773 "ext/dtext/dtext.cpp.rl"
	{( sm->te) = ( sm->p);( sm->p)--;{
    g_debug("block char");
    ( sm->p)--;

    if (sm->dstack.empty() || dstack_check(sm, BLOCK_QUOTE) || dstack_check(sm, BLOCK_SPOILER) || dstack_check(sm, BLOCK_EXPAND)) {
      dstack_open_element(sm, BLOCK_P, "<p>");
    }

    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1389;goto _again;}}
  }}
	break;
	case 185:
#line 691 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_block_code(sm);
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1720;goto _again;}}
  }}
	break;
	case 186:
#line 696 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    append_block_code(sm, { sm->a1, sm->a2 });
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1720;goto _again;}}
  }}
	break;
	case 187:
#line 734 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    dstack_close_leaf_blocks(sm);
    dstack_open_element(sm, BLOCK_NODTEXT, "<p>");
    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1724;goto _again;}}
  }}
	break;
	case 188:
#line 769 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    g_debug("block blank line(s)");
  }}
	break;
	case 189:
#line 773 "ext/dtext/dtext.cpp.rl"
	{{( sm->p) = ((( sm->te)))-1;}{
    g_debug("block char");
    ( sm->p)--;

    if (sm->dstack.empty() || dstack_check(sm, BLOCK_QUOTE) || dstack_check(sm, BLOCK_SPOILER) || dstack_check(sm, BLOCK_EXPAND)) {
      dstack_open_element(sm, BLOCK_P, "<p>");
    }

    {
  size_t len = sm->stack.size();

  if (len > MAX_STACK_DEPTH) {
    // Should never happen.
    throw DTextError("too many nested elements");
  }

  if (sm->top >= len) {
    g_debug("growing sm->stack %zi", len + 16);
    sm->stack.resize(len + 16, 0);
  }
{( (sm->stack.data()))[( sm->top)++] =  sm->cs;  sm->cs = 1389;goto _again;}}
  }}
	break;
#line 7334 "ext/dtext/dtext.cpp"
		}
	}

_again:
	_acts = _dtext_actions + _dtext_to_state_actions[ sm->cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 11:
#line 1 "NONE"
	{( sm->ts) = 0;}
	break;
#line 7345 "ext/dtext/dtext.cpp"
		}
	}

	if (  sm->cs == 0 )
		goto _out;
	if ( ++( sm->p) != ( sm->pe) )
		goto _resume;
	_test_eof: {}
	if ( ( sm->p) == ( sm->eof) )
	{
	if ( _dtext_eof_trans[ sm->cs] > 0 ) {
		_trans = _dtext_eof_trans[ sm->cs] - 1;
		goto _eof_trans;
	}
	}

	_out: {}
	}

#line 1477 "ext/dtext/dtext.cpp.rl"

  g_debug("EOF; closing stray blocks");
  dstack_close_all(sm);
  g_debug("done");

  return sm->output;
}

/* Everything below is optional, it's only needed to build bin/cdtext.exe. */
#ifdef CDTEXT

#include <glib.h>
#include <iostream>

static void parse_file(FILE* input, FILE* output) {
  std::stringstream ss;
  ss << std::cin.rdbuf();
  std::string dtext = ss.str();

  try {
    auto result = StateMachine::parse_dtext(dtext, options);

    if (fwrite(result.c_str(), 1, result.size(), output) != result.size()) {
      perror("fwrite failed");
      exit(1);
    }
  } catch (std::exception& e) {
    fprintf(stderr, "dtext parse error: %s\n", e.what());
    exit(1);
  }
}

int main(int argc, char* argv[]) {
  GError* error = NULL;
  bool opt_verbose = FALSE;
  bool opt_inline = FALSE;
  bool opt_no_mentions = FALSE;

  GOptionEntry options[] = {
    { "no-mentions", 'm', 0, G_OPTION_ARG_NONE, &opt_no_mentions, "Don't parse @mentions", NULL },
    { "inline",      'i', 0, G_OPTION_ARG_NONE, &opt_inline,      "Parse in inline mode", NULL },
    { "verbose",     'v', 0, G_OPTION_ARG_NONE, &opt_verbose,     "Print debug output", NULL },
    { NULL }
  };

  g_autoptr(GOptionContext) context = g_option_context_new("[FILE...]");
  g_option_context_add_main_entries(context, options, NULL);

  if (!g_option_context_parse(context, &argc, &argv, &error)) {
    fprintf(stderr, "option parsing failed: %s\n", error->message);
    g_clear_error(&error);
    return 1;
  }

  if (opt_verbose) {
    g_setenv("G_MESSAGES_DEBUG", "all", TRUE);
  }

  /* skip first argument (progname) */
  argc--, argv++;

  if (argc == 0) {
    parse_file(stdin, stdout, { .f_inline = opt_inline, .f_mentions = !opt_no_mentions });
    return 0;
  }

  for (const char* filename = *argv; argc > 0; argc--, argv++) {
    FILE* input = fopen(filename, "r");
    if (!input) {
      perror("fopen failed");
      return 1;
    }

    parse_file(input, stdout, opt_inline, !opt_no_mentions);
    fclose(input);
  }

  return 0;
}

#endif
